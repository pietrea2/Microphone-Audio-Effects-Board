
FinalProject342.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000313c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e80  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007188  08007188  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800719c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800719c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebbc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbe  00000000  00000000  0002ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022115  00000000  00000000  000322a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdef  00000000  00000000  000543b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2866  00000000  00000000  000641a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  00136a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080032e8 	.word	0x080032e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080032e8 	.word	0x080032e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc9b 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f8a7 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa13 	bl	8000940 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f9e7 	bl	80008ec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800051e:	f000 f90d 	bl	800073c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000522:	f000 f943 	bl	80007ac <MX_TIM1_Init>
  //128 samples per buffer



#define NUM_VALS 7988
  int vindex = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  //uint16_t values[NUM_VALS];
  const uint16_t* values = ding_pcm;
 800052a:	4b4b      	ldr	r3, [pc, #300]	; (8000658 <main+0x150>)
 800052c:	607b      	str	r3, [r7, #4]
		values[vindex++] = value;
	}
	*/


	while((DE1_AUDIO_READY_GPIO_Port->IDR & DE1_AUDIO_READY_Pin) == 0);
 800052e:	bf00      	nop
 8000530:	4b4a      	ldr	r3, [pc, #296]	; (800065c <main+0x154>)
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <main+0x28>
	// HAL_GPIO_WritePin(AUDIO_CLEAR_BUF_GPIO_PORT, AUDIO_CLEAR_BUF, GPIO_PIN_RESET);
			//while(HAL_GPIO_ReadPin(AUDIO_READY_GPIO_PORT, AUDIO_READY) != GPIO_PIN_SET);



			for (int i = 0; i < NUM_VALS -4; i += 8){
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e081      	b.n	8000646 <main+0x13e>
				  HAL_Delay(1000);
				  HAL_GPIO_WritePin(AUDIO_WRITE_AND_ENABLE_GPIO_PORT, AUDIO_WRITE, GPIO_PIN_RESET);
				  */
				  //HAL_Delay(50);

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 8000542:	4b46      	ldr	r3, [pc, #280]	; (800065c <main+0x154>)
 8000544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000548:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i];
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	4b42      	ldr	r3, [pc, #264]	; (8000660 <main+0x158>)
 8000556:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 8000558:	4b40      	ldr	r3, [pc, #256]	; (800065c <main+0x154>)
 800055a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800055e:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 8000560:	4b3e      	ldr	r3, [pc, #248]	; (800065c <main+0x154>)
 8000562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000566:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 1];
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	4b3a      	ldr	r3, [pc, #232]	; (8000660 <main+0x158>)
 8000576:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 8000578:	4b38      	ldr	r3, [pc, #224]	; (800065c <main+0x154>)
 800057a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800057e:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 8000580:	4b36      	ldr	r3, [pc, #216]	; (800065c <main+0x154>)
 8000582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000586:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 2];
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3302      	adds	r3, #2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0x158>)
 8000596:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 8000598:	4b30      	ldr	r3, [pc, #192]	; (800065c <main+0x154>)
 800059a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800059e:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 80005a0:	4b2e      	ldr	r3, [pc, #184]	; (800065c <main+0x154>)
 80005a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a6:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 3];
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3303      	adds	r3, #3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <main+0x158>)
 80005b6:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <main+0x154>)
 80005ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005be:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <main+0x154>)
 80005c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c6:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 4];
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3304      	adds	r3, #4
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0x158>)
 80005d6:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0x154>)
 80005da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005de:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <main+0x154>)
 80005e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e6:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 5];
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3305      	adds	r3, #5
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0x158>)
 80005f6:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <main+0x154>)
 80005fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005fe:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0x154>)
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 6];
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3306      	adds	r3, #6
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <main+0x158>)
 8000616:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x154>)
 800061a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800061e:	619a      	str	r2, [r3, #24]

				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_HIGH_BSSR(DE1_AUDIO_WR_Pin);
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x154>)
 8000622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000626:	619a      	str	r2, [r3, #24]
				GPIOF->ODR = values[i + 7];
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3307      	adds	r3, #7
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	881a      	ldrh	r2, [r3, #0]
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x158>)
 8000636:	615a      	str	r2, [r3, #20]
				DE1_AUDIO_WR_GPIO_Port->BSRR = PIN_LOW_BSSR(DE1_AUDIO_WR_Pin);
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <main+0x154>)
 800063a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800063e:	619a      	str	r2, [r3, #24]
			for (int i = 0; i < NUM_VALS -4; i += 8){
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3308      	adds	r3, #8
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f641 722f 	movw	r2, #7983	; 0x1f2f
 800064c:	4293      	cmp	r3, r2
 800064e:	f77f af78 	ble.w	8000542 <main+0x3a>
			}

			vindex = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
	while((DE1_AUDIO_READY_GPIO_Port->IDR & DE1_AUDIO_READY_Pin) == 0);
 8000656:	e76a      	b.n	800052e <main+0x26>
 8000658:	08003300 	.word	0x08003300
 800065c:	40020400 	.word	0x40020400
 8000660:	40021400 	.word	0x40021400

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	; 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fe30 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <SystemClock_Config+0xd0>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SystemClock_Config+0xd0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SystemClock_Config+0xd4>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SystemClock_Config+0xd4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d8:	23a8      	movs	r3, #168	; 0xa8
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f9fb 	bl	8001ae8 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 fa26 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2105      	movs	r1, #5
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe9a 	bl	8001454 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f000 fa0f 	bl	8000b48 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <MX_SPI1_Init+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x68>)
 800076a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000772:	2208      	movs	r2, #8
 8000774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x68>)
 800078a:	220a      	movs	r2, #10
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_SPI1_Init+0x68>)
 8000790:	f001 fc48 	bl	8002024 <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800079a:	f000 f9d5 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000028 	.word	0x20000028
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b096      	sub	sp, #88	; 0x58
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2220      	movs	r2, #32
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fd77 	bl	80032d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007ec:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_TIM1_Init+0x13c>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_TIM1_Init+0x138>)
 80007fe:	2205      	movs	r2, #5
 8000800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_TIM1_Init+0x138>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080e:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000814:	4833      	ldr	r0, [pc, #204]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000816:	f001 fc8e 	bl	8002136 <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000820:	f000 f992 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800082e:	4619      	mov	r1, r3
 8000830:	482c      	ldr	r0, [pc, #176]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000832:	f001 fdeb 	bl	800240c <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800083c:	f000 f984 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000840:	4828      	ldr	r0, [pc, #160]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000842:	f001 fcc7 	bl	80021d4 <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800084c:	f000 f97c 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800085c:	4619      	mov	r1, r3
 800085e:	4821      	ldr	r0, [pc, #132]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000860:	f002 f986 	bl	8002b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800086a:	f000 f96d 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	; 0x60
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000872:	230a      	movs	r3, #10
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM1_Init+0x138>)
 8000894:	f001 fcf8 	bl	8002288 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800089e:	f000 f953 	bl	8000b48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM1_Init+0x138>)
 80008c6:	f002 f9cf 	bl	8002c68 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008d0:	f000 f93a 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM1_Init+0x138>)
 80008d6:	f000 f9cf 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	; 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000080 	.word	0x20000080
 80008e8:	40010000 	.word	0x40010000

080008ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART3_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000924:	f002 f9f2 	bl	8002d0c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f90b 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000c8 	.word	0x200000c8
 800093c:	40004800 	.word	0x40004800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b75      	ldr	r3, [pc, #468]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a74      	ldr	r2, [pc, #464]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b72      	ldr	r3, [pc, #456]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a6d      	ldr	r2, [pc, #436]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 800097c:	f043 0320 	orr.w	r3, r3, #32
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a66      	ldr	r2, [pc, #408]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a5f      	ldr	r2, [pc, #380]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a58      	ldr	r2, [pc, #352]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a4a      	ldr	r2, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x1f0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a20:	4844      	ldr	r0, [pc, #272]	; (8000b34 <MX_GPIO_Init+0x1f4>)
 8000a22:	f000 fcfd 	bl	8001420 <HAL_GPIO_WritePin>
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin
                          |AUDIO12_Pin|AUDIO13_Pin|AUDIO14_Pin|AUDIO15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE1_AUDIO_WR_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f244 4181 	movw	r1, #17537	; 0x4481
 8000a2c:	4842      	ldr	r0, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x1f8>)
 8000a2e:	f000 fcf7 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SNSS_GPIO_Port, SNSS_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a38:	4840      	ldr	r0, [pc, #256]	; (8000b3c <MX_GPIO_Init+0x1fc>)
 8000a3a:	f000 fcf1 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	483a      	ldr	r0, [pc, #232]	; (8000b40 <MX_GPIO_Init+0x200>)
 8000a56:	f000 fb4f 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUDIO0_Pin AUDIO1_Pin AUDIO2_Pin AUDIO3_Pin
                           AUDIO4_Pin AUDIO5_Pin AUDIO6_Pin AUDIO7_Pin
                           AUDIO8_Pin AUDIO9_Pin AUDIO10_Pin AUDIO11_Pin
                           AUDIO12_Pin AUDIO13_Pin AUDIO14_Pin AUDIO15_Pin */
  GPIO_InitStruct.Pin = AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 8000a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin
                          |AUDIO12_Pin|AUDIO13_Pin|AUDIO14_Pin|AUDIO15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a60:	2311      	movs	r3, #17
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4830      	ldr	r0, [pc, #192]	; (8000b34 <MX_GPIO_Init+0x1f4>)
 8000a74:	f000 fb40 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a78:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4829      	ldr	r0, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x1f8>)
 8000a92:	f000 fb31 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSS_Pin */
  GPIO_InitStruct.Pin = SNSS_Pin;
 8000a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9c:	2311      	movs	r3, #17
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SNSS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4823      	ldr	r0, [pc, #140]	; (8000b3c <MX_GPIO_Init+0x1fc>)
 8000ab0:	f000 fb22 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_WR_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_WR_Pin;
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000aba:	2311      	movs	r3, #17
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DE1_AUDIO_WR_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	481a      	ldr	r0, [pc, #104]	; (8000b38 <MX_GPIO_Init+0x1f8>)
 8000ace:	f000 fb13 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_READY_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_READY_Pin;
 8000ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DE1_AUDIO_READY_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <MX_GPIO_Init+0x1f8>)
 8000ae8:	f000 fb06 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afe:	230a      	movs	r3, #10
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x204>)
 8000b0a:	f000 faf5 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_GPIO_Init+0x204>)
 8000b24:	f000 fae8 	bl	80010f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40021400 	.word	0x40021400
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_SPI_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bfe:	2360      	movs	r3, #96	; 0x60
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000c1a:	f000 fa6d 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_TIM_Base_MspInit+0x3c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d10d      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x40>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_TIM_Base_MspInit+0x40>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d11e      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_TIM_MspPostInit+0x70>)
 8000cd4:	f000 fa10 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0x84>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12c      	bne.n	8000d68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_MspInit+0x8c>)
 8000d64:	f000 f9c8 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004800 	.word	0x40004800
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020c00 	.word	0x40020c00

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f890 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd7 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fa35 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fb6f 	bl	8000508 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e40:	20000110 	.word	0x20000110

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f90d 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe6a 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f917 	bl	80010de <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f8ed 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	2000010c 	.word	0x2000010c

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000010c 	.word	0x2000010c

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff47 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff5c 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffb0 	bl	800104c <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e165      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8154 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80ae 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a5c      	ldr	r2, [pc, #368]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a58      	ldr	r2, [pc, #352]	; (80013fc <HAL_GPIO_Init+0x304>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x308>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x30c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x310>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x314>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x318>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x20a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x31c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x206>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_GPIO_Init+0x320>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x202>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00c      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00a      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x21c>
 8001312:	2300      	movs	r3, #0
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x304>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <HAL_GPIO_Init+0x324>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a31      	ldr	r2, [pc, #196]	; (800141c <HAL_GPIO_Init+0x324>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_GPIO_Init+0x324>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_GPIO_Init+0x324>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_GPIO_Init+0x324>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_GPIO_Init+0x324>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_GPIO_Init+0x324>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_GPIO_Init+0x324>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	f67f ae96 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40021400 	.word	0x40021400
 8001418:	40021800 	.word	0x40021800
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d90c      	bls.n	8001490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	2b03      	cmp	r3, #3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e067      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fce6 	bl	8000f14 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fce2 	bl	8000f14 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d20c      	bcs.n	800159c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f855 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc46 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	08007168 	.word	0x08007168
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_GetHCLKFreq+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000

08001638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800163c:	f7ff fff0 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001640:	4602      	mov	r2, r0
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	4903      	ldr	r1, [pc, #12]	; (800165c <HAL_RCC_GetPCLK1Freq+0x24>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	08007178 	.word	0x08007178

08001660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001664:	f7ff ffdc 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	0b5b      	lsrs	r3, r3, #13
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	08007178 	.word	0x08007178

08001688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800168c:	b0ae      	sub	sp, #184	; 0xb8
 800168e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ae:	4bcb      	ldr	r3, [pc, #812]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	f200 8206 	bhi.w	8001ac8 <HAL_RCC_GetSysClockFreq+0x440>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016f9 	.word	0x080016f9
 80016c8:	08001ac9 	.word	0x08001ac9
 80016cc:	08001ac9 	.word	0x08001ac9
 80016d0:	08001ac9 	.word	0x08001ac9
 80016d4:	08001701 	.word	0x08001701
 80016d8:	08001ac9 	.word	0x08001ac9
 80016dc:	08001ac9 	.word	0x08001ac9
 80016e0:	08001ac9 	.word	0x08001ac9
 80016e4:	08001709 	.word	0x08001709
 80016e8:	08001ac9 	.word	0x08001ac9
 80016ec:	08001ac9 	.word	0x08001ac9
 80016f0:	08001ac9 	.word	0x08001ac9
 80016f4:	080018f9 	.word	0x080018f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4bb9      	ldr	r3, [pc, #740]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016fe:	e1e7      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001700:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001706:	e1e3      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001708:	4bb4      	ldr	r3, [pc, #720]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001714:	4bb1      	ldr	r3, [pc, #708]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d071      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4bae      	ldr	r3, [pc, #696]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800172c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001746:	4622      	mov	r2, r4
 8001748:	462b      	mov	r3, r5
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4621      	mov	r1, r4
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	6439      	str	r1, [r7, #64]	; 0x40
 8001764:	4629      	mov	r1, r5
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	1a51      	subs	r1, r2, r1
 800178a:	63b9      	str	r1, [r7, #56]	; 0x38
 800178c:	4649      	mov	r1, r9
 800178e:	eb63 0301 	sbc.w	r3, r3, r1
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017a0:	4649      	mov	r1, r9
 80017a2:	00cb      	lsls	r3, r1, #3
 80017a4:	4641      	mov	r1, r8
 80017a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017aa:	4641      	mov	r1, r8
 80017ac:	00ca      	lsls	r2, r1, #3
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	4622      	mov	r2, r4
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ba:	462b      	mov	r3, r5
 80017bc:	460a      	mov	r2, r1
 80017be:	eb42 0303 	adc.w	r3, r2, r3
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017d0:	4629      	mov	r1, r5
 80017d2:	024b      	lsls	r3, r1, #9
 80017d4:	4621      	mov	r1, r4
 80017d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017da:	4621      	mov	r1, r4
 80017dc:	024a      	lsls	r2, r1, #9
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017f4:	f7fe fd06 	bl	8000204 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001802:	e067      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001810:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	67bb      	str	r3, [r7, #120]	; 0x78
 800181e:	2300      	movs	r3, #0
 8001820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001822:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001826:	4622      	mov	r2, r4
 8001828:	462b      	mov	r3, r5
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	0159      	lsls	r1, r3, #5
 8001834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001838:	0150      	lsls	r0, r2, #5
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4621      	mov	r1, r4
 8001840:	1a51      	subs	r1, r2, r1
 8001842:	62b9      	str	r1, [r7, #40]	; 0x28
 8001844:	4629      	mov	r1, r5
 8001846:	eb63 0301 	sbc.w	r3, r3, r1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001858:	4649      	mov	r1, r9
 800185a:	018b      	lsls	r3, r1, #6
 800185c:	4641      	mov	r1, r8
 800185e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001862:	4641      	mov	r1, r8
 8001864:	018a      	lsls	r2, r1, #6
 8001866:	4641      	mov	r1, r8
 8001868:	ebb2 0a01 	subs.w	sl, r2, r1
 800186c:	4649      	mov	r1, r9
 800186e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800187e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001886:	4692      	mov	sl, r2
 8001888:	469b      	mov	fp, r3
 800188a:	4623      	mov	r3, r4
 800188c:	eb1a 0303 	adds.w	r3, sl, r3
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	462b      	mov	r3, r5
 8001894:	eb4b 0303 	adc.w	r3, fp, r3
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018a6:	4629      	mov	r1, r5
 80018a8:	028b      	lsls	r3, r1, #10
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b0:	4621      	mov	r1, r4
 80018b2:	028a      	lsls	r2, r1, #10
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018bc:	2200      	movs	r2, #0
 80018be:	673b      	str	r3, [r7, #112]	; 0x70
 80018c0:	677a      	str	r2, [r7, #116]	; 0x74
 80018c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018c6:	f7fe fc9d 	bl	8000204 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4613      	mov	r3, r2
 80018d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	3301      	adds	r3, #1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018f6:	e0eb      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d06b      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	2200      	movs	r2, #0
 8001918:	66bb      	str	r3, [r7, #104]	; 0x68
 800191a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800191c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001922:	663b      	str	r3, [r7, #96]	; 0x60
 8001924:	2300      	movs	r3, #0
 8001926:	667b      	str	r3, [r7, #100]	; 0x64
 8001928:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800192c:	4622      	mov	r2, r4
 800192e:	462b      	mov	r3, r5
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	0159      	lsls	r1, r3, #5
 800193a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193e:	0150      	lsls	r0, r2, #5
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4621      	mov	r1, r4
 8001946:	1a51      	subs	r1, r2, r1
 8001948:	61b9      	str	r1, [r7, #24]
 800194a:	4629      	mov	r1, r5
 800194c:	eb63 0301 	sbc.w	r3, r3, r1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800195e:	4659      	mov	r1, fp
 8001960:	018b      	lsls	r3, r1, #6
 8001962:	4651      	mov	r1, sl
 8001964:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001968:	4651      	mov	r1, sl
 800196a:	018a      	lsls	r2, r1, #6
 800196c:	4651      	mov	r1, sl
 800196e:	ebb2 0801 	subs.w	r8, r2, r1
 8001972:	4659      	mov	r1, fp
 8001974:	eb63 0901 	sbc.w	r9, r3, r1
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001984:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001988:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198c:	4690      	mov	r8, r2
 800198e:	4699      	mov	r9, r3
 8001990:	4623      	mov	r3, r4
 8001992:	eb18 0303 	adds.w	r3, r8, r3
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	462b      	mov	r3, r5
 800199a:	eb49 0303 	adc.w	r3, r9, r3
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019ac:	4629      	mov	r1, r5
 80019ae:	024b      	lsls	r3, r1, #9
 80019b0:	4621      	mov	r1, r4
 80019b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019b6:	4621      	mov	r1, r4
 80019b8:	024a      	lsls	r2, r1, #9
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c2:	2200      	movs	r2, #0
 80019c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80019c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019cc:	f7fe fc1a 	bl	8000204 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4613      	mov	r3, r2
 80019d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019da:	e065      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x420>
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	4611      	mov	r1, r2
 80019f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019f8:	653b      	str	r3, [r7, #80]	; 0x50
 80019fa:	2300      	movs	r3, #0
 80019fc:	657b      	str	r3, [r7, #84]	; 0x54
 80019fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a02:	4642      	mov	r2, r8
 8001a04:	464b      	mov	r3, r9
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	0159      	lsls	r1, r3, #5
 8001a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a14:	0150      	lsls	r0, r2, #5
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	1a51      	subs	r1, r2, r1
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	4649      	mov	r1, r9
 8001a22:	eb63 0301 	sbc.w	r3, r3, r1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a34:	4659      	mov	r1, fp
 8001a36:	018b      	lsls	r3, r1, #6
 8001a38:	4651      	mov	r1, sl
 8001a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3e:	4651      	mov	r1, sl
 8001a40:	018a      	lsls	r2, r1, #6
 8001a42:	4651      	mov	r1, sl
 8001a44:	1a54      	subs	r4, r2, r1
 8001a46:	4659      	mov	r1, fp
 8001a48:	eb63 0501 	sbc.w	r5, r3, r1
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	00eb      	lsls	r3, r5, #3
 8001a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	18e3      	adds	r3, r4, r3
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	464b      	mov	r3, r9
 8001a68:	eb45 0303 	adc.w	r3, r5, r3
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	028b      	lsls	r3, r1, #10
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a84:	4621      	mov	r1, r4
 8001a86:	028a      	lsls	r2, r1, #10
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a90:	2200      	movs	r2, #0
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a9a:	f7fe fbb3 	bl	8000204 <__aeabi_uldivmod>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	0f1b      	lsrs	r3, r3, #28
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ac6:	e003      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ace:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	37b8      	adds	r7, #184	; 0xb8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400

08001ae8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e28d      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8083 	beq.w	8001c0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b08:	4b94      	ldr	r3, [pc, #592]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d019      	beq.n	8001b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b14:	4b91      	ldr	r3, [pc, #580]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b20:	4b8e      	ldr	r3, [pc, #568]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2c:	d00c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4b8b      	ldr	r3, [pc, #556]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b84      	ldr	r3, [pc, #528]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x124>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e25a      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x90>
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7b      	ldr	r2, [pc, #492]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xcc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xb4>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b73      	ldr	r3, [pc, #460]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a72      	ldr	r2, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xcc>
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6b      	ldr	r2, [pc, #428]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f9aa 	bl	8000f14 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f9a6 	bl	8000f14 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e21f      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xdc>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f996 	bl	8000f14 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f992 	bl	8000f14 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e20b      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x104>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d06f      	beq.n	8001cfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d017      	beq.n	8001c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c26:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x186>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1d3      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x278>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f93f 	bl	8000f14 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f93b 	bl	8000f14 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1b4      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4925      	ldr	r1, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_OscConfig+0x278>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f91e 	bl	8000f14 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f91a 	bl	8000f14 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e193      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d036      	beq.n	8001d74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f8fe 	bl	8000f14 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f8fa 	bl	8000f14 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e173      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x234>
 8001d3a:	e01b      	b.n	8001d74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff f8e7 	bl	8000f14 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e00e      	b.n	8001d68 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f8e3 	bl	8000f14 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d907      	bls.n	8001d68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e15c      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	42470000 	.word	0x42470000
 8001d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b8a      	ldr	r3, [pc, #552]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ea      	bne.n	8001d4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a7e      	ldr	r2, [pc, #504]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff f8a3 	bl	8000f14 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7ff f89f 	bl	8000f14 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e118      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x4b0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x31e>
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x358>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x340>
 8001e0e:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a60      	ldr	r2, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x358>
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f864 	bl	8000f14 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f860 	bl	8000f14 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0d7      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RCC_OscConfig+0x368>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff f84e 	bl	8000f14 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f84a 	bl	8000f14 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0c1      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80ad 	beq.w	8002014 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d060      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d145      	bne.n	8001f5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f81e 	bl	8000f14 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f81a 	bl	8000f14 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e093      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	071b      	lsls	r3, r3, #28
 8001f26:	491b      	ldr	r1, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ffef 	bl	8000f14 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe ffeb 	bl	8000f14 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e064      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x452>
 8001f58:	e05c      	b.n	8002014 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_OscConfig+0x4b4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7fe ffd8 	bl	8000f14 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe ffd4 	bl	8000f14 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04d      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x480>
 8001f86:	e045      	b.n	8002014 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e040      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x538>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d129      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d122      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d119      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10f      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07b      	b.n	800212e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002046:	d009      	beq.n	800205c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
 800204e:	e005      	b.n	800205c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fd94 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002092:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0104 	and.w	r1, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f003 0210 	and.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e041      	b.n	80021cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7fe fd69 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f000 fa11 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e041      	b.n	800226a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f839 	bl	8002272 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f000 f9c2 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0ae      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	f200 809f 	bhi.w	80023f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	080023f5 	.word	0x080023f5
 80022c4:	080023f5 	.word	0x080023f5
 80022c8:	080023f5 	.word	0x080023f5
 80022cc:	08002331 	.word	0x08002331
 80022d0:	080023f5 	.word	0x080023f5
 80022d4:	080023f5 	.word	0x080023f5
 80022d8:	080023f5 	.word	0x080023f5
 80022dc:	08002373 	.word	0x08002373
 80022e0:	080023f5 	.word	0x080023f5
 80022e4:	080023f5 	.word	0x080023f5
 80022e8:	080023f5 	.word	0x080023f5
 80022ec:	080023b3 	.word	0x080023b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f9f0 	bl	80026dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	619a      	str	r2, [r3, #24]
      break;
 800232e:	e064      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa40 	bl	80027bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6999      	ldr	r1, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	021a      	lsls	r2, r3, #8
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]
      break;
 8002370:	e043      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fa95 	bl	80028a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0208 	orr.w	r2, r2, #8
 800238c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	61da      	str	r2, [r3, #28]
      break;
 80023b0:	e023      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fae9 	bl	8002990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69d9      	ldr	r1, [r3, #28]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	61da      	str	r2, [r3, #28]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
      break;
 80023f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e0b4      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d03e      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	f200 8087 	bhi.w	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f000 8086 	beq.w	800257e <HAL_TIM_ConfigClockSource+0x172>
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d87f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d01a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xa6>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d87b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d050      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x11a>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d877      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d03c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xfa>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d873      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d058      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x13a>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d86f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d064      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d867      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024b0:	e062      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f000 fb35 	bl	8002b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e04f      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 fb1e 	bl	8002b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 fa92 	bl	8002a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	4618      	mov	r0, r3
 8002520:	f000 faeb 	bl	8002afa <TIM_ITRx_SetConfig>
      break;
 8002524:	e02c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 fab1 	bl	8002a9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	; 0x60
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fadb 	bl	8002afa <TIM_ITRx_SetConfig>
      break;
 8002544:	e01c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 fa72 	bl	8002a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f000 facb 	bl	8002afa <TIM_ITRx_SetConfig>
      break;
 8002564:	e00c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 fac2 	bl	8002afa <TIM_ITRx_SetConfig>
      break;
 8002576:	e003      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e000      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d00f      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3d      	ldr	r2, [pc, #244]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00b      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <TIM_Base_SetConfig+0x120>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02b      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d027      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d023      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <TIM_Base_SetConfig+0x120>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01b      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d017      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <TIM_Base_SetConfig+0x128>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <TIM_Base_SetConfig+0x12c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00f      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <TIM_Base_SetConfig+0x130>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00b      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <TIM_Base_SetConfig+0x134>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <TIM_Base_SetConfig+0x138>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <TIM_Base_SetConfig+0x13c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d108      	bne.n	8002660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	40010400 	.word	0x40010400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800
 80026d0:	40001800 	.word	0x40001800
 80026d4:	40001c00 	.word	0x40001c00
 80026d8:	40002000 	.word	0x40002000

080026dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0201 	bic.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f023 0302 	bic.w	r3, r3, #2
 8002724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <TIM_OC1_SetConfig+0xd8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_OC1_SetConfig+0x64>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <TIM_OC1_SetConfig+0xdc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10c      	bne.n	800275a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0308 	bic.w	r3, r3, #8
 8002746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <TIM_OC1_SetConfig+0xd8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_OC1_SetConfig+0x8e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <TIM_OC1_SetConfig+0xdc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	621a      	str	r2, [r3, #32]
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010400 	.word	0x40010400

080027bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0210 	bic.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f023 0320 	bic.w	r3, r3, #32
 8002806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <TIM_OC2_SetConfig+0xe4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_OC2_SetConfig+0x68>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <TIM_OC2_SetConfig+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10d      	bne.n	8002840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <TIM_OC2_SetConfig+0xe4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <TIM_OC2_SetConfig+0x94>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <TIM_OC2_SetConfig+0xe8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d113      	bne.n	8002878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40010400 	.word	0x40010400

080028a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a21      	ldr	r2, [pc, #132]	; (8002988 <TIM_OC3_SetConfig+0xe0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_OC3_SetConfig+0x66>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <TIM_OC3_SetConfig+0xe4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10d      	bne.n	800292a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a16      	ldr	r2, [pc, #88]	; (8002988 <TIM_OC3_SetConfig+0xe0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_OC3_SetConfig+0x92>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <TIM_OC3_SetConfig+0xe4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d113      	bne.n	8002962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40010000 	.word	0x40010000
 800298c:	40010400 	.word	0x40010400

08002990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	031b      	lsls	r3, r3, #12
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <TIM_OC4_SetConfig+0xa4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC4_SetConfig+0x68>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <TIM_OC4_SetConfig+0xa8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40010400 	.word	0x40010400

08002a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 030a 	bic.w	r3, r3, #10
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	031b      	lsls	r3, r3, #12
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f043 0307 	orr.w	r3, r3, #7
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e05a      	b.n	8002c3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d01d      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40001800 	.word	0x40001800

08002c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e03d      	b.n	8002d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e03f      	b.n	8002d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd ffda 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f829 	bl	8002da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	b0c0      	sub	sp, #256	; 0x100
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	68d9      	ldr	r1, [r3, #12]
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	ea40 0301 	orr.w	r3, r0, r1
 8002dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e00:	f021 010c 	bic.w	r1, r1, #12
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e22:	6999      	ldr	r1, [r3, #24]
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	ea40 0301 	orr.w	r3, r0, r1
 8002e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <UART_SetConfig+0x2cc>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0xa0>
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <UART_SetConfig+0x2d0>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d104      	bne.n	8002e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e48:	f7fe fc0a 	bl	8001660 <HAL_RCC_GetPCLK2Freq>
 8002e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e50:	e003      	b.n	8002e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e52:	f7fe fbf1 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
 8002e56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	f040 810c 	bne.w	8003080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	1891      	adds	r1, r2, r2
 8002e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e82:	415b      	adcs	r3, r3
 8002e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	eb12 0801 	adds.w	r8, r2, r1
 8002e90:	4629      	mov	r1, r5
 8002e92:	eb43 0901 	adc.w	r9, r3, r1
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eaa:	4690      	mov	r8, r2
 8002eac:	4699      	mov	r9, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	eb18 0303 	adds.w	r3, r8, r3
 8002eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eb8:	462b      	mov	r3, r5
 8002eba:	eb49 0303 	adc.w	r3, r9, r3
 8002ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	18db      	adds	r3, r3, r3
 8002eda:	653b      	str	r3, [r7, #80]	; 0x50
 8002edc:	4613      	mov	r3, r2
 8002ede:	eb42 0303 	adc.w	r3, r2, r3
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002eec:	f7fd f98a 	bl	8000204 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <UART_SetConfig+0x2d4>)
 8002ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	011c      	lsls	r4, r3, #4
 8002efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f10:	4642      	mov	r2, r8
 8002f12:	464b      	mov	r3, r9
 8002f14:	1891      	adds	r1, r2, r2
 8002f16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f18:	415b      	adcs	r3, r3
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f20:	4641      	mov	r1, r8
 8002f22:	eb12 0a01 	adds.w	sl, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb43 0b01 	adc.w	fp, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f40:	4692      	mov	sl, r2
 8002f42:	469b      	mov	fp, r3
 8002f44:	4643      	mov	r3, r8
 8002f46:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	eb4b 0303 	adc.w	r3, fp, r3
 8002f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	18db      	adds	r3, r3, r3
 8002f70:	643b      	str	r3, [r7, #64]	; 0x40
 8002f72:	4613      	mov	r3, r2
 8002f74:	eb42 0303 	adc.w	r3, r2, r3
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f82:	f7fd f93f 	bl	8000204 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	; (800307c <UART_SetConfig+0x2d4>)
 8002f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2264      	movs	r2, #100	; 0x64
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	1acb      	subs	r3, r1, r3
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <UART_SetConfig+0x2d4>)
 8002fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb0:	441c      	add	r4, r3
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	1891      	adds	r1, r2, r2
 8002fca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fcc:	415b      	adcs	r3, r3
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	1851      	adds	r1, r2, r1
 8002fd8:	6339      	str	r1, [r7, #48]	; 0x30
 8002fda:	4649      	mov	r1, r9
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fec:	4659      	mov	r1, fp
 8002fee:	00cb      	lsls	r3, r1, #3
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	00ca      	lsls	r2, r1, #3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	4642      	mov	r2, r8
 8003002:	189b      	adds	r3, r3, r2
 8003004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003008:	464b      	mov	r3, r9
 800300a:	460a      	mov	r2, r1
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800303e:	f7fd f8e1 	bl	8000204 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <UART_SetConfig+0x2d4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <UART_SetConfig+0x2d4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4422      	add	r2, r4
 800306e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003070:	e105      	b.n	800327e <UART_SetConfig+0x4d6>
 8003072:	bf00      	nop
 8003074:	40011000 	.word	0x40011000
 8003078:	40011400 	.word	0x40011400
 800307c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800308a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800308e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003092:	4642      	mov	r2, r8
 8003094:	464b      	mov	r3, r9
 8003096:	1891      	adds	r1, r2, r2
 8003098:	6239      	str	r1, [r7, #32]
 800309a:	415b      	adcs	r3, r3
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a2:	4641      	mov	r1, r8
 80030a4:	1854      	adds	r4, r2, r1
 80030a6:	4649      	mov	r1, r9
 80030a8:	eb43 0501 	adc.w	r5, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030c8:	464b      	mov	r3, r9
 80030ca:	eb45 0303 	adc.w	r3, r5, r3
 80030ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030ee:	4629      	mov	r1, r5
 80030f0:	008b      	lsls	r3, r1, #2
 80030f2:	4621      	mov	r1, r4
 80030f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030f8:	4621      	mov	r1, r4
 80030fa:	008a      	lsls	r2, r1, #2
 80030fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003100:	f7fd f880 	bl	8000204 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b60      	ldr	r3, [pc, #384]	; (800328c <UART_SetConfig+0x4e4>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	011c      	lsls	r4, r3, #4
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800311c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	61b9      	str	r1, [r7, #24]
 800312c:	415b      	adcs	r3, r3
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003134:	4641      	mov	r1, r8
 8003136:	1851      	adds	r1, r2, r1
 8003138:	6139      	str	r1, [r7, #16]
 800313a:	4649      	mov	r1, r9
 800313c:	414b      	adcs	r3, r1
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800314c:	4659      	mov	r1, fp
 800314e:	00cb      	lsls	r3, r1, #3
 8003150:	4651      	mov	r1, sl
 8003152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003156:	4651      	mov	r1, sl
 8003158:	00ca      	lsls	r2, r1, #3
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	4603      	mov	r3, r0
 8003160:	4642      	mov	r2, r8
 8003162:	189b      	adds	r3, r3, r2
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	67bb      	str	r3, [r7, #120]	; 0x78
 800317e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800318c:	4649      	mov	r1, r9
 800318e:	008b      	lsls	r3, r1, #2
 8003190:	4641      	mov	r1, r8
 8003192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003196:	4641      	mov	r1, r8
 8003198:	008a      	lsls	r2, r1, #2
 800319a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800319e:	f7fd f831 	bl	8000204 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <UART_SetConfig+0x4e4>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	3332      	adds	r3, #50	; 0x32
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <UART_SetConfig+0x4e4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c6:	441c      	add	r4, r3
 80031c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031cc:	2200      	movs	r2, #0
 80031ce:	673b      	str	r3, [r7, #112]	; 0x70
 80031d0:	677a      	str	r2, [r7, #116]	; 0x74
 80031d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031d6:	4642      	mov	r2, r8
 80031d8:	464b      	mov	r3, r9
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	415b      	adcs	r3, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e6:	4641      	mov	r1, r8
 80031e8:	1851      	adds	r1, r2, r1
 80031ea:	6039      	str	r1, [r7, #0]
 80031ec:	4649      	mov	r1, r9
 80031ee:	414b      	adcs	r3, r1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031fe:	4659      	mov	r1, fp
 8003200:	00cb      	lsls	r3, r1, #3
 8003202:	4651      	mov	r1, sl
 8003204:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003208:	4651      	mov	r1, sl
 800320a:	00ca      	lsls	r2, r1, #3
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	4603      	mov	r3, r0
 8003212:	4642      	mov	r2, r8
 8003214:	189b      	adds	r3, r3, r2
 8003216:	66bb      	str	r3, [r7, #104]	; 0x68
 8003218:	464b      	mov	r3, r9
 800321a:	460a      	mov	r2, r1
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	663b      	str	r3, [r7, #96]	; 0x60
 800322c:	667a      	str	r2, [r7, #100]	; 0x64
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800323a:	4649      	mov	r1, r9
 800323c:	008b      	lsls	r3, r1, #2
 800323e:	4641      	mov	r1, r8
 8003240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003244:	4641      	mov	r1, r8
 8003246:	008a      	lsls	r2, r1, #2
 8003248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800324c:	f7fc ffda 	bl	8000204 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <UART_SetConfig+0x4e4>)
 8003256:	fba3 1302 	umull	r1, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2164      	movs	r1, #100	; 0x64
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	3332      	adds	r3, #50	; 0x32
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <UART_SetConfig+0x4e4>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4422      	add	r2, r4
 800327c:	609a      	str	r2, [r3, #8]
}
 800327e:	bf00      	nop
 8003280:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	51eb851f 	.word	0x51eb851f

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f820 	bl	80032e8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08007188 	.word	0x08007188
 80032cc:	08007188 	.word	0x08007188
 80032d0:	08007188 	.word	0x08007188
 80032d4:	0800718c 	.word	0x0800718c

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

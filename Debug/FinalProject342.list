
FinalProject342.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003754  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003978  08003978  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003980  08003980  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  080039f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080039f8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  0002ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002244d  00000000  00000000  00032458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010192  00000000  00000000  000548a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2d4c  00000000  00000000  00064a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f24  00000000  00000000  001377d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800390c 	.word	0x0800390c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800390c 	.word	0x0800390c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <delay_us>:

#define PIN_LOW_BSSR(pin) ((uint32_t)pin << 16U)
#define PIN_HIGH_BSSR(pin) (pin)

void delay_us(uint16_t us)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <delay_us+0x30>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 80005c6:	bf00      	nop
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <delay_us+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3f9      	bcc.n	80005c8 <delay_us+0x14>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000e4 	.word	0x200000e4

080005e8 <get_spi_word>:


int16_t get_spi_word(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
	//HAL_SPI_Receive(&hspi1, (uint8_t*)&data, 1, 100);

	//uint8_t data[2];
	uint16_t data;

	SNSS_GPIO_Port->BSRR = PIN_LOW_BSSR(SNSS_Pin);
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <get_spi_word+0xf0>)
 80005f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005f4:	619a      	str	r2, [r3, #24]

	hspi1.State       = HAL_SPI_STATE_BUSY_RX;
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <get_spi_word+0xf4>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	hspi1.ErrorCode   = HAL_SPI_ERROR_NONE;
 80005fe:	4b37      	ldr	r3, [pc, #220]	; (80006dc <get_spi_word+0xf4>)
 8000600:	2200      	movs	r2, #0
 8000602:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.pRxBuffPtr  = (uint8_t *)&data;
 8000604:	4a35      	ldr	r2, [pc, #212]	; (80006dc <get_spi_word+0xf4>)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	6393      	str	r3, [r2, #56]	; 0x38
	hspi1.RxXferSize  = 1;
 800060a:	4b34      	ldr	r3, [pc, #208]	; (80006dc <get_spi_word+0xf4>)
 800060c:	2201      	movs	r2, #1
 800060e:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi1.RxXferCount = 1;
 8000610:	4b32      	ldr	r3, [pc, #200]	; (80006dc <get_spi_word+0xf4>)
 8000612:	2201      	movs	r2, #1
 8000614:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi1.pTxBuffPtr  = (uint8_t *)NULL;
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <get_spi_word+0xf4>)
 8000618:	2200      	movs	r2, #0
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.TxXferSize  = 0U;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <get_spi_word+0xf4>)
 800061e:	2200      	movs	r2, #0
 8000620:	869a      	strh	r2, [r3, #52]	; 0x34
	hspi1.TxXferCount = 0U;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <get_spi_word+0xf4>)
 8000624:	2200      	movs	r2, #0
 8000626:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi1.RxISR       = NULL;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <get_spi_word+0xf4>)
 800062a:	2200      	movs	r2, #0
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
	hspi1.TxISR       = NULL;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <get_spi_word+0xf4>)
 8000630:	2200      	movs	r2, #0
 8000632:	645a      	str	r2, [r3, #68]	; 0x44

	__HAL_SPI_ENABLE(&hspi1);
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <get_spi_word+0xf4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <get_spi_word+0xf4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000642:	601a      	str	r2, [r3, #0]
	while (!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE));
 8000644:	bf00      	nop
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <get_spi_word+0xf4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b01      	cmp	r3, #1
 8000652:	d1f8      	bne.n	8000646 <get_spi_word+0x5e>

	data = (uint16_t)hspi1.Instance->DR;
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <get_spi_word+0xf4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	b29b      	uxth	r3, r3
 800065c:	80bb      	strh	r3, [r7, #4]
	hspi1.pRxBuffPtr += sizeof(uint16_t);
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <get_spi_word+0xf4>)
 8000660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000662:	3302      	adds	r3, #2
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <get_spi_word+0xf4>)
 8000666:	6393      	str	r3, [r2, #56]	; 0x38
	hspi1.RxXferCount--;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <get_spi_word+0xf4>)
 800066a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800066c:	b29b      	uxth	r3, r3
 800066e:	3b01      	subs	r3, #1
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <get_spi_word+0xf4>)
 8000674:	87da      	strh	r2, [r3, #62]	; 0x3e

	__HAL_SPI_DISABLE(&hspi1);
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <get_spi_word+0xf4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <get_spi_word+0xf4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000684:	601a      	str	r2, [r3, #0]
	while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE));
 8000686:	bf00      	nop
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <get_spi_word+0xf4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b01      	cmp	r3, #1
 8000694:	d0f8      	beq.n	8000688 <get_spi_word+0xa0>

	SNSS_GPIO_Port->BSRR = PIN_HIGH_BSSR(SNSS_Pin);
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <get_spi_word+0xf0>)
 8000698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800069c:	619a      	str	r2, [r3, #24]

	hspi1.State = HAL_SPI_STATE_READY;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <get_spi_word+0xf4>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	//while(hspi1.State == HAL_SPI_STATE_BUSY);
	//HAL_SPI_Receive(&hspi1, &data[1], 1, 100);
	//SNSS_GPIO_Port->BSRR = PIN_HIGH_BSSR(SNSS_Pin);

	// sign extend!
	uint16_t ext_data = (data & 0xFFF) | ((data & 0x800) ? 0xF000 : 0);
 80006a6:	88bb      	ldrh	r3, [r7, #4]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	88ba      	ldrh	r2, [r7, #4]
 80006b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d001      	beq.n	80006be <get_spi_word+0xd6>
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <get_spi_word+0xf8>)
 80006bc:	e000      	b.n	80006c0 <get_spi_word+0xd8>
 80006be:	2200      	movs	r2, #0
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	80fb      	strh	r3, [r7, #6]
	//uint16_t data16 = (uint16_t)(data[0] << 8) | data[1];
	//uint16_t ext_data = (data16 & 0xFFF) | ((data16 & 0x800) ? 0xF000 : 0);
	return (int16_t)ext_data;
 80006c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	fffff000 	.word	0xfffff000

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	f2ad 4d94 	subw	sp, sp, #1172	; 0x494
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fc00 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f860 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f97c 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 f950 	bl	800099c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006fc:	f000 f8c6 	bl	800088c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000700:	f000 f8fc 	bl	80008fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000704:	4828      	ldr	r0, [pc, #160]	; (80007a8 <main+0xc4>)
 8000706:	f001 fdb9 	bl	800227c <HAL_TIM_Base_Start>



//#define NUM_VALS 7988
#define NUM_VALS 128
  int vindex = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
    //values[NUM_VALS - 1] = 0xfeee;

  //memset(values, 0x10//, sizeof(uint16_t) * 64);
  //memset(values + 64, 0x01, sizeof(uint16_t) * 64);

  int strindex = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	while(vindex <= NUM_VALS)
 8000716:	e011      	b.n	800073c <main+0x58>
		//SNSS_GPIO_Port->BSRR = PIN_HIGH_BSSR(SNSS_Pin); // nss1 high

		//sprintf(strbuf, "%d, ", value);
		//HAL_UART_Transmit(&huart3, (uint8_t*)strbuf, strlen(strbuf), 100);

		values[vindex++] = get_spi_word();
 8000718:	f8d7 448c 	ldr.w	r4, [r7, #1164]	; 0x48c
 800071c:	1c63      	adds	r3, r4, #1
 800071e:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8000722:	f7ff ff61 	bl	80005e8 <get_spi_word>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800072e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000732:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		delay_us(20);
 8000736:	2014      	movs	r0, #20
 8000738:	f7ff ff3c 	bl	80005b4 <delay_us>
	while(vindex <= NUM_VALS)
 800073c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8000740:	2b80      	cmp	r3, #128	; 0x80
 8000742:	dde9      	ble.n	8000718 <main+0x34>
	//HAL_UART_Transmit(&huart3, (uint8_t*)strbuf2, strlen(strbuf2), 100);

		//HAL_UART_Transmit(&huart3, (uint8_t*)"\n\nBegin:\n", strlen("\n\nBegin:\n"), 100);
		//CDC_Transmit_FS((uint8_t*)"\n\nBegin:\n", strlen("\n\nBegin:\n"));

		for (int i = 0; i < NUM_VALS; ++i)
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800074a:	e01a      	b.n	8000782 <main+0x9e>
			strindex += sprintf(strbuf + strindex, "%hd, ", values[i]);
 800074c:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000750:	1d3a      	adds	r2, r7, #4
 8000752:	18d0      	adds	r0, r2, r3
 8000754:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000758:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800075c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8000760:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000764:	461a      	mov	r2, r3
 8000766:	4911      	ldr	r1, [pc, #68]	; (80007ac <main+0xc8>)
 8000768:	f002 fc62 	bl	8003030 <siprintf>
 800076c:	4602      	mov	r2, r0
 800076e:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8000772:	4413      	add	r3, r2
 8000774:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
		for (int i = 0; i < NUM_VALS; ++i)
 8000778:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800077c:	3301      	adds	r3, #1
 800077e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8000782:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000786:	2b7f      	cmp	r3, #127	; 0x7f
 8000788:	dde0      	ble.n	800074c <main+0x68>

		//while(HAL_UART_GetState(&huart3) != HAL_UART_STATE_READY);
		HAL_UART_Transmit(&huart3, (uint8_t*)strbuf, strindex, 100);
 800078a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800078e:	b29a      	uxth	r2, r3
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <main+0xcc>)
 8000796:	f002 f8a4 	bl	80028e2 <HAL_UART_Transmit>
		//CDC_Transmit_FS((uint8_t*)strbuf, strindex);

		//write buffer to GPIO pins

	strindex = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	vindex = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
	while(vindex <= NUM_VALS)
 80007a6:	e7c9      	b.n	800073c <main+0x58>
 80007a8:	200000e4 	.word	0x200000e4
 80007ac:	08003924 	.word	0x08003924
 80007b0:	2000012c 	.word	0x2000012c

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2234      	movs	r2, #52	; 0x34
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fc2c 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <SystemClock_Config+0xd4>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <SystemClock_Config+0xd4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000818:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000828:	23a8      	movs	r3, #168	; 0xa8
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4618      	mov	r0, r3
 800083e:	f001 f9a7 	bl	8001b90 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000848:	f000 f9d6 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000862:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2105      	movs	r1, #5
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fe46 	bl	80014fc <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f000 f9bf 	bl	8000bf8 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_SPI1_Init+0x68>)
 8000892:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <MX_SPI1_Init+0x6c>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x68>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008c4:	2230      	movs	r2, #48	; 0x30
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x68>)
 80008e2:	f001 fbf3 	bl	80020cc <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80008ec:	f000 f984 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_TIM1_Init+0x98>)
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <MX_TIM1_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM1_Init+0x98>)
 8000920:	2247      	movs	r2, #71	; 0x47
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM1_Init+0x98>)
 800092c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_TIM1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM1_Init+0x98>)
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_TIM1_Init+0x98>)
 8000946:	f001 fc4a 	bl	80021de <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f952 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_TIM1_Init+0x98>)
 8000962:	f001 fcf3 	bl	800234c <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 f944 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_TIM1_Init+0x98>)
 800097e:	f001 fee7 	bl	8002750 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000988:	f000 f936 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000e4 	.word	0x200000e4
 8000998:	40010000 	.word	0x40010000

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART3_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART3_UART_Init+0x4c>)
 80009d4:	f001 ff38 	bl	8002848 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f90b 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000012c 	.word	0x2000012c
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b75      	ldr	r3, [pc, #468]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a74      	ldr	r2, [pc, #464]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b72      	ldr	r3, [pc, #456]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b6e      	ldr	r3, [pc, #440]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a6d      	ldr	r2, [pc, #436]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b6b      	ldr	r3, [pc, #428]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a66      	ldr	r2, [pc, #408]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a5f      	ldr	r2, [pc, #380]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a58      	ldr	r2, [pc, #352]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a51      	ldr	r2, [pc, #324]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x1f0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 8000aca:	2200      	movs	r2, #0
 8000acc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad0:	4844      	ldr	r0, [pc, #272]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000ad2:	f000 fcf9 	bl	80014c8 <HAL_GPIO_WritePin>
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin
                          |AUDIO12_Pin|AUDIO13_Pin|AUDIO14_Pin|AUDIO15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE1_AUDIO_WR_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f244 4181 	movw	r1, #17537	; 0x4481
 8000adc:	4842      	ldr	r0, [pc, #264]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000ade:	f000 fcf3 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SNSS_GPIO_Port, SNSS_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	4840      	ldr	r0, [pc, #256]	; (8000bec <MX_GPIO_Init+0x1fc>)
 8000aea:	f000 fced 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	483a      	ldr	r0, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x200>)
 8000b06:	f000 fb4b 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUDIO0_Pin AUDIO1_Pin AUDIO2_Pin AUDIO3_Pin
                           AUDIO4_Pin AUDIO5_Pin AUDIO6_Pin AUDIO7_Pin
                           AUDIO8_Pin AUDIO9_Pin AUDIO10_Pin AUDIO11_Pin
                           AUDIO12_Pin AUDIO13_Pin AUDIO14_Pin AUDIO15_Pin */
  GPIO_InitStruct.Pin = AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 8000b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0e:	61fb      	str	r3, [r7, #28]
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin
                          |AUDIO12_Pin|AUDIO13_Pin|AUDIO14_Pin|AUDIO15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b10:	2311      	movs	r3, #17
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4830      	ldr	r0, [pc, #192]	; (8000be4 <MX_GPIO_Init+0x1f4>)
 8000b24:	f000 fb3c 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4829      	ldr	r0, [pc, #164]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000b42:	f000 fb2d 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSS_Pin */
  GPIO_InitStruct.Pin = SNSS_Pin;
 8000b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b4c:	2311      	movs	r3, #17
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SNSS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_GPIO_Init+0x1fc>)
 8000b60:	f000 fb1e 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_WR_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_WR_Pin;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b6a:	2311      	movs	r3, #17
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DE1_AUDIO_WR_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481a      	ldr	r0, [pc, #104]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000b7e:	f000 fb0f 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_READY_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_READY_Pin;
 8000b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DE1_AUDIO_READY_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_GPIO_Init+0x1f8>)
 8000b98:	f000 fb02 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b9c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bae:	230a      	movs	r3, #10
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_GPIO_Init+0x204>)
 8000bba:	f000 faf1 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <MX_GPIO_Init+0x204>)
 8000bd4:	f000 fae4 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40021400 	.word	0x40021400
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f000 fa69 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12c      	bne.n	8000da4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000da0:	f000 f9fe 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020c00 	.word	0x40020c00

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f8c6 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f002 f8c6 	bl	8002fcc <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000170 	.word	0x20000170
 8000e74:	20000188 	.word	0x20000188

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 f885 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fc09 	bl	80006e4 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee0:	08003988 	.word	0x08003988
  ldr r2, =_sbss
 8000ee4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ee8:	20000188 	.word	0x20000188

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f90d 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe6e 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f917 	bl	8001186 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f8ed 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000174 	.word	0x20000174

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000174 	.word	0x20000174

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff47 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff5c 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffb0 	bl	80010f4 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e165      	b.n	8001488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8154 	bne.w	8001482 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80ae 	beq.w	8001482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b5d      	ldr	r3, [pc, #372]	; (80014a0 <HAL_GPIO_Init+0x300>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a5c      	ldr	r2, [pc, #368]	; (80014a0 <HAL_GPIO_Init+0x300>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x300>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_GPIO_Init+0x304>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x308>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x21a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x30c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x216>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x310>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x212>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x314>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x318>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x20a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x31c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x206>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x320>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x202>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x21c>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x304>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_GPIO_Init+0x324>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae96 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0cc      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d90c      	bls.n	8001538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d044      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d119      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e067      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4934      	ldr	r1, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff fce6 	bl	8000fbc <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff fce2 	bl	8000fbc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d20c      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f855 	bl	8001730 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc46 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	0800392c 	.word	0x0800392c
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	; (8001704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	0800393c 	.word	0x0800393c

08001708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800170c:	f7ff ffdc 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 8001710:	4602      	mov	r2, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	0b5b      	lsrs	r3, r3, #13
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4903      	ldr	r1, [pc, #12]	; (800172c <HAL_RCC_GetPCLK2Freq+0x24>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	0800393c 	.word	0x0800393c

08001730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001734:	b0ae      	sub	sp, #184	; 0xb8
 8001736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001756:	4bcb      	ldr	r3, [pc, #812]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b0c      	cmp	r3, #12
 8001760:	f200 8206 	bhi.w	8001b70 <HAL_RCC_GetSysClockFreq+0x440>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	080017a1 	.word	0x080017a1
 8001770:	08001b71 	.word	0x08001b71
 8001774:	08001b71 	.word	0x08001b71
 8001778:	08001b71 	.word	0x08001b71
 800177c:	080017a9 	.word	0x080017a9
 8001780:	08001b71 	.word	0x08001b71
 8001784:	08001b71 	.word	0x08001b71
 8001788:	08001b71 	.word	0x08001b71
 800178c:	080017b1 	.word	0x080017b1
 8001790:	08001b71 	.word	0x08001b71
 8001794:	08001b71 	.word	0x08001b71
 8001798:	08001b71 	.word	0x08001b71
 800179c:	080019a1 	.word	0x080019a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4bb9      	ldr	r3, [pc, #740]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x358>)
 80017a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80017a6:	e1e7      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a8:	4bb8      	ldr	r3, [pc, #736]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x35c>)
 80017aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ae:	e1e3      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b0:	4bb4      	ldr	r3, [pc, #720]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017bc:	4bb1      	ldr	r3, [pc, #708]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d071      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4bae      	ldr	r3, [pc, #696]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	2200      	movs	r2, #0
 80017d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	6439      	str	r1, [r7, #64]	; 0x40
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001820:	4649      	mov	r1, r9
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4641      	mov	r1, r8
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4641      	mov	r1, r8
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4641      	mov	r1, r8
 8001830:	1a51      	subs	r1, r2, r1
 8001832:	63b9      	str	r1, [r7, #56]	; 0x38
 8001834:	4649      	mov	r1, r9
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001848:	4649      	mov	r1, r9
 800184a:	00cb      	lsls	r3, r1, #3
 800184c:	4641      	mov	r1, r8
 800184e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001852:	4641      	mov	r1, r8
 8001854:	00ca      	lsls	r2, r1, #3
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	4603      	mov	r3, r0
 800185c:	4622      	mov	r2, r4
 800185e:	189b      	adds	r3, r3, r2
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
 8001862:	462b      	mov	r3, r5
 8001864:	460a      	mov	r2, r1
 8001866:	eb42 0303 	adc.w	r3, r2, r3
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001878:	4629      	mov	r1, r5
 800187a:	024b      	lsls	r3, r1, #9
 800187c:	4621      	mov	r1, r4
 800187e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001882:	4621      	mov	r1, r4
 8001884:	024a      	lsls	r2, r1, #9
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800188e:	2200      	movs	r2, #0
 8001890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001898:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800189c:	f7fe fd08 	bl	80002b0 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018aa:	e067      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	099b      	lsrs	r3, r3, #6
 80018b2:	2200      	movs	r2, #0
 80018b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80018bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80018c6:	2300      	movs	r3, #0
 80018c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018ce:	4622      	mov	r2, r4
 80018d0:	462b      	mov	r3, r5
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	0159      	lsls	r1, r3, #5
 80018dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e0:	0150      	lsls	r0, r2, #5
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4621      	mov	r1, r4
 80018e8:	1a51      	subs	r1, r2, r1
 80018ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80018ec:	4629      	mov	r1, r5
 80018ee:	eb63 0301 	sbc.w	r3, r3, r1
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001900:	4649      	mov	r1, r9
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	4641      	mov	r1, r8
 8001906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190a:	4641      	mov	r1, r8
 800190c:	018a      	lsls	r2, r1, #6
 800190e:	4641      	mov	r1, r8
 8001910:	ebb2 0a01 	subs.w	sl, r2, r1
 8001914:	4649      	mov	r1, r9
 8001916:	eb63 0b01 	sbc.w	fp, r3, r1
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001926:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800192a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800192e:	4692      	mov	sl, r2
 8001930:	469b      	mov	fp, r3
 8001932:	4623      	mov	r3, r4
 8001934:	eb1a 0303 	adds.w	r3, sl, r3
 8001938:	623b      	str	r3, [r7, #32]
 800193a:	462b      	mov	r3, r5
 800193c:	eb4b 0303 	adc.w	r3, fp, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800194e:	4629      	mov	r1, r5
 8001950:	028b      	lsls	r3, r1, #10
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001958:	4621      	mov	r1, r4
 800195a:	028a      	lsls	r2, r1, #10
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001964:	2200      	movs	r2, #0
 8001966:	673b      	str	r3, [r7, #112]	; 0x70
 8001968:	677a      	str	r2, [r7, #116]	; 0x74
 800196a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800196e:	f7fe fc9f 	bl	80002b0 <__aeabi_uldivmod>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4613      	mov	r3, r2
 8001978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800197c:	4b41      	ldr	r3, [pc, #260]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800198e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800199e:	e0eb      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d06b      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	099b      	lsrs	r3, r3, #6
 80019be:	2200      	movs	r2, #0
 80019c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80019c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ca:	663b      	str	r3, [r7, #96]	; 0x60
 80019cc:	2300      	movs	r3, #0
 80019ce:	667b      	str	r3, [r7, #100]	; 0x64
 80019d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019d4:	4622      	mov	r2, r4
 80019d6:	462b      	mov	r3, r5
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0159      	lsls	r1, r3, #5
 80019e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e6:	0150      	lsls	r0, r2, #5
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4621      	mov	r1, r4
 80019ee:	1a51      	subs	r1, r2, r1
 80019f0:	61b9      	str	r1, [r7, #24]
 80019f2:	4629      	mov	r1, r5
 80019f4:	eb63 0301 	sbc.w	r3, r3, r1
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a06:	4659      	mov	r1, fp
 8001a08:	018b      	lsls	r3, r1, #6
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a10:	4651      	mov	r1, sl
 8001a12:	018a      	lsls	r2, r1, #6
 8001a14:	4651      	mov	r1, sl
 8001a16:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a34:	4690      	mov	r8, r2
 8001a36:	4699      	mov	r9, r3
 8001a38:	4623      	mov	r3, r4
 8001a3a:	eb18 0303 	adds.w	r3, r8, r3
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	462b      	mov	r3, r5
 8001a42:	eb49 0303 	adc.w	r3, r9, r3
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a54:	4629      	mov	r1, r5
 8001a56:	024b      	lsls	r3, r1, #9
 8001a58:	4621      	mov	r1, r4
 8001a5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5e:	4621      	mov	r1, r4
 8001a60:	024a      	lsls	r2, r1, #9
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a74:	f7fe fc1c 	bl	80002b0 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a82:	e065      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x420>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	2200      	movs	r2, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001aaa:	4642      	mov	r2, r8
 8001aac:	464b      	mov	r3, r9
 8001aae:	f04f 0000 	mov.w	r0, #0
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	0159      	lsls	r1, r3, #5
 8001ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001abc:	0150      	lsls	r0, r2, #5
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	1a51      	subs	r1, r2, r1
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	4649      	mov	r1, r9
 8001aca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001adc:	4659      	mov	r1, fp
 8001ade:	018b      	lsls	r3, r1, #6
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	018a      	lsls	r2, r1, #6
 8001aea:	4651      	mov	r1, sl
 8001aec:	1a54      	subs	r4, r2, r1
 8001aee:	4659      	mov	r1, fp
 8001af0:	eb63 0501 	sbc.w	r5, r3, r1
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00eb      	lsls	r3, r5, #3
 8001afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b02:	00e2      	lsls	r2, r4, #3
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	4643      	mov	r3, r8
 8001b0a:	18e3      	adds	r3, r4, r3
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	464b      	mov	r3, r9
 8001b10:	eb45 0303 	adc.w	r3, r5, r3
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b22:	4629      	mov	r1, r5
 8001b24:	028b      	lsls	r3, r1, #10
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	028a      	lsls	r2, r1, #10
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b38:	2200      	movs	r2, #0
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b3c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b42:	f7fe fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0f1b      	lsrs	r3, r3, #28
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b6e:	e003      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	37b8      	adds	r7, #184	; 0xb8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	00f42400 	.word	0x00f42400

08001b90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e28d      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8083 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bb0:	4b94      	ldr	r3, [pc, #592]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d019      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bbc:	4b91      	ldr	r3, [pc, #580]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bc8:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd4:	d00c      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bee:	d10b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4b84      	ldr	r3, [pc, #528]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d05b      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x124>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d157      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e25a      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d106      	bne.n	8001c20 <HAL_RCC_OscConfig+0x90>
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7b      	ldr	r2, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e01d      	b.n	8001c5c <HAL_RCC_OscConfig+0xcc>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0xb4>
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_OscConfig+0xcc>
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6e      	ldr	r2, [pc, #440]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6b      	ldr	r2, [pc, #428]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f9aa 	bl	8000fbc <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f9a6 	bl	8000fbc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e21f      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0xdc>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f996 	bl	8000fbc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f992 	bl	8000fbc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e20b      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x104>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d06f      	beq.n	8001da2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cc2:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d017      	beq.n	8001cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d11c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b44      	ldr	r3, [pc, #272]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d116      	bne.n	8001d2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_RCC_OscConfig+0x186>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1d3      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4937      	ldr	r1, [pc, #220]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e03a      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d020      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f93f 	bl	8000fbc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d42:	f7ff f93b 	bl	8000fbc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e1b4      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4925      	ldr	r1, [pc, #148]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f91e 	bl	8000fbc <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff f91a 	bl	8000fbc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e193      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d036      	beq.n	8001e1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d016      	beq.n	8001de4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f8fe 	bl	8000fbc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f8fa 	bl	8000fbc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e173      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x234>
 8001de2:	e01b      	b.n	8001e1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7ff f8e7 	bl	8000fbc <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e00e      	b.n	8001e10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff f8e3 	bl	8000fbc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d907      	bls.n	8001e10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e15c      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	42470000 	.word	0x42470000
 8001e0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b8a      	ldr	r3, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ea      	bne.n	8001df2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8097 	beq.w	8001f58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b83      	ldr	r3, [pc, #524]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a7e      	ldr	r2, [pc, #504]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b79      	ldr	r3, [pc, #484]	; (8002040 <HAL_RCC_OscConfig+0x4b0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x4b0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a75      	ldr	r2, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x4b0>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff f8a3 	bl	8000fbc <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff f89f 	bl	8000fbc <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e118      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x4b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x31e>
 8001ea0:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x358>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x340>
 8001eb6:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a60      	ldr	r2, [pc, #384]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x358>
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a59      	ldr	r2, [pc, #356]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f864 	bl	8000fbc <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f860 	bl	8000fbc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0d7      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x368>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f84e 	bl	8000fbc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff f84a 	bl	8000fbc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0c1      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80ad 	beq.w	80020bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d060      	beq.n	8002030 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d145      	bne.n	8002002 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x4b4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f81e 	bl	8000fbc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f81a 	bl	8000fbc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e093      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	071b      	lsls	r3, r3, #28
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x4b4>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe ffef 	bl	8000fbc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe ffeb 	bl	8000fbc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e064      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x452>
 8002000:	e05c      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x4b4>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7fe ffd8 	bl	8000fbc <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe ffd4 	bl	8000fbc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e04d      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x4ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x480>
 800202e:	e045      	b.n	80020bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e040      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_OscConfig+0x538>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d030      	beq.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d129      	bne.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d122      	bne.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d119      	bne.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	3b01      	subs	r3, #1
 8002092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d10f      	bne.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07b      	b.n	80021d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ee:	d009      	beq.n	8002104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
 80020f6:	e005      	b.n	8002104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fd98 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	ea42 0103 	orr.w	r1, r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0104 	and.w	r1, r3, #4
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f003 0210 	and.w	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e041      	b.n	8002274 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fe fd6d 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f000 f95d 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d001      	beq.n	8002294 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e046      	b.n	8002322 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <HAL_TIM_Base_Start+0xb4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d022      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d01d      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_TIM_Base_Start+0xb8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d018      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <HAL_TIM_Base_Start+0xbc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_TIM_Base_Start+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00e      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <HAL_TIM_Base_Start+0xc4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_TIM_Base_Start+0xc8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_TIM_Base_Start+0x70>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_TIM_Base_Start+0xcc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d111      	bne.n	8002310 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d010      	beq.n	8002320 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	e007      	b.n	8002320 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40000400 	.word	0x40000400
 8002338:	40000800 	.word	0x40000800
 800233c:	40000c00 	.word	0x40000c00
 8002340:	40010400 	.word	0x40010400
 8002344:	40014000 	.word	0x40014000
 8002348:	40001800 	.word	0x40001800

0800234c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_TIM_ConfigClockSource+0x1c>
 8002364:	2302      	movs	r3, #2
 8002366:	e0b4      	b.n	80024d2 <HAL_TIM_ConfigClockSource+0x186>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800238e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a0:	d03e      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0xd4>
 80023a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a6:	f200 8087 	bhi.w	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ae:	f000 8086 	beq.w	80024be <HAL_TIM_ConfigClockSource+0x172>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d87f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b70      	cmp	r3, #112	; 0x70
 80023ba:	d01a      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xa6>
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d87b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b60      	cmp	r3, #96	; 0x60
 80023c2:	d050      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x11a>
 80023c4:	2b60      	cmp	r3, #96	; 0x60
 80023c6:	d877      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b50      	cmp	r3, #80	; 0x50
 80023ca:	d03c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xfa>
 80023cc:	2b50      	cmp	r3, #80	; 0x50
 80023ce:	d873      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d058      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x13a>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d86f      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b30      	cmp	r3, #48	; 0x30
 80023da:	d064      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	d86b      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d060      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d867      	bhi.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05c      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d05a      	beq.n	80024a6 <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	e062      	b.n	80024b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 f985 	bl	8002710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	609a      	str	r2, [r3, #8]
      break;
 800241e:	e04f      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f000 f96e 	bl	8002710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e03c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f8e2 	bl	800261c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2150      	movs	r1, #80	; 0x50
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f93b 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 8002464:	e02c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f901 	bl	800267a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2160      	movs	r1, #96	; 0x60
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f92b 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 8002484:	e01c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	461a      	mov	r2, r3
 8002494:	f000 f8c2 	bl	800261c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f91b 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 80024a4:	e00c      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f000 f912 	bl	80026da <TIM_ITRx_SetConfig>
      break;
 80024b6:	e003      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e000      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d00f      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3d      	ldr	r2, [pc, #244]	; (80025f4 <TIM_Base_SetConfig+0x118>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00b      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <TIM_Base_SetConfig+0x11c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <TIM_Base_SetConfig+0x120>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <TIM_Base_SetConfig+0x124>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d108      	bne.n	800252e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d027      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <TIM_Base_SetConfig+0x118>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d023      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <TIM_Base_SetConfig+0x11c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <TIM_Base_SetConfig+0x120>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a29      	ldr	r2, [pc, #164]	; (8002600 <TIM_Base_SetConfig+0x124>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d017      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <TIM_Base_SetConfig+0x128>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <TIM_Base_SetConfig+0x12c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00f      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <TIM_Base_SetConfig+0x130>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <TIM_Base_SetConfig+0x134>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <TIM_Base_SetConfig+0x138>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <TIM_Base_SetConfig+0x13c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0xf8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <TIM_Base_SetConfig+0x124>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40010400 	.word	0x40010400
 8002604:	40014000 	.word	0x40014000
 8002608:	40014400 	.word	0x40014400
 800260c:	40014800 	.word	0x40014800
 8002610:	40001800 	.word	0x40001800
 8002614:	40001c00 	.word	0x40001c00
 8002618:	40002000 	.word	0x40002000

0800261c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 030a 	bic.w	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b087      	sub	sp, #28
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f023 0210 	bic.w	r2, r3, #16
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	031b      	lsls	r3, r3, #12
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f043 0307 	orr.w	r3, r3, #7
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	609a      	str	r2, [r3, #8]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800272a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	431a      	orrs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002764:	2302      	movs	r3, #2
 8002766:	e05a      	b.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d01d      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d018      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00e      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10c      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	4313      	orrs	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010000 	.word	0x40010000
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40010400 	.word	0x40010400
 8002840:	40014000 	.word	0x40014000
 8002844:	40001800 	.word	0x40001800

08002848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e03f      	b.n	80028da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fa5a 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f929 	bl	8002ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af02      	add	r7, sp, #8
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d17c      	bne.n	80029fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_Transmit+0x2c>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e075      	b.n	80029fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit+0x3e>
 800291c:	2302      	movs	r3, #2
 800291e:	e06e      	b.n	80029fe <HAL_UART_Transmit+0x11c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2221      	movs	r2, #33	; 0x21
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002936:	f7fe fb41 	bl	8000fbc <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d108      	bne.n	8002964 <HAL_UART_Transmit+0x82>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e003      	b.n	800296c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002974:	e02a      	b.n	80029cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f840 	bl	8002a06 <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e036      	b.n	80029fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1cf      	bne.n	8002976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f810 	bl	8002a06 <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b090      	sub	sp, #64	; 0x40
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a16:	e050      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d04c      	beq.n	8002aba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a26:	f7fe fac9 	bl	8000fbc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d241      	bcs.n	8002aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a56:	637a      	str	r2, [r7, #52]	; 0x34
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e5      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	613b      	str	r3, [r7, #16]
   return(result);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8a:	623a      	str	r2, [r7, #32]
 8002a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	69f9      	ldr	r1, [r7, #28]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e00f      	b.n	8002ada <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d09f      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3740      	adds	r7, #64	; 0x40
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b0c0      	sub	sp, #256	; 0x100
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	68d9      	ldr	r1, [r3, #12]
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	ea40 0301 	orr.w	r3, r0, r1
 8002b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b3c:	f021 010c 	bic.w	r1, r1, #12
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	6999      	ldr	r1, [r3, #24]
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	ea40 0301 	orr.w	r3, r0, r1
 8002b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b8f      	ldr	r3, [pc, #572]	; (8002db0 <UART_SetConfig+0x2cc>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d005      	beq.n	8002b84 <UART_SetConfig+0xa0>
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b8d      	ldr	r3, [pc, #564]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d104      	bne.n	8002b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7fe fdc0 	bl	8001708 <HAL_RCC_GetPCLK2Freq>
 8002b88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b8c:	e003      	b.n	8002b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b8e:	f7fe fda7 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8002b92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba0:	f040 810c 	bne.w	8002dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	462b      	mov	r3, r5
 8002bba:	1891      	adds	r1, r2, r2
 8002bbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bbe:	415b      	adcs	r3, r3
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	eb12 0801 	adds.w	r8, r2, r1
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb43 0901 	adc.w	r9, r3, r1
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be6:	4690      	mov	r8, r2
 8002be8:	4699      	mov	r9, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	eb18 0303 	adds.w	r3, r8, r3
 8002bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	eb49 0303 	adc.w	r3, r9, r3
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c12:	460b      	mov	r3, r1
 8002c14:	18db      	adds	r3, r3, r3
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
 8002c18:	4613      	mov	r3, r2
 8002c1a:	eb42 0303 	adc.w	r3, r2, r3
 8002c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c28:	f7fd fb42 	bl	80002b0 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002c32:	fba3 2302 	umull	r2, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	011c      	lsls	r4, r3, #4
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c54:	415b      	adcs	r3, r3
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c62:	4649      	mov	r1, r9
 8002c64:	eb43 0b01 	adc.w	fp, r3, r1
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7c:	4692      	mov	sl, r2
 8002c7e:	469b      	mov	fp, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	eb1a 0303 	adds.w	r3, sl, r3
 8002c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	18db      	adds	r3, r3, r3
 8002cac:	643b      	str	r3, [r7, #64]	; 0x40
 8002cae:	4613      	mov	r3, r2
 8002cb0:	eb42 0303 	adc.w	r3, r2, r3
 8002cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cbe:	f7fd faf7 	bl	80002b0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002cca:	fba3 2301 	umull	r2, r3, r3, r1
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2264      	movs	r2, #100	; 0x64
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	1acb      	subs	r3, r1, r3
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cec:	441c      	add	r4, r3
 8002cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d10:	4641      	mov	r1, r8
 8002d12:	1851      	adds	r1, r2, r1
 8002d14:	6339      	str	r1, [r7, #48]	; 0x30
 8002d16:	4649      	mov	r1, r9
 8002d18:	414b      	adcs	r3, r1
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d28:	4659      	mov	r1, fp
 8002d2a:	00cb      	lsls	r3, r1, #3
 8002d2c:	4651      	mov	r1, sl
 8002d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d32:	4651      	mov	r1, sl
 8002d34:	00ca      	lsls	r2, r1, #3
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d44:	464b      	mov	r3, r9
 8002d46:	460a      	mov	r2, r1
 8002d48:	eb42 0303 	adc.w	r3, r2, r3
 8002d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d64:	460b      	mov	r3, r1
 8002d66:	18db      	adds	r3, r3, r3
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	eb42 0303 	adc.w	r3, r2, r3
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d7a:	f7fd fa99 	bl	80002b0 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 0207 	and.w	r2, r3, #7
 8002da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4422      	add	r2, r4
 8002daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dac:	e105      	b.n	8002fba <UART_SetConfig+0x4d6>
 8002dae:	bf00      	nop
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dce:	4642      	mov	r2, r8
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	1891      	adds	r1, r2, r2
 8002dd4:	6239      	str	r1, [r7, #32]
 8002dd6:	415b      	adcs	r3, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dde:	4641      	mov	r1, r8
 8002de0:	1854      	adds	r4, r2, r1
 8002de2:	4649      	mov	r1, r9
 8002de4:	eb43 0501 	adc.w	r5, r3, r1
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	00eb      	lsls	r3, r5, #3
 8002df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df6:	00e2      	lsls	r2, r4, #3
 8002df8:	4614      	mov	r4, r2
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	18e3      	adds	r3, r4, r3
 8002e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e04:	464b      	mov	r3, r9
 8002e06:	eb45 0303 	adc.w	r3, r5, r3
 8002e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	008b      	lsls	r3, r1, #2
 8002e2e:	4621      	mov	r1, r4
 8002e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e34:	4621      	mov	r1, r4
 8002e36:	008a      	lsls	r2, r1, #2
 8002e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e3c:	f7fd fa38 	bl	80002b0 <__aeabi_uldivmod>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <UART_SetConfig+0x4e4>)
 8002e46:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	011c      	lsls	r4, r3, #4
 8002e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	61b9      	str	r1, [r7, #24]
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e70:	4641      	mov	r1, r8
 8002e72:	1851      	adds	r1, r2, r1
 8002e74:	6139      	str	r1, [r7, #16]
 8002e76:	4649      	mov	r1, r9
 8002e78:	414b      	adcs	r3, r1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e88:	4659      	mov	r1, fp
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4651      	mov	r1, sl
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	460a      	mov	r2, r1
 8002ea8:	eb42 0303 	adc.w	r3, r2, r3
 8002eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ec8:	4649      	mov	r1, r9
 8002eca:	008b      	lsls	r3, r1, #2
 8002ecc:	4641      	mov	r1, r8
 8002ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	008a      	lsls	r2, r1, #2
 8002ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eda:	f7fd f9e9 	bl	80002b0 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <UART_SetConfig+0x4e4>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <UART_SetConfig+0x4e4>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f02:	441c      	add	r4, r3
 8002f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f08:	2200      	movs	r2, #0
 8002f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f0c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f12:	4642      	mov	r2, r8
 8002f14:	464b      	mov	r3, r9
 8002f16:	1891      	adds	r1, r2, r2
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f22:	4641      	mov	r1, r8
 8002f24:	1851      	adds	r1, r2, r1
 8002f26:	6039      	str	r1, [r7, #0]
 8002f28:	4649      	mov	r1, r9
 8002f2a:	414b      	adcs	r3, r1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f3a:	4659      	mov	r1, fp
 8002f3c:	00cb      	lsls	r3, r1, #3
 8002f3e:	4651      	mov	r1, sl
 8002f40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f44:	4651      	mov	r1, sl
 8002f46:	00ca      	lsls	r2, r1, #3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4642      	mov	r2, r8
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f54:	464b      	mov	r3, r9
 8002f56:	460a      	mov	r2, r1
 8002f58:	eb42 0303 	adc.w	r3, r2, r3
 8002f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	663b      	str	r3, [r7, #96]	; 0x60
 8002f68:	667a      	str	r2, [r7, #100]	; 0x64
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f76:	4649      	mov	r1, r9
 8002f78:	008b      	lsls	r3, r1, #2
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f80:	4641      	mov	r1, r8
 8002f82:	008a      	lsls	r2, r1, #2
 8002f84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f88:	f7fd f992 	bl	80002b0 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <UART_SetConfig+0x4e4>)
 8002f92:	fba3 1302 	umull	r1, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2164      	movs	r1, #100	; 0x64
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	; 0x32
 8002fa4:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <UART_SetConfig+0x4e4>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4422      	add	r2, r4
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc6:	bf00      	nop
 8002fc8:	51eb851f 	.word	0x51eb851f

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4d0d      	ldr	r5, [pc, #52]	; (8003010 <__libc_init_array+0x38>)
 8002fdc:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fde:	1b64      	subs	r4, r4, r5
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	4d0b      	ldr	r5, [pc, #44]	; (8003018 <__libc_init_array+0x40>)
 8002fea:	4c0c      	ldr	r4, [pc, #48]	; (800301c <__libc_init_array+0x44>)
 8002fec:	f000 fc8e 	bl	800390c <_init>
 8002ff0:	1b64      	subs	r4, r4, r5
 8002ff2:	10a4      	asrs	r4, r4, #2
 8002ff4:	2600      	movs	r6, #0
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08003980 	.word	0x08003980
 8003014:	08003980 	.word	0x08003980
 8003018:	08003980 	.word	0x08003980
 800301c:	08003984 	.word	0x08003984

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <siprintf>:
 8003030:	b40e      	push	{r1, r2, r3}
 8003032:	b500      	push	{lr}
 8003034:	b09c      	sub	sp, #112	; 0x70
 8003036:	ab1d      	add	r3, sp, #116	; 0x74
 8003038:	9002      	str	r0, [sp, #8]
 800303a:	9006      	str	r0, [sp, #24]
 800303c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003040:	4809      	ldr	r0, [pc, #36]	; (8003068 <siprintf+0x38>)
 8003042:	9107      	str	r1, [sp, #28]
 8003044:	9104      	str	r1, [sp, #16]
 8003046:	4909      	ldr	r1, [pc, #36]	; (800306c <siprintf+0x3c>)
 8003048:	f853 2b04 	ldr.w	r2, [r3], #4
 800304c:	9105      	str	r1, [sp, #20]
 800304e:	6800      	ldr	r0, [r0, #0]
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	a902      	add	r1, sp, #8
 8003054:	f000 f868 	bl	8003128 <_svfiprintf_r>
 8003058:	9b02      	ldr	r3, [sp, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	b01c      	add	sp, #112	; 0x70
 8003060:	f85d eb04 	ldr.w	lr, [sp], #4
 8003064:	b003      	add	sp, #12
 8003066:	4770      	bx	lr
 8003068:	2000000c 	.word	0x2000000c
 800306c:	ffff0208 	.word	0xffff0208

08003070 <__ssputs_r>:
 8003070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003074:	688e      	ldr	r6, [r1, #8]
 8003076:	429e      	cmp	r6, r3
 8003078:	4682      	mov	sl, r0
 800307a:	460c      	mov	r4, r1
 800307c:	4690      	mov	r8, r2
 800307e:	461f      	mov	r7, r3
 8003080:	d838      	bhi.n	80030f4 <__ssputs_r+0x84>
 8003082:	898a      	ldrh	r2, [r1, #12]
 8003084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003088:	d032      	beq.n	80030f0 <__ssputs_r+0x80>
 800308a:	6825      	ldr	r5, [r4, #0]
 800308c:	6909      	ldr	r1, [r1, #16]
 800308e:	eba5 0901 	sub.w	r9, r5, r1
 8003092:	6965      	ldr	r5, [r4, #20]
 8003094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800309c:	3301      	adds	r3, #1
 800309e:	444b      	add	r3, r9
 80030a0:	106d      	asrs	r5, r5, #1
 80030a2:	429d      	cmp	r5, r3
 80030a4:	bf38      	it	cc
 80030a6:	461d      	movcc	r5, r3
 80030a8:	0553      	lsls	r3, r2, #21
 80030aa:	d531      	bpl.n	8003110 <__ssputs_r+0xa0>
 80030ac:	4629      	mov	r1, r5
 80030ae:	f000 fb63 	bl	8003778 <_malloc_r>
 80030b2:	4606      	mov	r6, r0
 80030b4:	b950      	cbnz	r0, 80030cc <__ssputs_r+0x5c>
 80030b6:	230c      	movs	r3, #12
 80030b8:	f8ca 3000 	str.w	r3, [sl]
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	81a3      	strh	r3, [r4, #12]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030cc:	6921      	ldr	r1, [r4, #16]
 80030ce:	464a      	mov	r2, r9
 80030d0:	f000 fabe 	bl	8003650 <memcpy>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030de:	81a3      	strh	r3, [r4, #12]
 80030e0:	6126      	str	r6, [r4, #16]
 80030e2:	6165      	str	r5, [r4, #20]
 80030e4:	444e      	add	r6, r9
 80030e6:	eba5 0509 	sub.w	r5, r5, r9
 80030ea:	6026      	str	r6, [r4, #0]
 80030ec:	60a5      	str	r5, [r4, #8]
 80030ee:	463e      	mov	r6, r7
 80030f0:	42be      	cmp	r6, r7
 80030f2:	d900      	bls.n	80030f6 <__ssputs_r+0x86>
 80030f4:	463e      	mov	r6, r7
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	4632      	mov	r2, r6
 80030fa:	4641      	mov	r1, r8
 80030fc:	f000 fab6 	bl	800366c <memmove>
 8003100:	68a3      	ldr	r3, [r4, #8]
 8003102:	1b9b      	subs	r3, r3, r6
 8003104:	60a3      	str	r3, [r4, #8]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	4433      	add	r3, r6
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	2000      	movs	r0, #0
 800310e:	e7db      	b.n	80030c8 <__ssputs_r+0x58>
 8003110:	462a      	mov	r2, r5
 8003112:	f000 fba5 	bl	8003860 <_realloc_r>
 8003116:	4606      	mov	r6, r0
 8003118:	2800      	cmp	r0, #0
 800311a:	d1e1      	bne.n	80030e0 <__ssputs_r+0x70>
 800311c:	6921      	ldr	r1, [r4, #16]
 800311e:	4650      	mov	r0, sl
 8003120:	f000 fabe 	bl	80036a0 <_free_r>
 8003124:	e7c7      	b.n	80030b6 <__ssputs_r+0x46>
	...

08003128 <_svfiprintf_r>:
 8003128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800312c:	4698      	mov	r8, r3
 800312e:	898b      	ldrh	r3, [r1, #12]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	b09d      	sub	sp, #116	; 0x74
 8003134:	4607      	mov	r7, r0
 8003136:	460d      	mov	r5, r1
 8003138:	4614      	mov	r4, r2
 800313a:	d50e      	bpl.n	800315a <_svfiprintf_r+0x32>
 800313c:	690b      	ldr	r3, [r1, #16]
 800313e:	b963      	cbnz	r3, 800315a <_svfiprintf_r+0x32>
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	f000 fb19 	bl	8003778 <_malloc_r>
 8003146:	6028      	str	r0, [r5, #0]
 8003148:	6128      	str	r0, [r5, #16]
 800314a:	b920      	cbnz	r0, 8003156 <_svfiprintf_r+0x2e>
 800314c:	230c      	movs	r3, #12
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	e0d1      	b.n	80032fa <_svfiprintf_r+0x1d2>
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	616b      	str	r3, [r5, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	9309      	str	r3, [sp, #36]	; 0x24
 800315e:	2320      	movs	r3, #32
 8003160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003164:	f8cd 800c 	str.w	r8, [sp, #12]
 8003168:	2330      	movs	r3, #48	; 0x30
 800316a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003314 <_svfiprintf_r+0x1ec>
 800316e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003172:	f04f 0901 	mov.w	r9, #1
 8003176:	4623      	mov	r3, r4
 8003178:	469a      	mov	sl, r3
 800317a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800317e:	b10a      	cbz	r2, 8003184 <_svfiprintf_r+0x5c>
 8003180:	2a25      	cmp	r2, #37	; 0x25
 8003182:	d1f9      	bne.n	8003178 <_svfiprintf_r+0x50>
 8003184:	ebba 0b04 	subs.w	fp, sl, r4
 8003188:	d00b      	beq.n	80031a2 <_svfiprintf_r+0x7a>
 800318a:	465b      	mov	r3, fp
 800318c:	4622      	mov	r2, r4
 800318e:	4629      	mov	r1, r5
 8003190:	4638      	mov	r0, r7
 8003192:	f7ff ff6d 	bl	8003070 <__ssputs_r>
 8003196:	3001      	adds	r0, #1
 8003198:	f000 80aa 	beq.w	80032f0 <_svfiprintf_r+0x1c8>
 800319c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800319e:	445a      	add	r2, fp
 80031a0:	9209      	str	r2, [sp, #36]	; 0x24
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a2 	beq.w	80032f0 <_svfiprintf_r+0x1c8>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295
 80031b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031b6:	f10a 0a01 	add.w	sl, sl, #1
 80031ba:	9304      	str	r3, [sp, #16]
 80031bc:	9307      	str	r3, [sp, #28]
 80031be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031c2:	931a      	str	r3, [sp, #104]	; 0x68
 80031c4:	4654      	mov	r4, sl
 80031c6:	2205      	movs	r2, #5
 80031c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031cc:	4851      	ldr	r0, [pc, #324]	; (8003314 <_svfiprintf_r+0x1ec>)
 80031ce:	f7fd f81f 	bl	8000210 <memchr>
 80031d2:	9a04      	ldr	r2, [sp, #16]
 80031d4:	b9d8      	cbnz	r0, 800320e <_svfiprintf_r+0xe6>
 80031d6:	06d0      	lsls	r0, r2, #27
 80031d8:	bf44      	itt	mi
 80031da:	2320      	movmi	r3, #32
 80031dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031e0:	0711      	lsls	r1, r2, #28
 80031e2:	bf44      	itt	mi
 80031e4:	232b      	movmi	r3, #43	; 0x2b
 80031e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ea:	f89a 3000 	ldrb.w	r3, [sl]
 80031ee:	2b2a      	cmp	r3, #42	; 0x2a
 80031f0:	d015      	beq.n	800321e <_svfiprintf_r+0xf6>
 80031f2:	9a07      	ldr	r2, [sp, #28]
 80031f4:	4654      	mov	r4, sl
 80031f6:	2000      	movs	r0, #0
 80031f8:	f04f 0c0a 	mov.w	ip, #10
 80031fc:	4621      	mov	r1, r4
 80031fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003202:	3b30      	subs	r3, #48	; 0x30
 8003204:	2b09      	cmp	r3, #9
 8003206:	d94e      	bls.n	80032a6 <_svfiprintf_r+0x17e>
 8003208:	b1b0      	cbz	r0, 8003238 <_svfiprintf_r+0x110>
 800320a:	9207      	str	r2, [sp, #28]
 800320c:	e014      	b.n	8003238 <_svfiprintf_r+0x110>
 800320e:	eba0 0308 	sub.w	r3, r0, r8
 8003212:	fa09 f303 	lsl.w	r3, r9, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	9304      	str	r3, [sp, #16]
 800321a:	46a2      	mov	sl, r4
 800321c:	e7d2      	b.n	80031c4 <_svfiprintf_r+0x9c>
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	1d19      	adds	r1, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9103      	str	r1, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfbb      	ittet	lt
 800322a:	425b      	neglt	r3, r3
 800322c:	f042 0202 	orrlt.w	r2, r2, #2
 8003230:	9307      	strge	r3, [sp, #28]
 8003232:	9307      	strlt	r3, [sp, #28]
 8003234:	bfb8      	it	lt
 8003236:	9204      	strlt	r2, [sp, #16]
 8003238:	7823      	ldrb	r3, [r4, #0]
 800323a:	2b2e      	cmp	r3, #46	; 0x2e
 800323c:	d10c      	bne.n	8003258 <_svfiprintf_r+0x130>
 800323e:	7863      	ldrb	r3, [r4, #1]
 8003240:	2b2a      	cmp	r3, #42	; 0x2a
 8003242:	d135      	bne.n	80032b0 <_svfiprintf_r+0x188>
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	9203      	str	r2, [sp, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	bfb8      	it	lt
 8003250:	f04f 33ff 	movlt.w	r3, #4294967295
 8003254:	3402      	adds	r4, #2
 8003256:	9305      	str	r3, [sp, #20]
 8003258:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003324 <_svfiprintf_r+0x1fc>
 800325c:	7821      	ldrb	r1, [r4, #0]
 800325e:	2203      	movs	r2, #3
 8003260:	4650      	mov	r0, sl
 8003262:	f7fc ffd5 	bl	8000210 <memchr>
 8003266:	b140      	cbz	r0, 800327a <_svfiprintf_r+0x152>
 8003268:	2340      	movs	r3, #64	; 0x40
 800326a:	eba0 000a 	sub.w	r0, r0, sl
 800326e:	fa03 f000 	lsl.w	r0, r3, r0
 8003272:	9b04      	ldr	r3, [sp, #16]
 8003274:	4303      	orrs	r3, r0
 8003276:	3401      	adds	r4, #1
 8003278:	9304      	str	r3, [sp, #16]
 800327a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800327e:	4826      	ldr	r0, [pc, #152]	; (8003318 <_svfiprintf_r+0x1f0>)
 8003280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003284:	2206      	movs	r2, #6
 8003286:	f7fc ffc3 	bl	8000210 <memchr>
 800328a:	2800      	cmp	r0, #0
 800328c:	d038      	beq.n	8003300 <_svfiprintf_r+0x1d8>
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <_svfiprintf_r+0x1f4>)
 8003290:	bb1b      	cbnz	r3, 80032da <_svfiprintf_r+0x1b2>
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	3307      	adds	r3, #7
 8003296:	f023 0307 	bic.w	r3, r3, #7
 800329a:	3308      	adds	r3, #8
 800329c:	9303      	str	r3, [sp, #12]
 800329e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032a0:	4433      	add	r3, r6
 80032a2:	9309      	str	r3, [sp, #36]	; 0x24
 80032a4:	e767      	b.n	8003176 <_svfiprintf_r+0x4e>
 80032a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032aa:	460c      	mov	r4, r1
 80032ac:	2001      	movs	r0, #1
 80032ae:	e7a5      	b.n	80031fc <_svfiprintf_r+0xd4>
 80032b0:	2300      	movs	r3, #0
 80032b2:	3401      	adds	r4, #1
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	4619      	mov	r1, r3
 80032b8:	f04f 0c0a 	mov.w	ip, #10
 80032bc:	4620      	mov	r0, r4
 80032be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c2:	3a30      	subs	r2, #48	; 0x30
 80032c4:	2a09      	cmp	r2, #9
 80032c6:	d903      	bls.n	80032d0 <_svfiprintf_r+0x1a8>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c5      	beq.n	8003258 <_svfiprintf_r+0x130>
 80032cc:	9105      	str	r1, [sp, #20]
 80032ce:	e7c3      	b.n	8003258 <_svfiprintf_r+0x130>
 80032d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80032d4:	4604      	mov	r4, r0
 80032d6:	2301      	movs	r3, #1
 80032d8:	e7f0      	b.n	80032bc <_svfiprintf_r+0x194>
 80032da:	ab03      	add	r3, sp, #12
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462a      	mov	r2, r5
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <_svfiprintf_r+0x1f8>)
 80032e2:	a904      	add	r1, sp, #16
 80032e4:	4638      	mov	r0, r7
 80032e6:	f3af 8000 	nop.w
 80032ea:	1c42      	adds	r2, r0, #1
 80032ec:	4606      	mov	r6, r0
 80032ee:	d1d6      	bne.n	800329e <_svfiprintf_r+0x176>
 80032f0:	89ab      	ldrh	r3, [r5, #12]
 80032f2:	065b      	lsls	r3, r3, #25
 80032f4:	f53f af2c 	bmi.w	8003150 <_svfiprintf_r+0x28>
 80032f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032fa:	b01d      	add	sp, #116	; 0x74
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	ab03      	add	r3, sp, #12
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	462a      	mov	r2, r5
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <_svfiprintf_r+0x1f8>)
 8003308:	a904      	add	r1, sp, #16
 800330a:	4638      	mov	r0, r7
 800330c:	f000 f87a 	bl	8003404 <_printf_i>
 8003310:	e7eb      	b.n	80032ea <_svfiprintf_r+0x1c2>
 8003312:	bf00      	nop
 8003314:	08003944 	.word	0x08003944
 8003318:	0800394e 	.word	0x0800394e
 800331c:	00000000 	.word	0x00000000
 8003320:	08003071 	.word	0x08003071
 8003324:	0800394a 	.word	0x0800394a

08003328 <_printf_common>:
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	4616      	mov	r6, r2
 800332e:	4699      	mov	r9, r3
 8003330:	688a      	ldr	r2, [r1, #8]
 8003332:	690b      	ldr	r3, [r1, #16]
 8003334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003338:	4293      	cmp	r3, r2
 800333a:	bfb8      	it	lt
 800333c:	4613      	movlt	r3, r2
 800333e:	6033      	str	r3, [r6, #0]
 8003340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003344:	4607      	mov	r7, r0
 8003346:	460c      	mov	r4, r1
 8003348:	b10a      	cbz	r2, 800334e <_printf_common+0x26>
 800334a:	3301      	adds	r3, #1
 800334c:	6033      	str	r3, [r6, #0]
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	0699      	lsls	r1, r3, #26
 8003352:	bf42      	ittt	mi
 8003354:	6833      	ldrmi	r3, [r6, #0]
 8003356:	3302      	addmi	r3, #2
 8003358:	6033      	strmi	r3, [r6, #0]
 800335a:	6825      	ldr	r5, [r4, #0]
 800335c:	f015 0506 	ands.w	r5, r5, #6
 8003360:	d106      	bne.n	8003370 <_printf_common+0x48>
 8003362:	f104 0a19 	add.w	sl, r4, #25
 8003366:	68e3      	ldr	r3, [r4, #12]
 8003368:	6832      	ldr	r2, [r6, #0]
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	42ab      	cmp	r3, r5
 800336e:	dc26      	bgt.n	80033be <_printf_common+0x96>
 8003370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003374:	1e13      	subs	r3, r2, #0
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	bf18      	it	ne
 800337a:	2301      	movne	r3, #1
 800337c:	0692      	lsls	r2, r2, #26
 800337e:	d42b      	bmi.n	80033d8 <_printf_common+0xb0>
 8003380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003384:	4649      	mov	r1, r9
 8003386:	4638      	mov	r0, r7
 8003388:	47c0      	blx	r8
 800338a:	3001      	adds	r0, #1
 800338c:	d01e      	beq.n	80033cc <_printf_common+0xa4>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	68e5      	ldr	r5, [r4, #12]
 8003392:	6832      	ldr	r2, [r6, #0]
 8003394:	f003 0306 	and.w	r3, r3, #6
 8003398:	2b04      	cmp	r3, #4
 800339a:	bf08      	it	eq
 800339c:	1aad      	subeq	r5, r5, r2
 800339e:	68a3      	ldr	r3, [r4, #8]
 80033a0:	6922      	ldr	r2, [r4, #16]
 80033a2:	bf0c      	ite	eq
 80033a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033a8:	2500      	movne	r5, #0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	bfc4      	itt	gt
 80033ae:	1a9b      	subgt	r3, r3, r2
 80033b0:	18ed      	addgt	r5, r5, r3
 80033b2:	2600      	movs	r6, #0
 80033b4:	341a      	adds	r4, #26
 80033b6:	42b5      	cmp	r5, r6
 80033b8:	d11a      	bne.n	80033f0 <_printf_common+0xc8>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e008      	b.n	80033d0 <_printf_common+0xa8>
 80033be:	2301      	movs	r3, #1
 80033c0:	4652      	mov	r2, sl
 80033c2:	4649      	mov	r1, r9
 80033c4:	4638      	mov	r0, r7
 80033c6:	47c0      	blx	r8
 80033c8:	3001      	adds	r0, #1
 80033ca:	d103      	bne.n	80033d4 <_printf_common+0xac>
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d4:	3501      	adds	r5, #1
 80033d6:	e7c6      	b.n	8003366 <_printf_common+0x3e>
 80033d8:	18e1      	adds	r1, r4, r3
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	2030      	movs	r0, #48	; 0x30
 80033de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033e2:	4422      	add	r2, r4
 80033e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033ec:	3302      	adds	r3, #2
 80033ee:	e7c7      	b.n	8003380 <_printf_common+0x58>
 80033f0:	2301      	movs	r3, #1
 80033f2:	4622      	mov	r2, r4
 80033f4:	4649      	mov	r1, r9
 80033f6:	4638      	mov	r0, r7
 80033f8:	47c0      	blx	r8
 80033fa:	3001      	adds	r0, #1
 80033fc:	d0e6      	beq.n	80033cc <_printf_common+0xa4>
 80033fe:	3601      	adds	r6, #1
 8003400:	e7d9      	b.n	80033b6 <_printf_common+0x8e>
	...

08003404 <_printf_i>:
 8003404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	7e0f      	ldrb	r7, [r1, #24]
 800340a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800340c:	2f78      	cmp	r7, #120	; 0x78
 800340e:	4691      	mov	r9, r2
 8003410:	4680      	mov	r8, r0
 8003412:	460c      	mov	r4, r1
 8003414:	469a      	mov	sl, r3
 8003416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800341a:	d807      	bhi.n	800342c <_printf_i+0x28>
 800341c:	2f62      	cmp	r7, #98	; 0x62
 800341e:	d80a      	bhi.n	8003436 <_printf_i+0x32>
 8003420:	2f00      	cmp	r7, #0
 8003422:	f000 80d8 	beq.w	80035d6 <_printf_i+0x1d2>
 8003426:	2f58      	cmp	r7, #88	; 0x58
 8003428:	f000 80a3 	beq.w	8003572 <_printf_i+0x16e>
 800342c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003434:	e03a      	b.n	80034ac <_printf_i+0xa8>
 8003436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800343a:	2b15      	cmp	r3, #21
 800343c:	d8f6      	bhi.n	800342c <_printf_i+0x28>
 800343e:	a101      	add	r1, pc, #4	; (adr r1, 8003444 <_printf_i+0x40>)
 8003440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003444:	0800349d 	.word	0x0800349d
 8003448:	080034b1 	.word	0x080034b1
 800344c:	0800342d 	.word	0x0800342d
 8003450:	0800342d 	.word	0x0800342d
 8003454:	0800342d 	.word	0x0800342d
 8003458:	0800342d 	.word	0x0800342d
 800345c:	080034b1 	.word	0x080034b1
 8003460:	0800342d 	.word	0x0800342d
 8003464:	0800342d 	.word	0x0800342d
 8003468:	0800342d 	.word	0x0800342d
 800346c:	0800342d 	.word	0x0800342d
 8003470:	080035bd 	.word	0x080035bd
 8003474:	080034e1 	.word	0x080034e1
 8003478:	0800359f 	.word	0x0800359f
 800347c:	0800342d 	.word	0x0800342d
 8003480:	0800342d 	.word	0x0800342d
 8003484:	080035df 	.word	0x080035df
 8003488:	0800342d 	.word	0x0800342d
 800348c:	080034e1 	.word	0x080034e1
 8003490:	0800342d 	.word	0x0800342d
 8003494:	0800342d 	.word	0x0800342d
 8003498:	080035a7 	.word	0x080035a7
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	1d1a      	adds	r2, r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	602a      	str	r2, [r5, #0]
 80034a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0a3      	b.n	80035f8 <_printf_i+0x1f4>
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	6829      	ldr	r1, [r5, #0]
 80034b4:	0606      	lsls	r6, r0, #24
 80034b6:	f101 0304 	add.w	r3, r1, #4
 80034ba:	d50a      	bpl.n	80034d2 <_printf_i+0xce>
 80034bc:	680e      	ldr	r6, [r1, #0]
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	2e00      	cmp	r6, #0
 80034c2:	da03      	bge.n	80034cc <_printf_i+0xc8>
 80034c4:	232d      	movs	r3, #45	; 0x2d
 80034c6:	4276      	negs	r6, r6
 80034c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034cc:	485e      	ldr	r0, [pc, #376]	; (8003648 <_printf_i+0x244>)
 80034ce:	230a      	movs	r3, #10
 80034d0:	e019      	b.n	8003506 <_printf_i+0x102>
 80034d2:	680e      	ldr	r6, [r1, #0]
 80034d4:	602b      	str	r3, [r5, #0]
 80034d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034da:	bf18      	it	ne
 80034dc:	b236      	sxthne	r6, r6
 80034de:	e7ef      	b.n	80034c0 <_printf_i+0xbc>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	6029      	str	r1, [r5, #0]
 80034e8:	0601      	lsls	r1, r0, #24
 80034ea:	d501      	bpl.n	80034f0 <_printf_i+0xec>
 80034ec:	681e      	ldr	r6, [r3, #0]
 80034ee:	e002      	b.n	80034f6 <_printf_i+0xf2>
 80034f0:	0646      	lsls	r6, r0, #25
 80034f2:	d5fb      	bpl.n	80034ec <_printf_i+0xe8>
 80034f4:	881e      	ldrh	r6, [r3, #0]
 80034f6:	4854      	ldr	r0, [pc, #336]	; (8003648 <_printf_i+0x244>)
 80034f8:	2f6f      	cmp	r7, #111	; 0x6f
 80034fa:	bf0c      	ite	eq
 80034fc:	2308      	moveq	r3, #8
 80034fe:	230a      	movne	r3, #10
 8003500:	2100      	movs	r1, #0
 8003502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003506:	6865      	ldr	r5, [r4, #4]
 8003508:	60a5      	str	r5, [r4, #8]
 800350a:	2d00      	cmp	r5, #0
 800350c:	bfa2      	ittt	ge
 800350e:	6821      	ldrge	r1, [r4, #0]
 8003510:	f021 0104 	bicge.w	r1, r1, #4
 8003514:	6021      	strge	r1, [r4, #0]
 8003516:	b90e      	cbnz	r6, 800351c <_printf_i+0x118>
 8003518:	2d00      	cmp	r5, #0
 800351a:	d04d      	beq.n	80035b8 <_printf_i+0x1b4>
 800351c:	4615      	mov	r5, r2
 800351e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003522:	fb03 6711 	mls	r7, r3, r1, r6
 8003526:	5dc7      	ldrb	r7, [r0, r7]
 8003528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800352c:	4637      	mov	r7, r6
 800352e:	42bb      	cmp	r3, r7
 8003530:	460e      	mov	r6, r1
 8003532:	d9f4      	bls.n	800351e <_printf_i+0x11a>
 8003534:	2b08      	cmp	r3, #8
 8003536:	d10b      	bne.n	8003550 <_printf_i+0x14c>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	07de      	lsls	r6, r3, #31
 800353c:	d508      	bpl.n	8003550 <_printf_i+0x14c>
 800353e:	6923      	ldr	r3, [r4, #16]
 8003540:	6861      	ldr	r1, [r4, #4]
 8003542:	4299      	cmp	r1, r3
 8003544:	bfde      	ittt	le
 8003546:	2330      	movle	r3, #48	; 0x30
 8003548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800354c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003550:	1b52      	subs	r2, r2, r5
 8003552:	6122      	str	r2, [r4, #16]
 8003554:	f8cd a000 	str.w	sl, [sp]
 8003558:	464b      	mov	r3, r9
 800355a:	aa03      	add	r2, sp, #12
 800355c:	4621      	mov	r1, r4
 800355e:	4640      	mov	r0, r8
 8003560:	f7ff fee2 	bl	8003328 <_printf_common>
 8003564:	3001      	adds	r0, #1
 8003566:	d14c      	bne.n	8003602 <_printf_i+0x1fe>
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	b004      	add	sp, #16
 800356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003572:	4835      	ldr	r0, [pc, #212]	; (8003648 <_printf_i+0x244>)
 8003574:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003578:	6829      	ldr	r1, [r5, #0]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003580:	6029      	str	r1, [r5, #0]
 8003582:	061d      	lsls	r5, r3, #24
 8003584:	d514      	bpl.n	80035b0 <_printf_i+0x1ac>
 8003586:	07df      	lsls	r7, r3, #31
 8003588:	bf44      	itt	mi
 800358a:	f043 0320 	orrmi.w	r3, r3, #32
 800358e:	6023      	strmi	r3, [r4, #0]
 8003590:	b91e      	cbnz	r6, 800359a <_printf_i+0x196>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f023 0320 	bic.w	r3, r3, #32
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	2310      	movs	r3, #16
 800359c:	e7b0      	b.n	8003500 <_printf_i+0xfc>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	f043 0320 	orr.w	r3, r3, #32
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	2378      	movs	r3, #120	; 0x78
 80035a8:	4828      	ldr	r0, [pc, #160]	; (800364c <_printf_i+0x248>)
 80035aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035ae:	e7e3      	b.n	8003578 <_printf_i+0x174>
 80035b0:	0659      	lsls	r1, r3, #25
 80035b2:	bf48      	it	mi
 80035b4:	b2b6      	uxthmi	r6, r6
 80035b6:	e7e6      	b.n	8003586 <_printf_i+0x182>
 80035b8:	4615      	mov	r5, r2
 80035ba:	e7bb      	b.n	8003534 <_printf_i+0x130>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	6826      	ldr	r6, [r4, #0]
 80035c0:	6961      	ldr	r1, [r4, #20]
 80035c2:	1d18      	adds	r0, r3, #4
 80035c4:	6028      	str	r0, [r5, #0]
 80035c6:	0635      	lsls	r5, r6, #24
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0x1cc>
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <_printf_i+0x1d2>
 80035d0:	0670      	lsls	r0, r6, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0x1c8>
 80035d4:	8019      	strh	r1, [r3, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	6123      	str	r3, [r4, #16]
 80035da:	4615      	mov	r5, r2
 80035dc:	e7ba      	b.n	8003554 <_printf_i+0x150>
 80035de:	682b      	ldr	r3, [r5, #0]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	602a      	str	r2, [r5, #0]
 80035e4:	681d      	ldr	r5, [r3, #0]
 80035e6:	6862      	ldr	r2, [r4, #4]
 80035e8:	2100      	movs	r1, #0
 80035ea:	4628      	mov	r0, r5
 80035ec:	f7fc fe10 	bl	8000210 <memchr>
 80035f0:	b108      	cbz	r0, 80035f6 <_printf_i+0x1f2>
 80035f2:	1b40      	subs	r0, r0, r5
 80035f4:	6060      	str	r0, [r4, #4]
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	6123      	str	r3, [r4, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003600:	e7a8      	b.n	8003554 <_printf_i+0x150>
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	462a      	mov	r2, r5
 8003606:	4649      	mov	r1, r9
 8003608:	4640      	mov	r0, r8
 800360a:	47d0      	blx	sl
 800360c:	3001      	adds	r0, #1
 800360e:	d0ab      	beq.n	8003568 <_printf_i+0x164>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	079b      	lsls	r3, r3, #30
 8003614:	d413      	bmi.n	800363e <_printf_i+0x23a>
 8003616:	68e0      	ldr	r0, [r4, #12]
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	4298      	cmp	r0, r3
 800361c:	bfb8      	it	lt
 800361e:	4618      	movlt	r0, r3
 8003620:	e7a4      	b.n	800356c <_printf_i+0x168>
 8003622:	2301      	movs	r3, #1
 8003624:	4632      	mov	r2, r6
 8003626:	4649      	mov	r1, r9
 8003628:	4640      	mov	r0, r8
 800362a:	47d0      	blx	sl
 800362c:	3001      	adds	r0, #1
 800362e:	d09b      	beq.n	8003568 <_printf_i+0x164>
 8003630:	3501      	adds	r5, #1
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	9903      	ldr	r1, [sp, #12]
 8003636:	1a5b      	subs	r3, r3, r1
 8003638:	42ab      	cmp	r3, r5
 800363a:	dcf2      	bgt.n	8003622 <_printf_i+0x21e>
 800363c:	e7eb      	b.n	8003616 <_printf_i+0x212>
 800363e:	2500      	movs	r5, #0
 8003640:	f104 0619 	add.w	r6, r4, #25
 8003644:	e7f5      	b.n	8003632 <_printf_i+0x22e>
 8003646:	bf00      	nop
 8003648:	08003955 	.word	0x08003955
 800364c:	08003966 	.word	0x08003966

08003650 <memcpy>:
 8003650:	440a      	add	r2, r1
 8003652:	4291      	cmp	r1, r2
 8003654:	f100 33ff 	add.w	r3, r0, #4294967295
 8003658:	d100      	bne.n	800365c <memcpy+0xc>
 800365a:	4770      	bx	lr
 800365c:	b510      	push	{r4, lr}
 800365e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003666:	4291      	cmp	r1, r2
 8003668:	d1f9      	bne.n	800365e <memcpy+0xe>
 800366a:	bd10      	pop	{r4, pc}

0800366c <memmove>:
 800366c:	4288      	cmp	r0, r1
 800366e:	b510      	push	{r4, lr}
 8003670:	eb01 0402 	add.w	r4, r1, r2
 8003674:	d902      	bls.n	800367c <memmove+0x10>
 8003676:	4284      	cmp	r4, r0
 8003678:	4623      	mov	r3, r4
 800367a:	d807      	bhi.n	800368c <memmove+0x20>
 800367c:	1e43      	subs	r3, r0, #1
 800367e:	42a1      	cmp	r1, r4
 8003680:	d008      	beq.n	8003694 <memmove+0x28>
 8003682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800368a:	e7f8      	b.n	800367e <memmove+0x12>
 800368c:	4402      	add	r2, r0
 800368e:	4601      	mov	r1, r0
 8003690:	428a      	cmp	r2, r1
 8003692:	d100      	bne.n	8003696 <memmove+0x2a>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800369a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800369e:	e7f7      	b.n	8003690 <memmove+0x24>

080036a0 <_free_r>:
 80036a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d044      	beq.n	8003730 <_free_r+0x90>
 80036a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036aa:	9001      	str	r0, [sp, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f1a1 0404 	sub.w	r4, r1, #4
 80036b2:	bfb8      	it	lt
 80036b4:	18e4      	addlt	r4, r4, r3
 80036b6:	f000 f913 	bl	80038e0 <__malloc_lock>
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <_free_r+0x94>)
 80036bc:	9801      	ldr	r0, [sp, #4]
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	b933      	cbnz	r3, 80036d0 <_free_r+0x30>
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	6014      	str	r4, [r2, #0]
 80036c6:	b003      	add	sp, #12
 80036c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036cc:	f000 b90e 	b.w	80038ec <__malloc_unlock>
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d908      	bls.n	80036e6 <_free_r+0x46>
 80036d4:	6825      	ldr	r5, [r4, #0]
 80036d6:	1961      	adds	r1, r4, r5
 80036d8:	428b      	cmp	r3, r1
 80036da:	bf01      	itttt	eq
 80036dc:	6819      	ldreq	r1, [r3, #0]
 80036de:	685b      	ldreq	r3, [r3, #4]
 80036e0:	1949      	addeq	r1, r1, r5
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	e7ed      	b.n	80036c2 <_free_r+0x22>
 80036e6:	461a      	mov	r2, r3
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	b10b      	cbz	r3, 80036f0 <_free_r+0x50>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d9fa      	bls.n	80036e6 <_free_r+0x46>
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	1855      	adds	r5, r2, r1
 80036f4:	42a5      	cmp	r5, r4
 80036f6:	d10b      	bne.n	8003710 <_free_r+0x70>
 80036f8:	6824      	ldr	r4, [r4, #0]
 80036fa:	4421      	add	r1, r4
 80036fc:	1854      	adds	r4, r2, r1
 80036fe:	42a3      	cmp	r3, r4
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	d1e0      	bne.n	80036c6 <_free_r+0x26>
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	4421      	add	r1, r4
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	e7da      	b.n	80036c6 <_free_r+0x26>
 8003710:	d902      	bls.n	8003718 <_free_r+0x78>
 8003712:	230c      	movs	r3, #12
 8003714:	6003      	str	r3, [r0, #0]
 8003716:	e7d6      	b.n	80036c6 <_free_r+0x26>
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	1961      	adds	r1, r4, r5
 800371c:	428b      	cmp	r3, r1
 800371e:	bf04      	itt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	bf04      	itt	eq
 8003728:	1949      	addeq	r1, r1, r5
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	6054      	str	r4, [r2, #4]
 800372e:	e7ca      	b.n	80036c6 <_free_r+0x26>
 8003730:	b003      	add	sp, #12
 8003732:	bd30      	pop	{r4, r5, pc}
 8003734:	20000178 	.word	0x20000178

08003738 <sbrk_aligned>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4e0e      	ldr	r6, [pc, #56]	; (8003774 <sbrk_aligned+0x3c>)
 800373c:	460c      	mov	r4, r1
 800373e:	6831      	ldr	r1, [r6, #0]
 8003740:	4605      	mov	r5, r0
 8003742:	b911      	cbnz	r1, 800374a <sbrk_aligned+0x12>
 8003744:	f000 f8bc 	bl	80038c0 <_sbrk_r>
 8003748:	6030      	str	r0, [r6, #0]
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f000 f8b7 	bl	80038c0 <_sbrk_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	d00a      	beq.n	800376c <sbrk_aligned+0x34>
 8003756:	1cc4      	adds	r4, r0, #3
 8003758:	f024 0403 	bic.w	r4, r4, #3
 800375c:	42a0      	cmp	r0, r4
 800375e:	d007      	beq.n	8003770 <sbrk_aligned+0x38>
 8003760:	1a21      	subs	r1, r4, r0
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f8ac 	bl	80038c0 <_sbrk_r>
 8003768:	3001      	adds	r0, #1
 800376a:	d101      	bne.n	8003770 <sbrk_aligned+0x38>
 800376c:	f04f 34ff 	mov.w	r4, #4294967295
 8003770:	4620      	mov	r0, r4
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	2000017c 	.word	0x2000017c

08003778 <_malloc_r>:
 8003778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377c:	1ccd      	adds	r5, r1, #3
 800377e:	f025 0503 	bic.w	r5, r5, #3
 8003782:	3508      	adds	r5, #8
 8003784:	2d0c      	cmp	r5, #12
 8003786:	bf38      	it	cc
 8003788:	250c      	movcc	r5, #12
 800378a:	2d00      	cmp	r5, #0
 800378c:	4607      	mov	r7, r0
 800378e:	db01      	blt.n	8003794 <_malloc_r+0x1c>
 8003790:	42a9      	cmp	r1, r5
 8003792:	d905      	bls.n	80037a0 <_malloc_r+0x28>
 8003794:	230c      	movs	r3, #12
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	2600      	movs	r6, #0
 800379a:	4630      	mov	r0, r6
 800379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a0:	4e2e      	ldr	r6, [pc, #184]	; (800385c <_malloc_r+0xe4>)
 80037a2:	f000 f89d 	bl	80038e0 <__malloc_lock>
 80037a6:	6833      	ldr	r3, [r6, #0]
 80037a8:	461c      	mov	r4, r3
 80037aa:	bb34      	cbnz	r4, 80037fa <_malloc_r+0x82>
 80037ac:	4629      	mov	r1, r5
 80037ae:	4638      	mov	r0, r7
 80037b0:	f7ff ffc2 	bl	8003738 <sbrk_aligned>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	4604      	mov	r4, r0
 80037b8:	d14d      	bne.n	8003856 <_malloc_r+0xde>
 80037ba:	6834      	ldr	r4, [r6, #0]
 80037bc:	4626      	mov	r6, r4
 80037be:	2e00      	cmp	r6, #0
 80037c0:	d140      	bne.n	8003844 <_malloc_r+0xcc>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	4631      	mov	r1, r6
 80037c6:	4638      	mov	r0, r7
 80037c8:	eb04 0803 	add.w	r8, r4, r3
 80037cc:	f000 f878 	bl	80038c0 <_sbrk_r>
 80037d0:	4580      	cmp	r8, r0
 80037d2:	d13a      	bne.n	800384a <_malloc_r+0xd2>
 80037d4:	6821      	ldr	r1, [r4, #0]
 80037d6:	3503      	adds	r5, #3
 80037d8:	1a6d      	subs	r5, r5, r1
 80037da:	f025 0503 	bic.w	r5, r5, #3
 80037de:	3508      	adds	r5, #8
 80037e0:	2d0c      	cmp	r5, #12
 80037e2:	bf38      	it	cc
 80037e4:	250c      	movcc	r5, #12
 80037e6:	4629      	mov	r1, r5
 80037e8:	4638      	mov	r0, r7
 80037ea:	f7ff ffa5 	bl	8003738 <sbrk_aligned>
 80037ee:	3001      	adds	r0, #1
 80037f0:	d02b      	beq.n	800384a <_malloc_r+0xd2>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	442b      	add	r3, r5
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	e00e      	b.n	8003818 <_malloc_r+0xa0>
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	1b52      	subs	r2, r2, r5
 80037fe:	d41e      	bmi.n	800383e <_malloc_r+0xc6>
 8003800:	2a0b      	cmp	r2, #11
 8003802:	d916      	bls.n	8003832 <_malloc_r+0xba>
 8003804:	1961      	adds	r1, r4, r5
 8003806:	42a3      	cmp	r3, r4
 8003808:	6025      	str	r5, [r4, #0]
 800380a:	bf18      	it	ne
 800380c:	6059      	strne	r1, [r3, #4]
 800380e:	6863      	ldr	r3, [r4, #4]
 8003810:	bf08      	it	eq
 8003812:	6031      	streq	r1, [r6, #0]
 8003814:	5162      	str	r2, [r4, r5]
 8003816:	604b      	str	r3, [r1, #4]
 8003818:	4638      	mov	r0, r7
 800381a:	f104 060b 	add.w	r6, r4, #11
 800381e:	f000 f865 	bl	80038ec <__malloc_unlock>
 8003822:	f026 0607 	bic.w	r6, r6, #7
 8003826:	1d23      	adds	r3, r4, #4
 8003828:	1af2      	subs	r2, r6, r3
 800382a:	d0b6      	beq.n	800379a <_malloc_r+0x22>
 800382c:	1b9b      	subs	r3, r3, r6
 800382e:	50a3      	str	r3, [r4, r2]
 8003830:	e7b3      	b.n	800379a <_malloc_r+0x22>
 8003832:	6862      	ldr	r2, [r4, #4]
 8003834:	42a3      	cmp	r3, r4
 8003836:	bf0c      	ite	eq
 8003838:	6032      	streq	r2, [r6, #0]
 800383a:	605a      	strne	r2, [r3, #4]
 800383c:	e7ec      	b.n	8003818 <_malloc_r+0xa0>
 800383e:	4623      	mov	r3, r4
 8003840:	6864      	ldr	r4, [r4, #4]
 8003842:	e7b2      	b.n	80037aa <_malloc_r+0x32>
 8003844:	4634      	mov	r4, r6
 8003846:	6876      	ldr	r6, [r6, #4]
 8003848:	e7b9      	b.n	80037be <_malloc_r+0x46>
 800384a:	230c      	movs	r3, #12
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4638      	mov	r0, r7
 8003850:	f000 f84c 	bl	80038ec <__malloc_unlock>
 8003854:	e7a1      	b.n	800379a <_malloc_r+0x22>
 8003856:	6025      	str	r5, [r4, #0]
 8003858:	e7de      	b.n	8003818 <_malloc_r+0xa0>
 800385a:	bf00      	nop
 800385c:	20000178 	.word	0x20000178

08003860 <_realloc_r>:
 8003860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003864:	4680      	mov	r8, r0
 8003866:	4614      	mov	r4, r2
 8003868:	460e      	mov	r6, r1
 800386a:	b921      	cbnz	r1, 8003876 <_realloc_r+0x16>
 800386c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003870:	4611      	mov	r1, r2
 8003872:	f7ff bf81 	b.w	8003778 <_malloc_r>
 8003876:	b92a      	cbnz	r2, 8003884 <_realloc_r+0x24>
 8003878:	f7ff ff12 	bl	80036a0 <_free_r>
 800387c:	4625      	mov	r5, r4
 800387e:	4628      	mov	r0, r5
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003884:	f000 f838 	bl	80038f8 <_malloc_usable_size_r>
 8003888:	4284      	cmp	r4, r0
 800388a:	4607      	mov	r7, r0
 800388c:	d802      	bhi.n	8003894 <_realloc_r+0x34>
 800388e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003892:	d812      	bhi.n	80038ba <_realloc_r+0x5a>
 8003894:	4621      	mov	r1, r4
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff ff6e 	bl	8003778 <_malloc_r>
 800389c:	4605      	mov	r5, r0
 800389e:	2800      	cmp	r0, #0
 80038a0:	d0ed      	beq.n	800387e <_realloc_r+0x1e>
 80038a2:	42bc      	cmp	r4, r7
 80038a4:	4622      	mov	r2, r4
 80038a6:	4631      	mov	r1, r6
 80038a8:	bf28      	it	cs
 80038aa:	463a      	movcs	r2, r7
 80038ac:	f7ff fed0 	bl	8003650 <memcpy>
 80038b0:	4631      	mov	r1, r6
 80038b2:	4640      	mov	r0, r8
 80038b4:	f7ff fef4 	bl	80036a0 <_free_r>
 80038b8:	e7e1      	b.n	800387e <_realloc_r+0x1e>
 80038ba:	4635      	mov	r5, r6
 80038bc:	e7df      	b.n	800387e <_realloc_r+0x1e>
	...

080038c0 <_sbrk_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_sbrk_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd fa9e 	bl	8000e0c <_sbrk>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_sbrk_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_sbrk_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20000180 	.word	0x20000180

080038e0 <__malloc_lock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__malloc_lock+0x8>)
 80038e2:	f000 b811 	b.w	8003908 <__retarget_lock_acquire_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000184 	.word	0x20000184

080038ec <__malloc_unlock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_unlock+0x8>)
 80038ee:	f000 b80c 	b.w	800390a <__retarget_lock_release_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000184 	.word	0x20000184

080038f8 <_malloc_usable_size_r>:
 80038f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fc:	1f18      	subs	r0, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bfbc      	itt	lt
 8003902:	580b      	ldrlt	r3, [r1, r0]
 8003904:	18c0      	addlt	r0, r0, r3
 8003906:	4770      	bx	lr

08003908 <__retarget_lock_acquire_recursive>:
 8003908:	4770      	bx	lr

0800390a <__retarget_lock_release_recursive>:
 800390a:	4770      	bx	lr

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr


FinalProject342.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000070  08004a44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08004a44  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e88c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f89  00000000  00000000  0002e92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022012  00000000  00000000  00031fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8af  00000000  00000000  00053fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc7a7  00000000  00000000  00062861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  0012f058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800494c 	.word	0x0800494c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800494c 	.word	0x0800494c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <get_spi_byte>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_spi_byte(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <get_spi_byte+0x2c>)
 80005c2:	f002 fa82 	bl	8002aca <HAL_SPI_Receive>
	while(hspi1.State == HAL_SPI_STATE_BUSY);
 80005c6:	bf00      	nop
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <get_spi_byte+0x2c>)
 80005ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d0f9      	beq.n	80005c8 <get_spi_byte+0x14>
	return data;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fc5f 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f8c5 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f9bf 	bl	8000978 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f965 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 f98d 	bl	800091c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000602:	f000 f929 	bl	8000858 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int strindex = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800060c:	f102 0204 	add.w	r2, r2, #4
 8000610:	6013      	str	r3, [r2, #0]
  char strbuf[6000];

  HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_SET); // NSS1 Default Set
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4855      	ldr	r0, [pc, #340]	; (8000770 <main+0x18c>)
 800061a:	f000 ff59 	bl	80014d0 <HAL_GPIO_WritePin>

#define NUM_VALS 100
  int vindex = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8000624:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint16_t value = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800062c:	f102 021a 	add.w	r2, r2, #26
 8000630:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_RESET); // NSS1 low
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	484d      	ldr	r0, [pc, #308]	; (8000770 <main+0x18c>)
 800063a:	f000 ff49 	bl	80014d0 <HAL_GPIO_WritePin>
	value |= get_spi_byte();
 800063e:	f7ff ffb9 	bl	80005b4 <get_spi_byte>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800064a:	f103 031a 	add.w	r3, r3, #26
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4313      	orrs	r3, r2
 8000652:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8000656:	f102 021a 	add.w	r2, r2, #26
 800065a:	8013      	strh	r3, [r2, #0]
	value |= get_spi_byte() << 8;
 800065c:	f7ff ffaa 	bl	80005b4 <get_spi_byte>
 8000660:	4603      	mov	r3, r0
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800066a:	f103 031a 	add.w	r3, r3, #26
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800067a:	f102 021a 	add.w	r2, r2, #26
 800067e:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_SET); // NSS1 low
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	483a      	ldr	r0, [pc, #232]	; (8000770 <main+0x18c>)
 8000688:	f000 ff22 	bl	80014d0 <HAL_GPIO_WritePin>

	if (vindex >= NUM_VALS)
 800068c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b63      	cmp	r3, #99	; 0x63
 8000694:	dd58      	ble.n	8000748 <main+0x164>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)"\n\nBegin:\n", strlen("\n\nBegin:\n"), 100);
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	2209      	movs	r2, #9
 800069a:	4936      	ldr	r1, [pc, #216]	; (8000774 <main+0x190>)
 800069c:	4836      	ldr	r0, [pc, #216]	; (8000778 <main+0x194>)
 800069e:	f002 fe44 	bl	800332a <HAL_UART_Transmit>

		vindex = 0; strindex = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80006b0:	f102 0204 	add.w	r2, r2, #4
 80006b4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < NUM_VALS; ++i)
 80006b6:	2300      	movs	r3, #0
 80006b8:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80006bc:	f102 021c 	add.w	r2, r2, #28
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e02d      	b.n	8000720 <main+0x13c>
			strindex += sprintf(strbuf + strindex, "%d, ", values[i]);
 80006c4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80006c8:	f103 0304 	add.w	r3, r3, #4
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80006d2:	18d0      	adds	r0, r2, r3
 80006d4:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80006d8:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 80006dc:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80006e0:	f102 021c 	add.w	r2, r2, #28
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4923      	ldr	r1, [pc, #140]	; (800077c <main+0x198>)
 80006ee:	f003 fcbf 	bl	8004070 <siprintf>
 80006f2:	4602      	mov	r2, r0
 80006f4:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80006f8:	f103 0304 	add.w	r3, r3, #4
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8000704:	f102 0204 	add.w	r2, r2, #4
 8000708:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < NUM_VALS; ++i)
 800070a:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800070e:	f103 031c 	add.w	r3, r3, #28
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800071a:	f102 021c 	add.w	r2, r2, #28
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8000724:	f103 031c 	add.w	r3, r3, #28
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b63      	cmp	r3, #99	; 0x63
 800072c:	ddca      	ble.n	80006c4 <main+0xe0>

		HAL_UART_Transmit(&huart3, (uint8_t*)strbuf, strindex, 100);
 800072e:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8000732:	f103 0304 	add.w	r3, r3, #4
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0x194>)
 8000742:	f002 fdf2 	bl	800332a <HAL_UART_Transmit>
 8000746:	e76e      	b.n	8000626 <main+0x42>
	}
	else { values[vindex++] = value; }
 8000748:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	f507 51c2 	add.w	r1, r7, #6208	; 0x1840
 8000754:	600a      	str	r2, [r1, #0]
 8000756:	f607 0248 	addw	r2, r7, #2120	; 0x848
 800075a:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 800075e:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
 8000762:	f101 011a 	add.w	r1, r1, #26
 8000766:	8809      	ldrh	r1, [r1, #0]
 8000768:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  {
 800076c:	e75b      	b.n	8000626 <main+0x42>
 800076e:	bf00      	nop
 8000770:	40021400 	.word	0x40021400
 8000774:	08004964 	.word	0x08004964
 8000778:	200000e4 	.word	0x200000e4
 800077c:	08004970 	.word	0x08004970

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b094      	sub	sp, #80	; 0x50
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2234      	movs	r2, #52	; 0x34
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fc66 	bl	8004060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xd0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <SystemClock_Config+0xd0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xd0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <SystemClock_Config+0xd4>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f4:	23a8      	movs	r3, #168	; 0xa8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fc:	2307      	movs	r3, #7
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe37 	bl	800247c <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000814:	f000 f982 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ffac 	bl	8001794 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000842:	f000 f96b 	bl	8000b1c <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI1_Init+0x68>)
 800085e:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <MX_SPI1_Init+0x6c>)
 8000860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_SPI1_Init+0x68>)
 800086c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000870:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI1_Init+0x68>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI1_Init+0x68>)
 800088e:	2208      	movs	r2, #8
 8000890:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_SPI1_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_SPI1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI1_Init+0x68>)
 80008a6:	220a      	movs	r2, #10
 80008a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_SPI1_Init+0x68>)
 80008ac:	f002 f884 	bl	80029b8 <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008b6:	f000 f931 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	40013000 	.word	0x40013000

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <MX_USART3_UART_Init+0x50>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART3_UART_Init+0x4c>)
 8000900:	f002 fcc6 	bl	8003290 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800090a:	f000 f907 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000e4 	.word	0x200000e4
 8000918:	40004800 	.word	0x40004800

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2206      	movs	r2, #6
 800092c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2202      	movs	r2, #2
 8000932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2201      	movs	r2, #1
 8000944:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2201      	movs	r2, #1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	f000 fdcf 	bl	8001502 <HAL_PCD_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f8d7 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000128 	.word	0x20000128

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b5d      	ldr	r3, [pc, #372]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a5c      	ldr	r2, [pc, #368]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a55      	ldr	r2, [pc, #340]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <MX_GPIO_Init+0x190>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a40      	ldr	r2, [pc, #256]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <MX_GPIO_Init+0x190>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a58:	482c      	ldr	r0, [pc, #176]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a5a:	f000 fd39 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a64:	482a      	ldr	r0, [pc, #168]	; (8000b10 <MX_GPIO_Init+0x198>)
 8000a66:	f000 fd33 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_GPIO_Init+0x19c>)
 8000a70:	f000 fd2e 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a8c:	f000 fb8c 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a90:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000aaa:	f000 fb7d 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_GPIO_Init+0x198>)
 8000ac8:	f000 fb6e 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000acc:	2340      	movs	r3, #64	; 0x40
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <MX_GPIO_Init+0x19c>)
 8000ae4:	f000 fb60 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_GPIO_Init+0x19c>)
 8000afc:	f000 fb54 	bl	80011a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40021400 	.word	0x40021400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40020800 	.word	0x40020800

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_SPI_MspInit+0x84>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d12b      	bne.n	8000bf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_SPI_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be2:	2305      	movs	r3, #5
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_SPI_MspInit+0x8c>)
 8000bee:	f000 fadb 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40013000 	.word	0x40013000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12c      	bne.n	8000c84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c74:	2307      	movs	r3, #7
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_UART_MspInit+0x8c>)
 8000c80:	f000 fa92 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40004800 	.word	0x40004800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020c00 	.word	0x40020c00

08000c98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a0      	sub	sp, #128	; 0x80
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	225c      	movs	r2, #92	; 0x5c
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 f9d1 	bl	8004060 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc6:	d14e      	bne.n	8000d66 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fe76 	bl	80019c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff ff1b 	bl	8000b1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d14:	230a      	movs	r3, #10
 8000d16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <HAL_PCD_MspInit+0xdc>)
 8000d20:	f000 fa42 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d28:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	; (8000d74 <HAL_PCD_MspInit+0xdc>)
 8000d3a:	f000 fa35 	bl	80011a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6353      	str	r3, [r2, #52]	; 0x34
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_PCD_MspInit+0xd8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3780      	adds	r7, #128	; 0x80
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f8c6 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f003 f906 	bl	800400c <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000634 	.word	0x20000634
 8000e34:	20000650 	.word	0x20000650

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e62:	490e      	ldr	r1, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e78:	4c0b      	ldr	r4, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e86:	f7ff ffd7 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8a:	f003 f8c5 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8e:	f7ff fba9 	bl	80005e4 <main>
  bx  lr    
 8000e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea0:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000ea4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea8:	2000064c 	.word	0x2000064c

08000eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f931 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fe20 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f93b 	bl	800118e <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f911 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000638 	.word	0x20000638

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000638 	.word	0x20000638

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff47 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5c 	bl	8001024 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e165      	b.n	8001490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8154 	bne.w	800148a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d005      	beq.n	80011fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d130      	bne.n	800125c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 0201 	and.w	r2, r3, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b03      	cmp	r3, #3
 8001266:	d017      	beq.n	8001298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d123      	bne.n	80012ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80ae 	beq.w	800148a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_GPIO_Init+0x300>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a5c      	ldr	r2, [pc, #368]	; (80014a8 <HAL_GPIO_Init+0x300>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <HAL_GPIO_Init+0x300>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134a:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_GPIO_Init+0x304>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x308>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x310>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x314>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x318>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x20a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x31c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x206>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x320>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x202>
 80013a6:	2306      	movs	r3, #6
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x21c>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x304>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <HAL_GPIO_Init+0x324>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a31      	ldr	r2, [pc, #196]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x324>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_GPIO_Init+0x324>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae96 	bls.w	80011c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40013c00 	.word	0x40013c00

080014d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e0:	787b      	ldrb	r3, [r7, #1]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001504:	b08f      	sub	sp, #60	; 0x3c
 8001506:	af0a      	add	r7, sp, #40	; 0x28
 8001508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e116      	b.n	8001742 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fbb2 	bl	8000c98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2203      	movs	r2, #3
 8001538:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fabf 	bl	8003ad6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	687e      	ldr	r6, [r7, #4]
 8001560:	466d      	mov	r5, sp
 8001562:	f106 0410 	add.w	r4, r6, #16
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	e885 0003 	stmia.w	r5, {r0, r1}
 8001576:	1d33      	adds	r3, r6, #4
 8001578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f002 fa4a 	bl	8003a14 <USB_CoreInit>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0d7      	b.n	8001742 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f002 faad 	bl	8003af8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	e04a      	b.n	800163a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	333d      	adds	r3, #61	; 0x3d
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	333c      	adds	r3, #60	; 0x3c
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	b298      	uxth	r0, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3344      	adds	r3, #68	; 0x44
 80015e0:	4602      	mov	r2, r0
 80015e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3340      	adds	r3, #64	; 0x40
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3348      	adds	r3, #72	; 0x48
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	334c      	adds	r3, #76	; 0x4c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3354      	adds	r3, #84	; 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3301      	adds	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3af      	bcc.n	80015a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e044      	b.n	80016d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3b5      	bcc.n	800164a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	687e      	ldr	r6, [r7, #4]
 80016e6:	466d      	mov	r5, sp
 80016e8:	f106 0410 	add.w	r4, r6, #16
 80016ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016fc:	1d33      	adds	r3, r6, #4
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f002 fa45 	bl	8003b90 <USB_DevInit>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2202      	movs	r2, #2
 8001710:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e014      	b.n	8001742 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d102      	bne.n	8001736 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f80a 	bl	800174a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fc03 	bl	8003f46 <USB_DevDisconnect>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800174a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	f043 0303 	orr.w	r3, r3, #3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fb7a 	bl	8000f7c <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fb76 	bl	8000f7c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 fb7f 	bl	800201c <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fada 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	08004978 	.word	0x08004978
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08004988 	.word	0x08004988

080019a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a4:	f7ff ffdc 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0b5b      	lsrs	r3, r3, #13
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08004988 	.word	0x08004988

080019c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a06:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	496c      	ldr	r1, [pc, #432]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a2e:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a34:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	4960      	ldr	r1, [pc, #384]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d017      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4955      	ldr	r1, [pc, #340]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d017      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a98:	4b49      	ldr	r3, [pc, #292]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	4946      	ldr	r1, [pc, #280]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab6:	d101      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 808a 	beq.w	8001bea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a38      	ldr	r2, [pc, #224]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001af2:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fa3d 	bl	8000f7c <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fa39 	bl	8000f7c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e278      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02f      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d028      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b4a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d114      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fa07 	bl	8000f7c <HAL_GetTick>
 8001b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fa03 	bl	8000f7c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e240      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ba0:	d114      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb6:	4902      	ldr	r1, [pc, #8]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
 8001bbc:	e00c      	b.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42470e40 	.word	0x42470e40
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bd6:	6093      	str	r3, [r2, #8]
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	4944      	ldr	r1, [pc, #272]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bfe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4937      	ldr	r1, [pc, #220]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c2e:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c34:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3c:	492e      	ldr	r1, [pc, #184]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d011      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c56:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	4926      	ldr	r1, [pc, #152]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	491a      	ldr	r1, [pc, #104]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d011      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb0:	4911      	ldr	r1, [pc, #68]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd4:	f040 80ff 	bne.w	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cde:	f7ff f94d 	bl	8000f7c <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce4:	e00e      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ce6:	f7ff f949 	bl	8000f7c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d907      	bls.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e188      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	424711e0 	.word	0x424711e0
 8001d00:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ea      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d028      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d124      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d38:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	3301      	adds	r3, #1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d50:	0e1b      	lsrs	r3, r3, #24
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	431a      	orrs	r2, r3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	061b      	lsls	r3, r3, #24
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	071b      	lsls	r3, r3, #28
 8001d7a:	4961      	ldr	r1, [pc, #388]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d96:	d00a      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d035      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dac:	d130      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc6:	0f1b      	lsrs	r3, r3, #28
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	019b      	lsls	r3, r3, #6
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	071b      	lsls	r3, r3, #28
 8001df0:	4943      	ldr	r1, [pc, #268]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfe:	f023 021f 	bic.w	r2, r3, #31
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	493d      	ldr	r1, [pc, #244]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d029      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e24:	d124      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3e:	0f1b      	lsrs	r3, r3, #28
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	019b      	lsls	r3, r3, #6
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	431a      	orrs	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	071b      	lsls	r3, r3, #28
 8001e68:	4925      	ldr	r1, [pc, #148]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d016      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	041b      	lsls	r3, r3, #16
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	071b      	lsls	r3, r3, #28
 8001ea2:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff f864 	bl	8000f7c <HAL_GetTick>
 8001eb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001eb8:	f7ff f860 	bl	8000f7c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e09f      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f040 8095 	bne.w	8002008 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff f84a 	bl	8000f7c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001eec:	f7ff f846 	bl	8000f7c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d908      	bls.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e085      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470068 	.word	0x42470068
 8001f08:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f18:	d0e8      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d02b      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d127      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	061b      	lsls	r3, r3, #24
 8001f70:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	3b01      	subs	r3, #1
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa6:	d118      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	0e1b      	lsrs	r3, r3, #24
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	019b      	lsls	r3, r3, #6
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	4910      	ldr	r1, [pc, #64]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ffcc 	bl	8000f7c <HAL_GetTick>
 8001fe4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fe8:	f7fe ffc8 	bl	8000f7c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e007      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002006:	d1ef      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3730      	adds	r7, #48	; 0x30
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	42470070 	.word	0x42470070

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b0ae      	sub	sp, #184	; 0xb8
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002042:	4bcb      	ldr	r3, [pc, #812]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b0c      	cmp	r3, #12
 800204c:	f200 8206 	bhi.w	800245c <HAL_RCC_GetSysClockFreq+0x440>
 8002050:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	0800208d 	.word	0x0800208d
 800205c:	0800245d 	.word	0x0800245d
 8002060:	0800245d 	.word	0x0800245d
 8002064:	0800245d 	.word	0x0800245d
 8002068:	08002095 	.word	0x08002095
 800206c:	0800245d 	.word	0x0800245d
 8002070:	0800245d 	.word	0x0800245d
 8002074:	0800245d 	.word	0x0800245d
 8002078:	0800209d 	.word	0x0800209d
 800207c:	0800245d 	.word	0x0800245d
 8002080:	0800245d 	.word	0x0800245d
 8002084:	0800245d 	.word	0x0800245d
 8002088:	0800228d 	.word	0x0800228d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4bb9      	ldr	r3, [pc, #740]	; (8002374 <HAL_RCC_GetSysClockFreq+0x358>)
 800208e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002092:	e1e7      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4bb8      	ldr	r3, [pc, #736]	; (8002378 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800209a:	e1e3      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800209c:	4bb4      	ldr	r3, [pc, #720]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a8:	4bb1      	ldr	r3, [pc, #708]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d071      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b4:	4bae      	ldr	r3, [pc, #696]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4621      	mov	r1, r4
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	6439      	str	r1, [r7, #64]	; 0x40
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb63 0301 	sbc.w	r3, r3, r1
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800210c:	4649      	mov	r1, r9
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002116:	4641      	mov	r1, r8
 8002118:	018a      	lsls	r2, r1, #6
 800211a:	4641      	mov	r1, r8
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002120:	4649      	mov	r1, r9
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002134:	4649      	mov	r1, r9
 8002136:	00cb      	lsls	r3, r1, #3
 8002138:	4641      	mov	r1, r8
 800213a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213e:	4641      	mov	r1, r8
 8002140:	00ca      	lsls	r2, r1, #3
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	4603      	mov	r3, r0
 8002148:	4622      	mov	r2, r4
 800214a:	189b      	adds	r3, r3, r2
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
 800214e:	462b      	mov	r3, r5
 8002150:	460a      	mov	r2, r1
 8002152:	eb42 0303 	adc.w	r3, r2, r3
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002164:	4629      	mov	r1, r5
 8002166:	024b      	lsls	r3, r1, #9
 8002168:	4621      	mov	r1, r4
 800216a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800216e:	4621      	mov	r1, r4
 8002170:	024a      	lsls	r2, r1, #9
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002184:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002188:	f7fe f892 	bl	80002b0 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002196:	e067      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002198:	4b75      	ldr	r3, [pc, #468]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80021b2:	2300      	movs	r3, #0
 80021b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021cc:	0150      	lsls	r0, r2, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4621      	mov	r1, r4
 80021d4:	1a51      	subs	r1, r2, r1
 80021d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80021d8:	4629      	mov	r1, r5
 80021da:	eb63 0301 	sbc.w	r3, r3, r1
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80021ec:	4649      	mov	r1, r9
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	4641      	mov	r1, r8
 80021f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f6:	4641      	mov	r1, r8
 80021f8:	018a      	lsls	r2, r1, #6
 80021fa:	4641      	mov	r1, r8
 80021fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002200:	4649      	mov	r1, r9
 8002202:	eb63 0b01 	sbc.w	fp, r3, r1
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002212:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800221a:	4692      	mov	sl, r2
 800221c:	469b      	mov	fp, r3
 800221e:	4623      	mov	r3, r4
 8002220:	eb1a 0303 	adds.w	r3, sl, r3
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	462b      	mov	r3, r5
 8002228:	eb4b 0303 	adc.w	r3, fp, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800223a:	4629      	mov	r1, r5
 800223c:	028b      	lsls	r3, r1, #10
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002244:	4621      	mov	r1, r4
 8002246:	028a      	lsls	r2, r1, #10
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002250:	2200      	movs	r2, #0
 8002252:	673b      	str	r3, [r7, #112]	; 0x70
 8002254:	677a      	str	r2, [r7, #116]	; 0x74
 8002256:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800225a:	f7fe f829 	bl	80002b0 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4613      	mov	r3, r2
 8002264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002268:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800227a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800227e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800228a:	e0eb      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d06b      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	2200      	movs	r2, #0
 80022ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80022ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b6:	663b      	str	r3, [r7, #96]	; 0x60
 80022b8:	2300      	movs	r3, #0
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
 80022bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022c0:	4622      	mov	r2, r4
 80022c2:	462b      	mov	r3, r5
 80022c4:	f04f 0000 	mov.w	r0, #0
 80022c8:	f04f 0100 	mov.w	r1, #0
 80022cc:	0159      	lsls	r1, r3, #5
 80022ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d2:	0150      	lsls	r0, r2, #5
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4621      	mov	r1, r4
 80022da:	1a51      	subs	r1, r2, r1
 80022dc:	61b9      	str	r1, [r7, #24]
 80022de:	4629      	mov	r1, r5
 80022e0:	eb63 0301 	sbc.w	r3, r3, r1
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022f2:	4659      	mov	r1, fp
 80022f4:	018b      	lsls	r3, r1, #6
 80022f6:	4651      	mov	r1, sl
 80022f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fc:	4651      	mov	r1, sl
 80022fe:	018a      	lsls	r2, r1, #6
 8002300:	4651      	mov	r1, sl
 8002302:	ebb2 0801 	subs.w	r8, r2, r1
 8002306:	4659      	mov	r1, fp
 8002308:	eb63 0901 	sbc.w	r9, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002318:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800231c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002320:	4690      	mov	r8, r2
 8002322:	4699      	mov	r9, r3
 8002324:	4623      	mov	r3, r4
 8002326:	eb18 0303 	adds.w	r3, r8, r3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	462b      	mov	r3, r5
 800232e:	eb49 0303 	adc.w	r3, r9, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002340:	4629      	mov	r1, r5
 8002342:	024b      	lsls	r3, r1, #9
 8002344:	4621      	mov	r1, r4
 8002346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800234a:	4621      	mov	r1, r4
 800234c:	024a      	lsls	r2, r1, #9
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002356:	2200      	movs	r2, #0
 8002358:	65bb      	str	r3, [r7, #88]	; 0x58
 800235a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800235c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002360:	f7fd ffa6 	bl	80002b0 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800236e:	e065      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x420>
 8002370:	40023800 	.word	0x40023800
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237c:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_GetSysClockFreq+0x458>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	2200      	movs	r2, #0
 8002384:	4618      	mov	r0, r3
 8002386:	4611      	mov	r1, r2
 8002388:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
 800238e:	2300      	movs	r3, #0
 8002390:	657b      	str	r3, [r7, #84]	; 0x54
 8002392:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002396:	4642      	mov	r2, r8
 8002398:	464b      	mov	r3, r9
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4641      	mov	r1, r8
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	4649      	mov	r1, r9
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023c8:	4659      	mov	r1, fp
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4651      	mov	r1, sl
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4651      	mov	r1, sl
 80023d8:	1a54      	subs	r4, r2, r1
 80023da:	4659      	mov	r1, fp
 80023dc:	eb63 0501 	sbc.w	r5, r3, r1
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	00eb      	lsls	r3, r5, #3
 80023ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ee:	00e2      	lsls	r2, r4, #3
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	4643      	mov	r3, r8
 80023f6:	18e3      	adds	r3, r4, r3
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	464b      	mov	r3, r9
 80023fc:	eb45 0303 	adc.w	r3, r5, r3
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800240e:	4629      	mov	r1, r5
 8002410:	028b      	lsls	r3, r1, #10
 8002412:	4621      	mov	r1, r4
 8002414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002418:	4621      	mov	r1, r4
 800241a:	028a      	lsls	r2, r1, #10
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002424:	2200      	movs	r2, #0
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
 8002428:	64fa      	str	r2, [r7, #76]	; 0x4c
 800242a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800242e:	f7fd ff3f 	bl	80002b0 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4613      	mov	r3, r2
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCC_GetSysClockFreq+0x458>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0f1b      	lsrs	r3, r3, #28
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800244a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800244e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800245a:	e003      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_GetSysClockFreq+0x45c>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002462:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002468:	4618      	mov	r0, r3
 800246a:	37b8      	adds	r7, #184	; 0xb8
 800246c:	46bd      	mov	sp, r7
 800246e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	00f42400 	.word	0x00f42400

0800247c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e28d      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8083 	beq.w	80025a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800249c:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d019      	beq.n	80024dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a8:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b4:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b84      	ldr	r3, [pc, #528]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x124>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e25a      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x90>
 80024fe:	4b7c      	ldr	r3, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7b      	ldr	r2, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xcc>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0xb4>
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xcc>
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6e      	ldr	r2, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6b      	ldr	r2, [pc, #428]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fd14 	bl	8000f7c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fd10 	bl	8000f7c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e21f      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xdc>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fd00 	bl	8000f7c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fcfc 	bl	8000f7c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e20b      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x104>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06f      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ae:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d017      	beq.n	80025ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ba:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x186>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1d3      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4937      	ldr	r1, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_RCC_OscConfig+0x278>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fca9 	bl	8000f7c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fca5 	bl	8000f7c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1b4      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4925      	ldr	r1, [pc, #148]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x278>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fc88 	bl	8000f7c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fc84 	bl	8000f7c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e193      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d036      	beq.n	8002708 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fc68 	bl	8000f7c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fc64 	bl	8000f7c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e173      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x234>
 80026ce:	e01b      	b.n	8002708 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fc51 	bl	8000f7c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	e00e      	b.n	80026fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fc4d 	bl	8000f7c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d907      	bls.n	80026fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e15c      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470000 	.word	0x42470000
 80026f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8097 	beq.w	8002844 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b83      	ldr	r3, [pc, #524]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a7e      	ldr	r2, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	4b79      	ldr	r3, [pc, #484]	; (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fc0d 	bl	8000f7c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fc09 	bl	8000f7c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e118      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0x4b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x31e>
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e01c      	b.n	80027d4 <HAL_RCC_OscConfig+0x358>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x340>
 80027a2:	4b61      	ldr	r3, [pc, #388]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b5e      	ldr	r3, [pc, #376]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x358>
 80027bc:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a59      	ldr	r2, [pc, #356]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a56      	ldr	r2, [pc, #344]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fbce 	bl	8000f7c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fbca 	bl	8000f7c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0d7      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCC_OscConfig+0x368>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fbb8 	bl	8000f7c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fbb4 	bl	8000f7c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0c1      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ee      	bne.n	8002810 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ad 	beq.w	80029a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d145      	bne.n	80028ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_RCC_OscConfig+0x4b4>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fb88 	bl	8000f7c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fb84 	bl	8000f7c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e093      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x4b4>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb59 	bl	8000f7c <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fb55 	bl	8000f7c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e064      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x452>
 80028ec:	e05c      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_RCC_OscConfig+0x4b4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fb42 	bl	8000f7c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fb3e 	bl	8000f7c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04d      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
 800291a:	e045      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCC_OscConfig+0x538>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d030      	beq.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d129      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d122      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800296a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d119      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d10f      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07b      	b.n	8002ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d009      	beq.n	80029f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
 80029e2:	e005      	b.n	80029f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f8b4 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0104 	and.w	r1, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f003 0210 	and.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b088      	sub	sp, #32
 8002ace:	af02      	add	r7, sp, #8
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae6:	d112      	bne.n	8002b0e <HAL_SPI_Receive+0x44>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10e      	bne.n	8002b0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2204      	movs	r2, #4
 8002af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8f1 	bl	8002cec <HAL_SPI_TransmitReceive>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	e0ea      	b.n	8002ce4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_SPI_Receive+0x52>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0e3      	b.n	8002ce4 <HAL_SPI_Receive+0x21a>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b24:	f7fe fa2a 	bl	8000f7c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
 8002b38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b3a:	e0ca      	b.n	8002cd2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Receive+0x7e>
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b4c:	e0c1      	b.n	8002cd2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2204      	movs	r2, #4
 8002b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d10f      	bne.n	8002bb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d007      	beq.n	8002bd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d162      	bne.n	8002ca2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bdc:	e02e      	b.n	8002c3c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d115      	bne.n	8002c18 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f103 020c 	add.w	r2, r3, #12
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c16:	e011      	b.n	8002c3c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c18:	f7fe f9b0 	bl	8000f7c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d803      	bhi.n	8002c30 <HAL_SPI_Receive+0x166>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Receive+0x16c>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c3a:	e04a      	b.n	8002cd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1cb      	bne.n	8002bde <HAL_SPI_Receive+0x114>
 8002c46:	e031      	b.n	8002cac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d113      	bne.n	8002c7e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	b292      	uxth	r2, r2
 8002c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c7c:	e011      	b.n	8002ca2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe f97d 	bl	8000f7c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d803      	bhi.n	8002c96 <HAL_SPI_Receive+0x1cc>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_Receive+0x1d2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca0:	e017      	b.n	8002cd2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1cd      	bne.n	8002c48 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fa45 	bl	8003140 <SPI_EndRxTransaction>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e000      	b.n	8002cd2 <HAL_SPI_Receive+0x208>
  }

error :
 8002cd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_SPI_TransmitReceive+0x26>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e18a      	b.n	8003028 <HAL_SPI_TransmitReceive+0x33c>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1a:	f7fe f92f 	bl	8000f7c <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d00f      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x70>
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d42:	d107      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x68>
 8002d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d003      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d5a:	e15b      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x82>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x82>
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d74:	e14e      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d003      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2205      	movs	r2, #5
 8002d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d007      	beq.n	8002dde <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de6:	d178      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x10a>
 8002df0:	8b7b      	ldrh	r3, [r7, #26]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d166      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	881a      	ldrh	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1a:	e053      	b.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d11b      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x176>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x176>
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d113      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d119      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x1b8>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d014      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	b292      	uxth	r2, r2
 8002e86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ea4:	f7fe f86a 	bl	8000f7c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d8>
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d003      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ec2:	e0a7      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1a6      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x130>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1a1      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x130>
 8002ed8:	e07c      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x1fc>
 8002ee2:	8b7b      	ldrh	r3, [r7, #26]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d16b      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f0e:	e057      	b.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d11c      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x26c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d017      	beq.n	8002f58 <HAL_SPI_TransmitReceive+0x26c>
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d114      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d119      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x2ae>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d014      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f9a:	f7fd ffef 	bl	8000f7c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d803      	bhi.n	8002fb2 <HAL_SPI_TransmitReceive+0x2c6>
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d102      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x2cc>
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fbe:	e029      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1a2      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x224>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d19d      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f917 	bl	800320c <SPI_EndRxTxTransaction>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ff0:	e010      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	e000      	b.n	8003014 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003028:	4618      	mov	r0, r3
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003040:	f7fd ff9c 	bl	8000f7c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003050:	f7fd ff94 	bl	8000f7c <HAL_GetTick>
 8003054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003066:	e054      	b.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d050      	beq.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003070:	f7fd ff84 	bl	8000f7c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d902      	bls.n	8003086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d13d      	bne.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d111      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d004      	beq.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d107      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d10f      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e017      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3b01      	subs	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	429a      	cmp	r2, r3
 800312e:	d19b      	bne.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000000 	.word	0x20000000

08003140 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003154:	d111      	bne.n	800317a <SPI_EndRxTransaction+0x3a>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d004      	beq.n	800316a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d107      	bne.n	800317a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003178:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003182:	d12a      	bne.n	80031da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318c:	d012      	beq.n	80031b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff49 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02d      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0220 	orr.w	r2, r3, #32
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e026      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	2101      	movs	r1, #1
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff ff36 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01a      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e013      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2101      	movs	r1, #1
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff23 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e000      	b.n	8003202 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <SPI_EndRxTxTransaction+0x7c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1b      	ldr	r2, [pc, #108]	; (800328c <SPI_EndRxTxTransaction+0x80>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0d5b      	lsrs	r3, r3, #21
 8003224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003236:	d112      	bne.n	800325e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f7ff fef4 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0220 	orr.w	r2, r3, #32
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3b01      	subs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d0f2      	beq.n	800325e <SPI_EndRxTxTransaction+0x52>
 8003278:	e000      	b.n	800327c <SPI_EndRxTxTransaction+0x70>
        break;
 800327a:	bf00      	nop
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	165e9f81 	.word	0x165e9f81

08003290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e03f      	b.n	8003322 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fca6 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f929 	bl	800352c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af02      	add	r7, sp, #8
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b20      	cmp	r3, #32
 8003348:	d17c      	bne.n	8003444 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_Transmit+0x2c>
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e075      	b.n	8003446 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit+0x3e>
 8003364:	2302      	movs	r3, #2
 8003366:	e06e      	b.n	8003446 <HAL_UART_Transmit+0x11c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2221      	movs	r2, #33	; 0x21
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fd fdfd 	bl	8000f7c <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d108      	bne.n	80033ac <HAL_UART_Transmit+0x82>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e003      	b.n	80033b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033bc:	e02a      	b.n	8003414 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f840 	bl	800344e <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	3302      	adds	r3, #2
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e007      	b.n	8003406 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	3301      	adds	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1cf      	bne.n	80033be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f810 	bl	800344e <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b090      	sub	sp, #64	; 0x40
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345e:	e050      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d04c      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x30>
 800346e:	f7fd fd85 	bl	8000f7c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347a:	429a      	cmp	r2, r3
 800347c:	d241      	bcs.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349e:	637a      	str	r2, [r7, #52]	; 0x34
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	613b      	str	r3, [r7, #16]
   return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d2:	623a      	str	r2, [r7, #32]
 80034d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e00f      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d09f      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3740      	adds	r7, #64	; 0x40
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b0c0      	sub	sp, #256	; 0x100
 8003532:	af00      	add	r7, sp, #0
 8003534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	ea40 0301 	orr.w	r3, r0, r1
 8003554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003584:	f021 010c 	bic.w	r1, r1, #12
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	6999      	ldr	r1, [r3, #24]
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	ea40 0301 	orr.w	r3, r0, r1
 80035b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d005      	beq.n	80035cc <UART_SetConfig+0xa0>
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b8d      	ldr	r3, [pc, #564]	; (80037fc <UART_SetConfig+0x2d0>)
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d104      	bne.n	80035d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7fe f9e8 	bl	80019a0 <HAL_RCC_GetPCLK2Freq>
 80035d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d4:	e003      	b.n	80035de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7fe f9cf 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 80035da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	f040 810c 	bne.w	8003804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	1891      	adds	r1, r2, r2
 8003604:	65b9      	str	r1, [r7, #88]	; 0x58
 8003606:	415b      	adcs	r3, r3
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800360e:	4621      	mov	r1, r4
 8003610:	eb12 0801 	adds.w	r8, r2, r1
 8003614:	4629      	mov	r1, r5
 8003616:	eb43 0901 	adc.w	r9, r3, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	4623      	mov	r3, r4
 8003634:	eb18 0303 	adds.w	r3, r8, r3
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800363c:	462b      	mov	r3, r5
 800363e:	eb49 0303 	adc.w	r3, r9, r3
 8003642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800365a:	460b      	mov	r3, r1
 800365c:	18db      	adds	r3, r3, r3
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
 8003660:	4613      	mov	r3, r2
 8003662:	eb42 0303 	adc.w	r3, r2, r3
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
 8003668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800366c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003670:	f7fc fe1e 	bl	80002b0 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4b61      	ldr	r3, [pc, #388]	; (8003800 <UART_SetConfig+0x2d4>)
 800367a:	fba3 2302 	umull	r2, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	011c      	lsls	r4, r3, #4
 8003682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800368c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	1891      	adds	r1, r2, r2
 800369a:	64b9      	str	r1, [r7, #72]	; 0x48
 800369c:	415b      	adcs	r3, r3
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a4:	4641      	mov	r1, r8
 80036a6:	eb12 0a01 	adds.w	sl, r2, r1
 80036aa:	4649      	mov	r1, r9
 80036ac:	eb43 0b01 	adc.w	fp, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c4:	4692      	mov	sl, r2
 80036c6:	469b      	mov	fp, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	eb1a 0303 	adds.w	r3, sl, r3
 80036ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d2:	464b      	mov	r3, r9
 80036d4:	eb4b 0303 	adc.w	r3, fp, r3
 80036d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036f0:	460b      	mov	r3, r1
 80036f2:	18db      	adds	r3, r3, r3
 80036f4:	643b      	str	r3, [r7, #64]	; 0x40
 80036f6:	4613      	mov	r3, r2
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	647b      	str	r3, [r7, #68]	; 0x44
 80036fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003706:	f7fc fdd3 	bl	80002b0 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4611      	mov	r1, r2
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <UART_SetConfig+0x2d4>)
 8003712:	fba3 2301 	umull	r2, r3, r3, r1
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	; 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1acb      	subs	r3, r1, r3
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <UART_SetConfig+0x2d4>)
 8003728:	fba3 2302 	umull	r2, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003734:	441c      	add	r4, r3
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003750:	415b      	adcs	r3, r3
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003758:	4641      	mov	r1, r8
 800375a:	1851      	adds	r1, r2, r1
 800375c:	6339      	str	r1, [r7, #48]	; 0x30
 800375e:	4649      	mov	r1, r9
 8003760:	414b      	adcs	r3, r1
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003770:	4659      	mov	r1, fp
 8003772:	00cb      	lsls	r3, r1, #3
 8003774:	4651      	mov	r1, sl
 8003776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377a:	4651      	mov	r1, sl
 800377c:	00ca      	lsls	r2, r1, #3
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	4603      	mov	r3, r0
 8003784:	4642      	mov	r2, r8
 8003786:	189b      	adds	r3, r3, r2
 8003788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800378c:	464b      	mov	r3, r9
 800378e:	460a      	mov	r2, r1
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037ac:	460b      	mov	r3, r1
 80037ae:	18db      	adds	r3, r3, r3
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b2:	4613      	mov	r3, r2
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037c2:	f7fc fd75 	bl	80002b0 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <UART_SetConfig+0x2d4>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3332      	adds	r3, #50	; 0x32
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <UART_SetConfig+0x2d4>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4422      	add	r2, r4
 80037f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f4:	e105      	b.n	8003a02 <UART_SetConfig+0x4d6>
 80037f6:	bf00      	nop
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40011400 	.word	0x40011400
 8003800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003816:	4642      	mov	r2, r8
 8003818:	464b      	mov	r3, r9
 800381a:	1891      	adds	r1, r2, r2
 800381c:	6239      	str	r1, [r7, #32]
 800381e:	415b      	adcs	r3, r3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003826:	4641      	mov	r1, r8
 8003828:	1854      	adds	r4, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0501 	adc.w	r5, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	00eb      	lsls	r3, r5, #3
 800383a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	4614      	mov	r4, r2
 8003842:	461d      	mov	r5, r3
 8003844:	4643      	mov	r3, r8
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800384c:	464b      	mov	r3, r9
 800384e:	eb45 0303 	adc.w	r3, r5, r3
 8003852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003872:	4629      	mov	r1, r5
 8003874:	008b      	lsls	r3, r1, #2
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387c:	4621      	mov	r1, r4
 800387e:	008a      	lsls	r2, r1, #2
 8003880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003884:	f7fc fd14 	bl	80002b0 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <UART_SetConfig+0x4e4>)
 800388e:	fba3 2302 	umull	r2, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	011c      	lsls	r4, r3, #4
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	61b9      	str	r1, [r7, #24]
 80038b0:	415b      	adcs	r3, r3
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b8:	4641      	mov	r1, r8
 80038ba:	1851      	adds	r1, r2, r1
 80038bc:	6139      	str	r1, [r7, #16]
 80038be:	4649      	mov	r1, r9
 80038c0:	414b      	adcs	r3, r1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d0:	4659      	mov	r1, fp
 80038d2:	00cb      	lsls	r3, r1, #3
 80038d4:	4651      	mov	r1, sl
 80038d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038da:	4651      	mov	r1, sl
 80038dc:	00ca      	lsls	r2, r1, #3
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	4642      	mov	r2, r8
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ec:	464b      	mov	r3, r9
 80038ee:	460a      	mov	r2, r1
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	67bb      	str	r3, [r7, #120]	; 0x78
 8003902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003910:	4649      	mov	r1, r9
 8003912:	008b      	lsls	r3, r1, #2
 8003914:	4641      	mov	r1, r8
 8003916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391a:	4641      	mov	r1, r8
 800391c:	008a      	lsls	r2, r1, #2
 800391e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003922:	f7fc fcc5 	bl	80002b0 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <UART_SetConfig+0x4e4>)
 800392c:	fba3 1302 	umull	r1, r3, r3, r2
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	2164      	movs	r1, #100	; 0x64
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	3332      	adds	r3, #50	; 0x32
 800393e:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <UART_SetConfig+0x4e4>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394a:	441c      	add	r4, r3
 800394c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003950:	2200      	movs	r2, #0
 8003952:	673b      	str	r3, [r7, #112]	; 0x70
 8003954:	677a      	str	r2, [r7, #116]	; 0x74
 8003956:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	1891      	adds	r1, r2, r2
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	415b      	adcs	r3, r3
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800396a:	4641      	mov	r1, r8
 800396c:	1851      	adds	r1, r2, r1
 800396e:	6039      	str	r1, [r7, #0]
 8003970:	4649      	mov	r1, r9
 8003972:	414b      	adcs	r3, r1
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003982:	4659      	mov	r1, fp
 8003984:	00cb      	lsls	r3, r1, #3
 8003986:	4651      	mov	r1, sl
 8003988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398c:	4651      	mov	r1, sl
 800398e:	00ca      	lsls	r2, r1, #3
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	4603      	mov	r3, r0
 8003996:	4642      	mov	r2, r8
 8003998:	189b      	adds	r3, r3, r2
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68
 800399c:	464b      	mov	r3, r9
 800399e:	460a      	mov	r2, r1
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	663b      	str	r3, [r7, #96]	; 0x60
 80039b0:	667a      	str	r2, [r7, #100]	; 0x64
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039be:	4649      	mov	r1, r9
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4641      	mov	r1, r8
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4641      	mov	r1, r8
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039d0:	f7fc fc6e 	bl	80002b0 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <UART_SetConfig+0x4e4>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2164      	movs	r1, #100	; 0x64
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <UART_SetConfig+0x4e4>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4422      	add	r2, r4
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	bf00      	nop
 8003a04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0e:	bf00      	nop
 8003a10:	51eb851f 	.word	0x51eb851f

08003a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a14:	b084      	sub	sp, #16
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	f107 001c 	add.w	r0, r7, #28
 8003a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d122      	bne.n	8003a72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa9c 	bl	8003fa4 <USB_CoreReset>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e01a      	b.n	8003aa8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa90 	bl	8003fa4 <USB_CoreReset>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9a:	e005      	b.n	8003aa8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10b      	bne.n	8003ac6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f043 0206 	orr.w	r2, r3, #6
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	4770      	bx	lr

08003ad6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d115      	bne.n	8003b46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f7fd fa34 	bl	8000f94 <HAL_Delay>
      ms++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa28 	bl	8003f88 <USB_GetMode>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d01e      	beq.n	8003b7c <USB_SetCurrentMode+0x84>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b31      	cmp	r3, #49	; 0x31
 8003b42:	d9f0      	bls.n	8003b26 <USB_SetCurrentMode+0x2e>
 8003b44:	e01a      	b.n	8003b7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d115      	bne.n	8003b78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fd fa1b 	bl	8000f94 <HAL_Delay>
      ms++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa0f 	bl	8003f88 <USB_GetMode>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <USB_SetCurrentMode+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b31      	cmp	r3, #49	; 0x31
 8003b74:	d9f0      	bls.n	8003b58 <USB_SetCurrentMode+0x60>
 8003b76:	e001      	b.n	8003b7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e005      	b.n	8003b88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b32      	cmp	r3, #50	; 0x32
 8003b80:	d101      	bne.n	8003b86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b90:	b084      	sub	sp, #16
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e009      	b.n	8003bc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3340      	adds	r3, #64	; 0x40
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b0e      	cmp	r3, #14
 8003bc8:	d9f2      	bls.n	8003bb0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d11c      	bne.n	8003c0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e005      	b.n	8003c16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c28:	4619      	mov	r1, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c30:	461a      	mov	r2, r3
 8003c32:	680b      	ldr	r3, [r1, #0]
 8003c34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10c      	bne.n	8003c56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c42:	2100      	movs	r1, #0
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f965 	bl	8003f14 <USB_SetDevSpeed>
 8003c4a:	e008      	b.n	8003c5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f960 	bl	8003f14 <USB_SetDevSpeed>
 8003c54:	e003      	b.n	8003c5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c56:	2103      	movs	r1, #3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f95b 	bl	8003f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c5e:	2110      	movs	r1, #16
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8f3 	bl	8003e4c <USB_FlushTxFifo>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f91f 	bl	8003eb4 <USB_FlushRxFifo>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	461a      	mov	r2, r3
 8003c88:	2300      	movs	r3, #0
 8003c8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	461a      	mov	r2, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e043      	b.n	8003d32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc0:	d118      	bne.n	8003cf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e013      	b.n	8003d06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	461a      	mov	r2, r3
 8003cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e008      	b.n	8003d06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	461a      	mov	r2, r3
 8003d14:	2300      	movs	r3, #0
 8003d16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d3b7      	bcc.n	8003caa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e043      	b.n	8003dc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d56:	d118      	bne.n	8003d8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e013      	b.n	8003d9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e008      	b.n	8003d9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	461a      	mov	r2, r3
 8003daa:	2300      	movs	r3, #0
 8003dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3b7      	bcc.n	8003d40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003df0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f043 0210 	orr.w	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699a      	ldr	r2, [r3, #24]
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <USB_DevInit+0x2b8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f043 0208 	orr.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e44:	b004      	add	sp, #16
 8003e46:	4770      	bx	lr
 8003e48:	803c3800 	.word	0x803c3800

08003e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <USB_FlushTxFifo+0x64>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e01b      	b.n	8003ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	daf2      	bge.n	8003e5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <USB_FlushTxFifo+0x64>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e006      	b.n	8003ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d0f0      	beq.n	8003e84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	00030d40 	.word	0x00030d40

08003eb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <USB_FlushRxFifo+0x5c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e018      	b.n	8003f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	daf2      	bge.n	8003ec0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <USB_FlushRxFifo+0x5c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e006      	b.n	8003f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d0f0      	beq.n	8003ee4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	00030d40 	.word	0x00030d40

08003f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f60:	f023 0303 	bic.w	r3, r3, #3
 8003f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0301 	and.w	r3, r3, #1
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <USB_CoreReset+0x64>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e01b      	b.n	8003ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	daf2      	bge.n	8003fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <USB_CoreReset+0x64>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e006      	b.n	8003ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d0f0      	beq.n	8003fda <USB_CoreReset+0x36>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	00030d40 	.word	0x00030d40

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	; (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4d0d      	ldr	r5, [pc, #52]	; (8004050 <__libc_init_array+0x38>)
 800401c:	4c0d      	ldr	r4, [pc, #52]	; (8004054 <__libc_init_array+0x3c>)
 800401e:	1b64      	subs	r4, r4, r5
 8004020:	10a4      	asrs	r4, r4, #2
 8004022:	2600      	movs	r6, #0
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	4d0b      	ldr	r5, [pc, #44]	; (8004058 <__libc_init_array+0x40>)
 800402a:	4c0c      	ldr	r4, [pc, #48]	; (800405c <__libc_init_array+0x44>)
 800402c:	f000 fc8e 	bl	800494c <_init>
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	2600      	movs	r6, #0
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080049cc 	.word	0x080049cc
 8004054:	080049cc 	.word	0x080049cc
 8004058:	080049cc 	.word	0x080049cc
 800405c:	080049d0 	.word	0x080049d0

08004060 <memset>:
 8004060:	4402      	add	r2, r0
 8004062:	4603      	mov	r3, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <siprintf>:
 8004070:	b40e      	push	{r1, r2, r3}
 8004072:	b500      	push	{lr}
 8004074:	b09c      	sub	sp, #112	; 0x70
 8004076:	ab1d      	add	r3, sp, #116	; 0x74
 8004078:	9002      	str	r0, [sp, #8]
 800407a:	9006      	str	r0, [sp, #24]
 800407c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004080:	4809      	ldr	r0, [pc, #36]	; (80040a8 <siprintf+0x38>)
 8004082:	9107      	str	r1, [sp, #28]
 8004084:	9104      	str	r1, [sp, #16]
 8004086:	4909      	ldr	r1, [pc, #36]	; (80040ac <siprintf+0x3c>)
 8004088:	f853 2b04 	ldr.w	r2, [r3], #4
 800408c:	9105      	str	r1, [sp, #20]
 800408e:	6800      	ldr	r0, [r0, #0]
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	a902      	add	r1, sp, #8
 8004094:	f000 f868 	bl	8004168 <_svfiprintf_r>
 8004098:	9b02      	ldr	r3, [sp, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	b01c      	add	sp, #112	; 0x70
 80040a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a4:	b003      	add	sp, #12
 80040a6:	4770      	bx	lr
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	ffff0208 	.word	0xffff0208

080040b0 <__ssputs_r>:
 80040b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	688e      	ldr	r6, [r1, #8]
 80040b6:	429e      	cmp	r6, r3
 80040b8:	4682      	mov	sl, r0
 80040ba:	460c      	mov	r4, r1
 80040bc:	4690      	mov	r8, r2
 80040be:	461f      	mov	r7, r3
 80040c0:	d838      	bhi.n	8004134 <__ssputs_r+0x84>
 80040c2:	898a      	ldrh	r2, [r1, #12]
 80040c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c8:	d032      	beq.n	8004130 <__ssputs_r+0x80>
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	6909      	ldr	r1, [r1, #16]
 80040ce:	eba5 0901 	sub.w	r9, r5, r1
 80040d2:	6965      	ldr	r5, [r4, #20]
 80040d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040dc:	3301      	adds	r3, #1
 80040de:	444b      	add	r3, r9
 80040e0:	106d      	asrs	r5, r5, #1
 80040e2:	429d      	cmp	r5, r3
 80040e4:	bf38      	it	cc
 80040e6:	461d      	movcc	r5, r3
 80040e8:	0553      	lsls	r3, r2, #21
 80040ea:	d531      	bpl.n	8004150 <__ssputs_r+0xa0>
 80040ec:	4629      	mov	r1, r5
 80040ee:	f000 fb63 	bl	80047b8 <_malloc_r>
 80040f2:	4606      	mov	r6, r0
 80040f4:	b950      	cbnz	r0, 800410c <__ssputs_r+0x5c>
 80040f6:	230c      	movs	r3, #12
 80040f8:	f8ca 3000 	str.w	r3, [sl]
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	6921      	ldr	r1, [r4, #16]
 800410e:	464a      	mov	r2, r9
 8004110:	f000 fabe 	bl	8004690 <memcpy>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	6126      	str	r6, [r4, #16]
 8004122:	6165      	str	r5, [r4, #20]
 8004124:	444e      	add	r6, r9
 8004126:	eba5 0509 	sub.w	r5, r5, r9
 800412a:	6026      	str	r6, [r4, #0]
 800412c:	60a5      	str	r5, [r4, #8]
 800412e:	463e      	mov	r6, r7
 8004130:	42be      	cmp	r6, r7
 8004132:	d900      	bls.n	8004136 <__ssputs_r+0x86>
 8004134:	463e      	mov	r6, r7
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	4632      	mov	r2, r6
 800413a:	4641      	mov	r1, r8
 800413c:	f000 fab6 	bl	80046ac <memmove>
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	1b9b      	subs	r3, r3, r6
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	4433      	add	r3, r6
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	2000      	movs	r0, #0
 800414e:	e7db      	b.n	8004108 <__ssputs_r+0x58>
 8004150:	462a      	mov	r2, r5
 8004152:	f000 fba5 	bl	80048a0 <_realloc_r>
 8004156:	4606      	mov	r6, r0
 8004158:	2800      	cmp	r0, #0
 800415a:	d1e1      	bne.n	8004120 <__ssputs_r+0x70>
 800415c:	6921      	ldr	r1, [r4, #16]
 800415e:	4650      	mov	r0, sl
 8004160:	f000 fabe 	bl	80046e0 <_free_r>
 8004164:	e7c7      	b.n	80040f6 <__ssputs_r+0x46>
	...

08004168 <_svfiprintf_r>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	4698      	mov	r8, r3
 800416e:	898b      	ldrh	r3, [r1, #12]
 8004170:	061b      	lsls	r3, r3, #24
 8004172:	b09d      	sub	sp, #116	; 0x74
 8004174:	4607      	mov	r7, r0
 8004176:	460d      	mov	r5, r1
 8004178:	4614      	mov	r4, r2
 800417a:	d50e      	bpl.n	800419a <_svfiprintf_r+0x32>
 800417c:	690b      	ldr	r3, [r1, #16]
 800417e:	b963      	cbnz	r3, 800419a <_svfiprintf_r+0x32>
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	f000 fb19 	bl	80047b8 <_malloc_r>
 8004186:	6028      	str	r0, [r5, #0]
 8004188:	6128      	str	r0, [r5, #16]
 800418a:	b920      	cbnz	r0, 8004196 <_svfiprintf_r+0x2e>
 800418c:	230c      	movs	r3, #12
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e0d1      	b.n	800433a <_svfiprintf_r+0x1d2>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	616b      	str	r3, [r5, #20]
 800419a:	2300      	movs	r3, #0
 800419c:	9309      	str	r3, [sp, #36]	; 0x24
 800419e:	2320      	movs	r3, #32
 80041a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a8:	2330      	movs	r3, #48	; 0x30
 80041aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004354 <_svfiprintf_r+0x1ec>
 80041ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b2:	f04f 0901 	mov.w	r9, #1
 80041b6:	4623      	mov	r3, r4
 80041b8:	469a      	mov	sl, r3
 80041ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041be:	b10a      	cbz	r2, 80041c4 <_svfiprintf_r+0x5c>
 80041c0:	2a25      	cmp	r2, #37	; 0x25
 80041c2:	d1f9      	bne.n	80041b8 <_svfiprintf_r+0x50>
 80041c4:	ebba 0b04 	subs.w	fp, sl, r4
 80041c8:	d00b      	beq.n	80041e2 <_svfiprintf_r+0x7a>
 80041ca:	465b      	mov	r3, fp
 80041cc:	4622      	mov	r2, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	4638      	mov	r0, r7
 80041d2:	f7ff ff6d 	bl	80040b0 <__ssputs_r>
 80041d6:	3001      	adds	r0, #1
 80041d8:	f000 80aa 	beq.w	8004330 <_svfiprintf_r+0x1c8>
 80041dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041de:	445a      	add	r2, fp
 80041e0:	9209      	str	r2, [sp, #36]	; 0x24
 80041e2:	f89a 3000 	ldrb.w	r3, [sl]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a2 	beq.w	8004330 <_svfiprintf_r+0x1c8>
 80041ec:	2300      	movs	r3, #0
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f6:	f10a 0a01 	add.w	sl, sl, #1
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	9307      	str	r3, [sp, #28]
 80041fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004202:	931a      	str	r3, [sp, #104]	; 0x68
 8004204:	4654      	mov	r4, sl
 8004206:	2205      	movs	r2, #5
 8004208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420c:	4851      	ldr	r0, [pc, #324]	; (8004354 <_svfiprintf_r+0x1ec>)
 800420e:	f7fb ffff 	bl	8000210 <memchr>
 8004212:	9a04      	ldr	r2, [sp, #16]
 8004214:	b9d8      	cbnz	r0, 800424e <_svfiprintf_r+0xe6>
 8004216:	06d0      	lsls	r0, r2, #27
 8004218:	bf44      	itt	mi
 800421a:	2320      	movmi	r3, #32
 800421c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004220:	0711      	lsls	r1, r2, #28
 8004222:	bf44      	itt	mi
 8004224:	232b      	movmi	r3, #43	; 0x2b
 8004226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422a:	f89a 3000 	ldrb.w	r3, [sl]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d015      	beq.n	800425e <_svfiprintf_r+0xf6>
 8004232:	9a07      	ldr	r2, [sp, #28]
 8004234:	4654      	mov	r4, sl
 8004236:	2000      	movs	r0, #0
 8004238:	f04f 0c0a 	mov.w	ip, #10
 800423c:	4621      	mov	r1, r4
 800423e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004242:	3b30      	subs	r3, #48	; 0x30
 8004244:	2b09      	cmp	r3, #9
 8004246:	d94e      	bls.n	80042e6 <_svfiprintf_r+0x17e>
 8004248:	b1b0      	cbz	r0, 8004278 <_svfiprintf_r+0x110>
 800424a:	9207      	str	r2, [sp, #28]
 800424c:	e014      	b.n	8004278 <_svfiprintf_r+0x110>
 800424e:	eba0 0308 	sub.w	r3, r0, r8
 8004252:	fa09 f303 	lsl.w	r3, r9, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	46a2      	mov	sl, r4
 800425c:	e7d2      	b.n	8004204 <_svfiprintf_r+0x9c>
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	1d19      	adds	r1, r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	9103      	str	r1, [sp, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	bfbb      	ittet	lt
 800426a:	425b      	neglt	r3, r3
 800426c:	f042 0202 	orrlt.w	r2, r2, #2
 8004270:	9307      	strge	r3, [sp, #28]
 8004272:	9307      	strlt	r3, [sp, #28]
 8004274:	bfb8      	it	lt
 8004276:	9204      	strlt	r2, [sp, #16]
 8004278:	7823      	ldrb	r3, [r4, #0]
 800427a:	2b2e      	cmp	r3, #46	; 0x2e
 800427c:	d10c      	bne.n	8004298 <_svfiprintf_r+0x130>
 800427e:	7863      	ldrb	r3, [r4, #1]
 8004280:	2b2a      	cmp	r3, #42	; 0x2a
 8004282:	d135      	bne.n	80042f0 <_svfiprintf_r+0x188>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295
 8004294:	3402      	adds	r4, #2
 8004296:	9305      	str	r3, [sp, #20]
 8004298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004364 <_svfiprintf_r+0x1fc>
 800429c:	7821      	ldrb	r1, [r4, #0]
 800429e:	2203      	movs	r2, #3
 80042a0:	4650      	mov	r0, sl
 80042a2:	f7fb ffb5 	bl	8000210 <memchr>
 80042a6:	b140      	cbz	r0, 80042ba <_svfiprintf_r+0x152>
 80042a8:	2340      	movs	r3, #64	; 0x40
 80042aa:	eba0 000a 	sub.w	r0, r0, sl
 80042ae:	fa03 f000 	lsl.w	r0, r3, r0
 80042b2:	9b04      	ldr	r3, [sp, #16]
 80042b4:	4303      	orrs	r3, r0
 80042b6:	3401      	adds	r4, #1
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042be:	4826      	ldr	r0, [pc, #152]	; (8004358 <_svfiprintf_r+0x1f0>)
 80042c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c4:	2206      	movs	r2, #6
 80042c6:	f7fb ffa3 	bl	8000210 <memchr>
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d038      	beq.n	8004340 <_svfiprintf_r+0x1d8>
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <_svfiprintf_r+0x1f4>)
 80042d0:	bb1b      	cbnz	r3, 800431a <_svfiprintf_r+0x1b2>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	3307      	adds	r3, #7
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	3308      	adds	r3, #8
 80042dc:	9303      	str	r3, [sp, #12]
 80042de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e0:	4433      	add	r3, r6
 80042e2:	9309      	str	r3, [sp, #36]	; 0x24
 80042e4:	e767      	b.n	80041b6 <_svfiprintf_r+0x4e>
 80042e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ea:	460c      	mov	r4, r1
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7a5      	b.n	800423c <_svfiprintf_r+0xd4>
 80042f0:	2300      	movs	r3, #0
 80042f2:	3401      	adds	r4, #1
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0c0a 	mov.w	ip, #10
 80042fc:	4620      	mov	r0, r4
 80042fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004302:	3a30      	subs	r2, #48	; 0x30
 8004304:	2a09      	cmp	r2, #9
 8004306:	d903      	bls.n	8004310 <_svfiprintf_r+0x1a8>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0c5      	beq.n	8004298 <_svfiprintf_r+0x130>
 800430c:	9105      	str	r1, [sp, #20]
 800430e:	e7c3      	b.n	8004298 <_svfiprintf_r+0x130>
 8004310:	fb0c 2101 	mla	r1, ip, r1, r2
 8004314:	4604      	mov	r4, r0
 8004316:	2301      	movs	r3, #1
 8004318:	e7f0      	b.n	80042fc <_svfiprintf_r+0x194>
 800431a:	ab03      	add	r3, sp, #12
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	462a      	mov	r2, r5
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_svfiprintf_r+0x1f8>)
 8004322:	a904      	add	r1, sp, #16
 8004324:	4638      	mov	r0, r7
 8004326:	f3af 8000 	nop.w
 800432a:	1c42      	adds	r2, r0, #1
 800432c:	4606      	mov	r6, r0
 800432e:	d1d6      	bne.n	80042de <_svfiprintf_r+0x176>
 8004330:	89ab      	ldrh	r3, [r5, #12]
 8004332:	065b      	lsls	r3, r3, #25
 8004334:	f53f af2c 	bmi.w	8004190 <_svfiprintf_r+0x28>
 8004338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433a:	b01d      	add	sp, #116	; 0x74
 800433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004340:	ab03      	add	r3, sp, #12
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	462a      	mov	r2, r5
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <_svfiprintf_r+0x1f8>)
 8004348:	a904      	add	r1, sp, #16
 800434a:	4638      	mov	r0, r7
 800434c:	f000 f87a 	bl	8004444 <_printf_i>
 8004350:	e7eb      	b.n	800432a <_svfiprintf_r+0x1c2>
 8004352:	bf00      	nop
 8004354:	08004990 	.word	0x08004990
 8004358:	0800499a 	.word	0x0800499a
 800435c:	00000000 	.word	0x00000000
 8004360:	080040b1 	.word	0x080040b1
 8004364:	08004996 	.word	0x08004996

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4699      	mov	r9, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004378:	4293      	cmp	r3, r2
 800437a:	bfb8      	it	lt
 800437c:	4613      	movlt	r3, r2
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004384:	4607      	mov	r7, r0
 8004386:	460c      	mov	r4, r1
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc26      	bgt.n	80043fe <_printf_common+0x96>
 80043b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d42b      	bmi.n	8004418 <_printf_common+0xb0>
 80043c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c4:	4649      	mov	r1, r9
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d01e      	beq.n	800440c <_printf_common+0xa4>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	68e5      	ldr	r5, [r4, #12]
 80043d2:	6832      	ldr	r2, [r6, #0]
 80043d4:	f003 0306 	and.w	r3, r3, #6
 80043d8:	2b04      	cmp	r3, #4
 80043da:	bf08      	it	eq
 80043dc:	1aad      	subeq	r5, r5, r2
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	bf0c      	ite	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	2500      	movne	r5, #0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bfc4      	itt	gt
 80043ee:	1a9b      	subgt	r3, r3, r2
 80043f0:	18ed      	addgt	r5, r5, r3
 80043f2:	2600      	movs	r6, #0
 80043f4:	341a      	adds	r4, #26
 80043f6:	42b5      	cmp	r5, r6
 80043f8:	d11a      	bne.n	8004430 <_printf_common+0xc8>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e008      	b.n	8004410 <_printf_common+0xa8>
 80043fe:	2301      	movs	r3, #1
 8004400:	4652      	mov	r2, sl
 8004402:	4649      	mov	r1, r9
 8004404:	4638      	mov	r0, r7
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d103      	bne.n	8004414 <_printf_common+0xac>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	3501      	adds	r5, #1
 8004416:	e7c6      	b.n	80043a6 <_printf_common+0x3e>
 8004418:	18e1      	adds	r1, r4, r3
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	2030      	movs	r0, #48	; 0x30
 800441e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004422:	4422      	add	r2, r4
 8004424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442c:	3302      	adds	r3, #2
 800442e:	e7c7      	b.n	80043c0 <_printf_common+0x58>
 8004430:	2301      	movs	r3, #1
 8004432:	4622      	mov	r2, r4
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d0e6      	beq.n	800440c <_printf_common+0xa4>
 800443e:	3601      	adds	r6, #1
 8004440:	e7d9      	b.n	80043f6 <_printf_common+0x8e>
	...

08004444 <_printf_i>:
 8004444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	7e0f      	ldrb	r7, [r1, #24]
 800444a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800444c:	2f78      	cmp	r7, #120	; 0x78
 800444e:	4691      	mov	r9, r2
 8004450:	4680      	mov	r8, r0
 8004452:	460c      	mov	r4, r1
 8004454:	469a      	mov	sl, r3
 8004456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800445a:	d807      	bhi.n	800446c <_printf_i+0x28>
 800445c:	2f62      	cmp	r7, #98	; 0x62
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x32>
 8004460:	2f00      	cmp	r7, #0
 8004462:	f000 80d8 	beq.w	8004616 <_printf_i+0x1d2>
 8004466:	2f58      	cmp	r7, #88	; 0x58
 8004468:	f000 80a3 	beq.w	80045b2 <_printf_i+0x16e>
 800446c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004474:	e03a      	b.n	80044ec <_printf_i+0xa8>
 8004476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800447a:	2b15      	cmp	r3, #21
 800447c:	d8f6      	bhi.n	800446c <_printf_i+0x28>
 800447e:	a101      	add	r1, pc, #4	; (adr r1, 8004484 <_printf_i+0x40>)
 8004480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044f1 	.word	0x080044f1
 800448c:	0800446d 	.word	0x0800446d
 8004490:	0800446d 	.word	0x0800446d
 8004494:	0800446d 	.word	0x0800446d
 8004498:	0800446d 	.word	0x0800446d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800446d 	.word	0x0800446d
 80044a4:	0800446d 	.word	0x0800446d
 80044a8:	0800446d 	.word	0x0800446d
 80044ac:	0800446d 	.word	0x0800446d
 80044b0:	080045fd 	.word	0x080045fd
 80044b4:	08004521 	.word	0x08004521
 80044b8:	080045df 	.word	0x080045df
 80044bc:	0800446d 	.word	0x0800446d
 80044c0:	0800446d 	.word	0x0800446d
 80044c4:	0800461f 	.word	0x0800461f
 80044c8:	0800446d 	.word	0x0800446d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800446d 	.word	0x0800446d
 80044d4:	0800446d 	.word	0x0800446d
 80044d8:	080045e7 	.word	0x080045e7
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	602a      	str	r2, [r5, #0]
 80044e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0a3      	b.n	8004638 <_printf_i+0x1f4>
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	6829      	ldr	r1, [r5, #0]
 80044f4:	0606      	lsls	r6, r0, #24
 80044f6:	f101 0304 	add.w	r3, r1, #4
 80044fa:	d50a      	bpl.n	8004512 <_printf_i+0xce>
 80044fc:	680e      	ldr	r6, [r1, #0]
 80044fe:	602b      	str	r3, [r5, #0]
 8004500:	2e00      	cmp	r6, #0
 8004502:	da03      	bge.n	800450c <_printf_i+0xc8>
 8004504:	232d      	movs	r3, #45	; 0x2d
 8004506:	4276      	negs	r6, r6
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	485e      	ldr	r0, [pc, #376]	; (8004688 <_printf_i+0x244>)
 800450e:	230a      	movs	r3, #10
 8004510:	e019      	b.n	8004546 <_printf_i+0x102>
 8004512:	680e      	ldr	r6, [r1, #0]
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800451a:	bf18      	it	ne
 800451c:	b236      	sxthne	r6, r6
 800451e:	e7ef      	b.n	8004500 <_printf_i+0xbc>
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	6029      	str	r1, [r5, #0]
 8004528:	0601      	lsls	r1, r0, #24
 800452a:	d501      	bpl.n	8004530 <_printf_i+0xec>
 800452c:	681e      	ldr	r6, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0xf2>
 8004530:	0646      	lsls	r6, r0, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0xe8>
 8004534:	881e      	ldrh	r6, [r3, #0]
 8004536:	4854      	ldr	r0, [pc, #336]	; (8004688 <_printf_i+0x244>)
 8004538:	2f6f      	cmp	r7, #111	; 0x6f
 800453a:	bf0c      	ite	eq
 800453c:	2308      	moveq	r3, #8
 800453e:	230a      	movne	r3, #10
 8004540:	2100      	movs	r1, #0
 8004542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004546:	6865      	ldr	r5, [r4, #4]
 8004548:	60a5      	str	r5, [r4, #8]
 800454a:	2d00      	cmp	r5, #0
 800454c:	bfa2      	ittt	ge
 800454e:	6821      	ldrge	r1, [r4, #0]
 8004550:	f021 0104 	bicge.w	r1, r1, #4
 8004554:	6021      	strge	r1, [r4, #0]
 8004556:	b90e      	cbnz	r6, 800455c <_printf_i+0x118>
 8004558:	2d00      	cmp	r5, #0
 800455a:	d04d      	beq.n	80045f8 <_printf_i+0x1b4>
 800455c:	4615      	mov	r5, r2
 800455e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004562:	fb03 6711 	mls	r7, r3, r1, r6
 8004566:	5dc7      	ldrb	r7, [r0, r7]
 8004568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800456c:	4637      	mov	r7, r6
 800456e:	42bb      	cmp	r3, r7
 8004570:	460e      	mov	r6, r1
 8004572:	d9f4      	bls.n	800455e <_printf_i+0x11a>
 8004574:	2b08      	cmp	r3, #8
 8004576:	d10b      	bne.n	8004590 <_printf_i+0x14c>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	07de      	lsls	r6, r3, #31
 800457c:	d508      	bpl.n	8004590 <_printf_i+0x14c>
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	6861      	ldr	r1, [r4, #4]
 8004582:	4299      	cmp	r1, r3
 8004584:	bfde      	ittt	le
 8004586:	2330      	movle	r3, #48	; 0x30
 8004588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800458c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004590:	1b52      	subs	r2, r2, r5
 8004592:	6122      	str	r2, [r4, #16]
 8004594:	f8cd a000 	str.w	sl, [sp]
 8004598:	464b      	mov	r3, r9
 800459a:	aa03      	add	r2, sp, #12
 800459c:	4621      	mov	r1, r4
 800459e:	4640      	mov	r0, r8
 80045a0:	f7ff fee2 	bl	8004368 <_printf_common>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d14c      	bne.n	8004642 <_printf_i+0x1fe>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	b004      	add	sp, #16
 80045ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b2:	4835      	ldr	r0, [pc, #212]	; (8004688 <_printf_i+0x244>)
 80045b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045b8:	6829      	ldr	r1, [r5, #0]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80045c0:	6029      	str	r1, [r5, #0]
 80045c2:	061d      	lsls	r5, r3, #24
 80045c4:	d514      	bpl.n	80045f0 <_printf_i+0x1ac>
 80045c6:	07df      	lsls	r7, r3, #31
 80045c8:	bf44      	itt	mi
 80045ca:	f043 0320 	orrmi.w	r3, r3, #32
 80045ce:	6023      	strmi	r3, [r4, #0]
 80045d0:	b91e      	cbnz	r6, 80045da <_printf_i+0x196>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	f023 0320 	bic.w	r3, r3, #32
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	2310      	movs	r3, #16
 80045dc:	e7b0      	b.n	8004540 <_printf_i+0xfc>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	2378      	movs	r3, #120	; 0x78
 80045e8:	4828      	ldr	r0, [pc, #160]	; (800468c <_printf_i+0x248>)
 80045ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ee:	e7e3      	b.n	80045b8 <_printf_i+0x174>
 80045f0:	0659      	lsls	r1, r3, #25
 80045f2:	bf48      	it	mi
 80045f4:	b2b6      	uxthmi	r6, r6
 80045f6:	e7e6      	b.n	80045c6 <_printf_i+0x182>
 80045f8:	4615      	mov	r5, r2
 80045fa:	e7bb      	b.n	8004574 <_printf_i+0x130>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	6826      	ldr	r6, [r4, #0]
 8004600:	6961      	ldr	r1, [r4, #20]
 8004602:	1d18      	adds	r0, r3, #4
 8004604:	6028      	str	r0, [r5, #0]
 8004606:	0635      	lsls	r5, r6, #24
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	d501      	bpl.n	8004610 <_printf_i+0x1cc>
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	e002      	b.n	8004616 <_printf_i+0x1d2>
 8004610:	0670      	lsls	r0, r6, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0x1c8>
 8004614:	8019      	strh	r1, [r3, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	4615      	mov	r5, r2
 800461c:	e7ba      	b.n	8004594 <_printf_i+0x150>
 800461e:	682b      	ldr	r3, [r5, #0]
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	681d      	ldr	r5, [r3, #0]
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	2100      	movs	r1, #0
 800462a:	4628      	mov	r0, r5
 800462c:	f7fb fdf0 	bl	8000210 <memchr>
 8004630:	b108      	cbz	r0, 8004636 <_printf_i+0x1f2>
 8004632:	1b40      	subs	r0, r0, r5
 8004634:	6060      	str	r0, [r4, #4]
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	2300      	movs	r3, #0
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004640:	e7a8      	b.n	8004594 <_printf_i+0x150>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	462a      	mov	r2, r5
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	47d0      	blx	sl
 800464c:	3001      	adds	r0, #1
 800464e:	d0ab      	beq.n	80045a8 <_printf_i+0x164>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	079b      	lsls	r3, r3, #30
 8004654:	d413      	bmi.n	800467e <_printf_i+0x23a>
 8004656:	68e0      	ldr	r0, [r4, #12]
 8004658:	9b03      	ldr	r3, [sp, #12]
 800465a:	4298      	cmp	r0, r3
 800465c:	bfb8      	it	lt
 800465e:	4618      	movlt	r0, r3
 8004660:	e7a4      	b.n	80045ac <_printf_i+0x168>
 8004662:	2301      	movs	r3, #1
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	47d0      	blx	sl
 800466c:	3001      	adds	r0, #1
 800466e:	d09b      	beq.n	80045a8 <_printf_i+0x164>
 8004670:	3501      	adds	r5, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	9903      	ldr	r1, [sp, #12]
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	42ab      	cmp	r3, r5
 800467a:	dcf2      	bgt.n	8004662 <_printf_i+0x21e>
 800467c:	e7eb      	b.n	8004656 <_printf_i+0x212>
 800467e:	2500      	movs	r5, #0
 8004680:	f104 0619 	add.w	r6, r4, #25
 8004684:	e7f5      	b.n	8004672 <_printf_i+0x22e>
 8004686:	bf00      	nop
 8004688:	080049a1 	.word	0x080049a1
 800468c:	080049b2 	.word	0x080049b2

08004690 <memcpy>:
 8004690:	440a      	add	r2, r1
 8004692:	4291      	cmp	r1, r2
 8004694:	f100 33ff 	add.w	r3, r0, #4294967295
 8004698:	d100      	bne.n	800469c <memcpy+0xc>
 800469a:	4770      	bx	lr
 800469c:	b510      	push	{r4, lr}
 800469e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a6:	4291      	cmp	r1, r2
 80046a8:	d1f9      	bne.n	800469e <memcpy+0xe>
 80046aa:	bd10      	pop	{r4, pc}

080046ac <memmove>:
 80046ac:	4288      	cmp	r0, r1
 80046ae:	b510      	push	{r4, lr}
 80046b0:	eb01 0402 	add.w	r4, r1, r2
 80046b4:	d902      	bls.n	80046bc <memmove+0x10>
 80046b6:	4284      	cmp	r4, r0
 80046b8:	4623      	mov	r3, r4
 80046ba:	d807      	bhi.n	80046cc <memmove+0x20>
 80046bc:	1e43      	subs	r3, r0, #1
 80046be:	42a1      	cmp	r1, r4
 80046c0:	d008      	beq.n	80046d4 <memmove+0x28>
 80046c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ca:	e7f8      	b.n	80046be <memmove+0x12>
 80046cc:	4402      	add	r2, r0
 80046ce:	4601      	mov	r1, r0
 80046d0:	428a      	cmp	r2, r1
 80046d2:	d100      	bne.n	80046d6 <memmove+0x2a>
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046de:	e7f7      	b.n	80046d0 <memmove+0x24>

080046e0 <_free_r>:
 80046e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046e2:	2900      	cmp	r1, #0
 80046e4:	d044      	beq.n	8004770 <_free_r+0x90>
 80046e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ea:	9001      	str	r0, [sp, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f1a1 0404 	sub.w	r4, r1, #4
 80046f2:	bfb8      	it	lt
 80046f4:	18e4      	addlt	r4, r4, r3
 80046f6:	f000 f913 	bl	8004920 <__malloc_lock>
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <_free_r+0x94>)
 80046fc:	9801      	ldr	r0, [sp, #4]
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	b933      	cbnz	r3, 8004710 <_free_r+0x30>
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	6014      	str	r4, [r2, #0]
 8004706:	b003      	add	sp, #12
 8004708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800470c:	f000 b90e 	b.w	800492c <__malloc_unlock>
 8004710:	42a3      	cmp	r3, r4
 8004712:	d908      	bls.n	8004726 <_free_r+0x46>
 8004714:	6825      	ldr	r5, [r4, #0]
 8004716:	1961      	adds	r1, r4, r5
 8004718:	428b      	cmp	r3, r1
 800471a:	bf01      	itttt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	1949      	addeq	r1, r1, r5
 8004722:	6021      	streq	r1, [r4, #0]
 8004724:	e7ed      	b.n	8004702 <_free_r+0x22>
 8004726:	461a      	mov	r2, r3
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	b10b      	cbz	r3, 8004730 <_free_r+0x50>
 800472c:	42a3      	cmp	r3, r4
 800472e:	d9fa      	bls.n	8004726 <_free_r+0x46>
 8004730:	6811      	ldr	r1, [r2, #0]
 8004732:	1855      	adds	r5, r2, r1
 8004734:	42a5      	cmp	r5, r4
 8004736:	d10b      	bne.n	8004750 <_free_r+0x70>
 8004738:	6824      	ldr	r4, [r4, #0]
 800473a:	4421      	add	r1, r4
 800473c:	1854      	adds	r4, r2, r1
 800473e:	42a3      	cmp	r3, r4
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	d1e0      	bne.n	8004706 <_free_r+0x26>
 8004744:	681c      	ldr	r4, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	6053      	str	r3, [r2, #4]
 800474a:	4421      	add	r1, r4
 800474c:	6011      	str	r1, [r2, #0]
 800474e:	e7da      	b.n	8004706 <_free_r+0x26>
 8004750:	d902      	bls.n	8004758 <_free_r+0x78>
 8004752:	230c      	movs	r3, #12
 8004754:	6003      	str	r3, [r0, #0]
 8004756:	e7d6      	b.n	8004706 <_free_r+0x26>
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	1961      	adds	r1, r4, r5
 800475c:	428b      	cmp	r3, r1
 800475e:	bf04      	itt	eq
 8004760:	6819      	ldreq	r1, [r3, #0]
 8004762:	685b      	ldreq	r3, [r3, #4]
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	bf04      	itt	eq
 8004768:	1949      	addeq	r1, r1, r5
 800476a:	6021      	streq	r1, [r4, #0]
 800476c:	6054      	str	r4, [r2, #4]
 800476e:	e7ca      	b.n	8004706 <_free_r+0x26>
 8004770:	b003      	add	sp, #12
 8004772:	bd30      	pop	{r4, r5, pc}
 8004774:	2000063c 	.word	0x2000063c

08004778 <sbrk_aligned>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4e0e      	ldr	r6, [pc, #56]	; (80047b4 <sbrk_aligned+0x3c>)
 800477c:	460c      	mov	r4, r1
 800477e:	6831      	ldr	r1, [r6, #0]
 8004780:	4605      	mov	r5, r0
 8004782:	b911      	cbnz	r1, 800478a <sbrk_aligned+0x12>
 8004784:	f000 f8bc 	bl	8004900 <_sbrk_r>
 8004788:	6030      	str	r0, [r6, #0]
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 f8b7 	bl	8004900 <_sbrk_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d00a      	beq.n	80047ac <sbrk_aligned+0x34>
 8004796:	1cc4      	adds	r4, r0, #3
 8004798:	f024 0403 	bic.w	r4, r4, #3
 800479c:	42a0      	cmp	r0, r4
 800479e:	d007      	beq.n	80047b0 <sbrk_aligned+0x38>
 80047a0:	1a21      	subs	r1, r4, r0
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f8ac 	bl	8004900 <_sbrk_r>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d101      	bne.n	80047b0 <sbrk_aligned+0x38>
 80047ac:	f04f 34ff 	mov.w	r4, #4294967295
 80047b0:	4620      	mov	r0, r4
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	20000640 	.word	0x20000640

080047b8 <_malloc_r>:
 80047b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047bc:	1ccd      	adds	r5, r1, #3
 80047be:	f025 0503 	bic.w	r5, r5, #3
 80047c2:	3508      	adds	r5, #8
 80047c4:	2d0c      	cmp	r5, #12
 80047c6:	bf38      	it	cc
 80047c8:	250c      	movcc	r5, #12
 80047ca:	2d00      	cmp	r5, #0
 80047cc:	4607      	mov	r7, r0
 80047ce:	db01      	blt.n	80047d4 <_malloc_r+0x1c>
 80047d0:	42a9      	cmp	r1, r5
 80047d2:	d905      	bls.n	80047e0 <_malloc_r+0x28>
 80047d4:	230c      	movs	r3, #12
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	2600      	movs	r6, #0
 80047da:	4630      	mov	r0, r6
 80047dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e0:	4e2e      	ldr	r6, [pc, #184]	; (800489c <_malloc_r+0xe4>)
 80047e2:	f000 f89d 	bl	8004920 <__malloc_lock>
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	461c      	mov	r4, r3
 80047ea:	bb34      	cbnz	r4, 800483a <_malloc_r+0x82>
 80047ec:	4629      	mov	r1, r5
 80047ee:	4638      	mov	r0, r7
 80047f0:	f7ff ffc2 	bl	8004778 <sbrk_aligned>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	4604      	mov	r4, r0
 80047f8:	d14d      	bne.n	8004896 <_malloc_r+0xde>
 80047fa:	6834      	ldr	r4, [r6, #0]
 80047fc:	4626      	mov	r6, r4
 80047fe:	2e00      	cmp	r6, #0
 8004800:	d140      	bne.n	8004884 <_malloc_r+0xcc>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	4631      	mov	r1, r6
 8004806:	4638      	mov	r0, r7
 8004808:	eb04 0803 	add.w	r8, r4, r3
 800480c:	f000 f878 	bl	8004900 <_sbrk_r>
 8004810:	4580      	cmp	r8, r0
 8004812:	d13a      	bne.n	800488a <_malloc_r+0xd2>
 8004814:	6821      	ldr	r1, [r4, #0]
 8004816:	3503      	adds	r5, #3
 8004818:	1a6d      	subs	r5, r5, r1
 800481a:	f025 0503 	bic.w	r5, r5, #3
 800481e:	3508      	adds	r5, #8
 8004820:	2d0c      	cmp	r5, #12
 8004822:	bf38      	it	cc
 8004824:	250c      	movcc	r5, #12
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ffa5 	bl	8004778 <sbrk_aligned>
 800482e:	3001      	adds	r0, #1
 8004830:	d02b      	beq.n	800488a <_malloc_r+0xd2>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	442b      	add	r3, r5
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	e00e      	b.n	8004858 <_malloc_r+0xa0>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	1b52      	subs	r2, r2, r5
 800483e:	d41e      	bmi.n	800487e <_malloc_r+0xc6>
 8004840:	2a0b      	cmp	r2, #11
 8004842:	d916      	bls.n	8004872 <_malloc_r+0xba>
 8004844:	1961      	adds	r1, r4, r5
 8004846:	42a3      	cmp	r3, r4
 8004848:	6025      	str	r5, [r4, #0]
 800484a:	bf18      	it	ne
 800484c:	6059      	strne	r1, [r3, #4]
 800484e:	6863      	ldr	r3, [r4, #4]
 8004850:	bf08      	it	eq
 8004852:	6031      	streq	r1, [r6, #0]
 8004854:	5162      	str	r2, [r4, r5]
 8004856:	604b      	str	r3, [r1, #4]
 8004858:	4638      	mov	r0, r7
 800485a:	f104 060b 	add.w	r6, r4, #11
 800485e:	f000 f865 	bl	800492c <__malloc_unlock>
 8004862:	f026 0607 	bic.w	r6, r6, #7
 8004866:	1d23      	adds	r3, r4, #4
 8004868:	1af2      	subs	r2, r6, r3
 800486a:	d0b6      	beq.n	80047da <_malloc_r+0x22>
 800486c:	1b9b      	subs	r3, r3, r6
 800486e:	50a3      	str	r3, [r4, r2]
 8004870:	e7b3      	b.n	80047da <_malloc_r+0x22>
 8004872:	6862      	ldr	r2, [r4, #4]
 8004874:	42a3      	cmp	r3, r4
 8004876:	bf0c      	ite	eq
 8004878:	6032      	streq	r2, [r6, #0]
 800487a:	605a      	strne	r2, [r3, #4]
 800487c:	e7ec      	b.n	8004858 <_malloc_r+0xa0>
 800487e:	4623      	mov	r3, r4
 8004880:	6864      	ldr	r4, [r4, #4]
 8004882:	e7b2      	b.n	80047ea <_malloc_r+0x32>
 8004884:	4634      	mov	r4, r6
 8004886:	6876      	ldr	r6, [r6, #4]
 8004888:	e7b9      	b.n	80047fe <_malloc_r+0x46>
 800488a:	230c      	movs	r3, #12
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4638      	mov	r0, r7
 8004890:	f000 f84c 	bl	800492c <__malloc_unlock>
 8004894:	e7a1      	b.n	80047da <_malloc_r+0x22>
 8004896:	6025      	str	r5, [r4, #0]
 8004898:	e7de      	b.n	8004858 <_malloc_r+0xa0>
 800489a:	bf00      	nop
 800489c:	2000063c 	.word	0x2000063c

080048a0 <_realloc_r>:
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	4680      	mov	r8, r0
 80048a6:	4614      	mov	r4, r2
 80048a8:	460e      	mov	r6, r1
 80048aa:	b921      	cbnz	r1, 80048b6 <_realloc_r+0x16>
 80048ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b0:	4611      	mov	r1, r2
 80048b2:	f7ff bf81 	b.w	80047b8 <_malloc_r>
 80048b6:	b92a      	cbnz	r2, 80048c4 <_realloc_r+0x24>
 80048b8:	f7ff ff12 	bl	80046e0 <_free_r>
 80048bc:	4625      	mov	r5, r4
 80048be:	4628      	mov	r0, r5
 80048c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c4:	f000 f838 	bl	8004938 <_malloc_usable_size_r>
 80048c8:	4284      	cmp	r4, r0
 80048ca:	4607      	mov	r7, r0
 80048cc:	d802      	bhi.n	80048d4 <_realloc_r+0x34>
 80048ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048d2:	d812      	bhi.n	80048fa <_realloc_r+0x5a>
 80048d4:	4621      	mov	r1, r4
 80048d6:	4640      	mov	r0, r8
 80048d8:	f7ff ff6e 	bl	80047b8 <_malloc_r>
 80048dc:	4605      	mov	r5, r0
 80048de:	2800      	cmp	r0, #0
 80048e0:	d0ed      	beq.n	80048be <_realloc_r+0x1e>
 80048e2:	42bc      	cmp	r4, r7
 80048e4:	4622      	mov	r2, r4
 80048e6:	4631      	mov	r1, r6
 80048e8:	bf28      	it	cs
 80048ea:	463a      	movcs	r2, r7
 80048ec:	f7ff fed0 	bl	8004690 <memcpy>
 80048f0:	4631      	mov	r1, r6
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fef4 	bl	80046e0 <_free_r>
 80048f8:	e7e1      	b.n	80048be <_realloc_r+0x1e>
 80048fa:	4635      	mov	r5, r6
 80048fc:	e7df      	b.n	80048be <_realloc_r+0x1e>
	...

08004900 <_sbrk_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d06      	ldr	r5, [pc, #24]	; (800491c <_sbrk_r+0x1c>)
 8004904:	2300      	movs	r3, #0
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	f7fc fa5e 	bl	8000dcc <_sbrk>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_sbrk_r+0x1a>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_sbrk_r+0x1a>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000644 	.word	0x20000644

08004920 <__malloc_lock>:
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <__malloc_lock+0x8>)
 8004922:	f000 b811 	b.w	8004948 <__retarget_lock_acquire_recursive>
 8004926:	bf00      	nop
 8004928:	20000648 	.word	0x20000648

0800492c <__malloc_unlock>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__malloc_unlock+0x8>)
 800492e:	f000 b80c 	b.w	800494a <__retarget_lock_release_recursive>
 8004932:	bf00      	nop
 8004934:	20000648 	.word	0x20000648

08004938 <_malloc_usable_size_r>:
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f18      	subs	r0, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfbc      	itt	lt
 8004942:	580b      	ldrlt	r3, [r1, r0]
 8004944:	18c0      	addlt	r0, r0, r3
 8004946:	4770      	bx	lr

08004948 <__retarget_lock_acquire_recursive>:
 8004948:	4770      	bx	lr

0800494a <__retarget_lock_release_recursive>:
 800494a:	4770      	bx	lr

0800494c <_init>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr

08004958 <_fini>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	bf00      	nop
 800495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495e:	bc08      	pop	{r3}
 8004960:	469e      	mov	lr, r3
 8004962:	4770      	bx	lr

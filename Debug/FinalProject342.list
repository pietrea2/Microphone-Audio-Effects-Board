
FinalProject342.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032bc  080032bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c4  080032c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080032d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080032d8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebc0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcc  00000000  00000000  0002ebfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000307c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00031590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220e3  00000000  00000000  000322b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd1d  00000000  00000000  00054393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d279c  00000000  00000000  000640b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013684c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  0013689c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800328c 	.word	0x0800328c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800328c 	.word	0x0800328c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b0c2      	sub	sp, #264	; 0x108
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc6d 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f879 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f9e5 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f9b9 	bl	8000890 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800051e:	f000 f8df 	bl	80006e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000522:	f000 f915 	bl	8000750 <MX_TIM1_Init>
  //128 samples per buffer



#define NUM_VALS 128
  int vindex = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint16_t values[NUM_VALS];

  memset(values, 0xFF, sizeof(uint16_t) * NUM_VALS);
 800052c:	463b      	mov	r3, r7
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	21ff      	movs	r1, #255	; 0xff
 8000534:	4618      	mov	r0, r3
 8000536:	f002 fea1 	bl	800327c <memset>
	// HAL_GPIO_WritePin(AUDIO_CLEAR_BUF_GPIO_PORT, AUDIO_CLEAR_BUF, GPIO_PIN_RESET);
			//while(HAL_GPIO_ReadPin(AUDIO_READY_GPIO_PORT, AUDIO_READY) != GPIO_PIN_SET);



			for (int i = 0; i < NUM_VALS; i += 8){
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000540:	e05b      	b.n	80005fa <main+0xf2>
				  HAL_Delay(1000);
				  HAL_GPIO_WritePin(AUDIO_WRITE_AND_ENABLE_GPIO_PORT, AUDIO_WRITE, GPIO_PIN_RESET);
				  */
				  //HAL_Delay(50);

				GPIOF->ODR = values[i];
 8000542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800054a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800054e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <main+0xfc>)
 8000554:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 1];
 8000556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000564:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <main+0xfc>)
 800056a:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 2];
 800056c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000570:	1c9a      	adds	r2, r3, #2
 8000572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800057a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <main+0xfc>)
 8000580:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 3];
 8000582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000586:	1cda      	adds	r2, r3, #3
 8000588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800058c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000590:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <main+0xfc>)
 8000596:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 4];
 8000598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800059c:	1d1a      	adds	r2, r3, #4
 800059e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005a6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0xfc>)
 80005ac:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 5];
 80005ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005b2:	1d5a      	adds	r2, r3, #5
 80005b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <main+0xfc>)
 80005c2:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 6];
 80005c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005c8:	1d9a      	adds	r2, r3, #6
 80005ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005d2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <main+0xfc>)
 80005d8:	615a      	str	r2, [r3, #20]
				GPIOF->ODR = values[i + 7];
 80005da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005de:	1dda      	adds	r2, r3, #7
 80005e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80005e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <main+0xfc>)
 80005ee:	615a      	str	r2, [r3, #20]
			for (int i = 0; i < NUM_VALS; i += 8){
 80005f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005f4:	3308      	adds	r3, #8
 80005f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80005fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000600:	dd9f      	ble.n	8000542 <main+0x3a>
 8000602:	e79a      	b.n	800053a <main+0x32>
 8000604:	40021400 	.word	0x40021400

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fe30 	bl	800327c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <SystemClock_Config+0xd4>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f9fb 	bl	8001a8c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800069c:	f000 fa26 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fe9a 	bl	80013f8 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ca:	f000 fa0f 	bl	8000aec <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_SPI1_Init+0x68>)
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <MX_SPI1_Init+0x6c>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_SPI1_Init+0x68>)
 80006ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_SPI1_Init+0x68>)
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_SPI1_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_SPI1_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_SPI1_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_SPI1_Init+0x68>)
 800070e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000712:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SPI1_Init+0x68>)
 8000716:	2208      	movs	r2, #8
 8000718:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_SPI1_Init+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SPI1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_SPI1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SPI1_Init+0x68>)
 800072e:	220a      	movs	r2, #10
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_SPI1_Init+0x68>)
 8000734:	f001 fc48 	bl	8001fc8 <HAL_SPI_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800073e:	f000 f9d5 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028
 800074c:	40013000 	.word	0x40013000

08000750 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b096      	sub	sp, #88	; 0x58
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2220      	movs	r2, #32
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fd77 	bl	800327c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800078e:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <MX_TIM1_Init+0x138>)
 8000790:	4a3e      	ldr	r2, [pc, #248]	; (800088c <MX_TIM1_Init+0x13c>)
 8000792:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <MX_TIM1_Init+0x138>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <MX_TIM1_Init+0x138>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <MX_TIM1_Init+0x138>)
 80007a2:	2205      	movs	r2, #5
 80007a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <MX_TIM1_Init+0x138>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <MX_TIM1_Init+0x138>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b2:	4b35      	ldr	r3, [pc, #212]	; (8000888 <MX_TIM1_Init+0x138>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b8:	4833      	ldr	r0, [pc, #204]	; (8000888 <MX_TIM1_Init+0x138>)
 80007ba:	f001 fc8e 	bl	80020da <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007c4:	f000 f992 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d2:	4619      	mov	r1, r3
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <MX_TIM1_Init+0x138>)
 80007d6:	f001 fdeb 	bl	80023b0 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007e0:	f000 f984 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007e4:	4828      	ldr	r0, [pc, #160]	; (8000888 <MX_TIM1_Init+0x138>)
 80007e6:	f001 fcc7 	bl	8002178 <HAL_TIM_PWM_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007f0:	f000 f97c 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000800:	4619      	mov	r1, r3
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <MX_TIM1_Init+0x138>)
 8000804:	f002 f986 	bl	8002b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800080e:	f000 f96d 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000812:	2360      	movs	r3, #96	; 0x60
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 10;
 8000816:	230a      	movs	r3, #10
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <MX_TIM1_Init+0x138>)
 8000838:	f001 fcf8 	bl	800222c <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000842:	f000 f953 	bl	8000aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM1_Init+0x138>)
 800086a:	f002 f9cf 	bl	8002c0c <HAL_TIMEx_ConfigBreakDeadTime>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000874:	f000 f93a 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM1_Init+0x138>)
 800087a:	f000 f9cf 	bl	8000c1c <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3758      	adds	r7, #88	; 0x58
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000080 	.word	0x20000080
 800088c:	40010000 	.word	0x40010000

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART3_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART3_UART_Init+0x4c>)
 80008c8:	f002 f9f2 	bl	8002cb0 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f90b 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000c8 	.word	0x200000c8
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b75      	ldr	r3, [pc, #468]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a74      	ldr	r2, [pc, #464]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b6e      	ldr	r3, [pc, #440]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a6d      	ldr	r2, [pc, #436]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b6b      	ldr	r3, [pc, #428]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a66      	ldr	r2, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a5f      	ldr	r2, [pc, #380]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b52      	ldr	r3, [pc, #328]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a51      	ldr	r2, [pc, #324]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <MX_GPIO_Init+0x1f0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 80009be:	2200      	movs	r2, #0
 80009c0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80009c4:	4844      	ldr	r0, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x1f4>)
 80009c6:	f000 fcfd 	bl	80013c4 <HAL_GPIO_WritePin>
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DE1_AUDIO_WR_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f244 4181 	movw	r1, #17537	; 0x4481
 80009d0:	4842      	ldr	r0, [pc, #264]	; (8000adc <MX_GPIO_Init+0x1f8>)
 80009d2:	f000 fcf7 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SNSS_GPIO_Port, SNSS_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	4840      	ldr	r0, [pc, #256]	; (8000ae0 <MX_GPIO_Init+0x1fc>)
 80009de:	f000 fcf1 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	483a      	ldr	r0, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x200>)
 80009fa:	f000 fb4f 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : AUDIO0_Pin AUDIO1_Pin AUDIO2_Pin AUDIO3_Pin
                           AUDIO4_Pin AUDIO5_Pin AUDIO6_Pin AUDIO7_Pin
                           AUDIO8_Pin AUDIO9_Pin AUDIO10_Pin AUDIO11_Pin */
  GPIO_InitStruct.Pin = AUDIO0_Pin|AUDIO1_Pin|AUDIO2_Pin|AUDIO3_Pin
 80009fe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a02:	61fb      	str	r3, [r7, #28]
                          |AUDIO4_Pin|AUDIO5_Pin|AUDIO6_Pin|AUDIO7_Pin
                          |AUDIO8_Pin|AUDIO9_Pin|AUDIO10_Pin|AUDIO11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a04:	2311      	movs	r3, #17
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x1f4>)
 8000a18:	f000 fb40 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a1c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4829      	ldr	r0, [pc, #164]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000a36:	f000 fb31 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSS_Pin */
  GPIO_InitStruct.Pin = SNSS_Pin;
 8000a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a40:	2311      	movs	r3, #17
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SNSS_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0x1fc>)
 8000a54:	f000 fb22 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_WR_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_WR_Pin;
 8000a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a5e:	2311      	movs	r3, #17
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DE1_AUDIO_WR_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481a      	ldr	r0, [pc, #104]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000a72:	f000 fb13 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : DE1_AUDIO_READY_Pin */
  GPIO_InitStruct.Pin = DE1_AUDIO_READY_Pin;
 8000a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DE1_AUDIO_READY_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <MX_GPIO_Init+0x1f8>)
 8000a8c:	f000 fb06 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a90:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <MX_GPIO_Init+0x204>)
 8000aae:	f000 faf5 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_GPIO_Init+0x204>)
 8000ac8:	f000 fae8 	bl	800109c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000acc:	bf00      	nop
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021400 	.word	0x40021400
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020000 	.word	0x40020000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_SPI_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_SPI_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_SPI_MspInit+0x8c>)
 8000bbe:	f000 fa6d 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_TIM_Base_MspInit+0x3c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10d      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_TIM_Base_MspInit+0x40>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_TIM_MspPostInit+0x68>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d11e      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_TIM_MspPostInit+0x70>)
 8000c78:	f000 fa10 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12c      	bne.n	8000d0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_MspInit+0x8c>)
 8000d08:	f000 f9c8 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004800 	.word	0x40004800
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f890 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f002 fa35 	bl	8003234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fb9d 	bl	8000508 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ddc:	080032cc 	.word	0x080032cc
  ldr r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de4:	20000110 	.word	0x20000110

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f90d 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe6a 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f917 	bl	8001082 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f8ed 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	2000010c 	.word	0x2000010c

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000010c 	.word	0x2000010c

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff47 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff5c 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffb0 	bl	8000ff0 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e165      	b.n	8001384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8154 	bne.w	800137e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ae 	beq.w	800137e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_GPIO_Init+0x300>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a5c      	ldr	r2, [pc, #368]	; (800139c <HAL_GPIO_Init+0x300>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_GPIO_Init+0x300>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_GPIO_Init+0x304>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x308>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x30c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x216>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4d      	ldr	r2, [pc, #308]	; (80013ac <HAL_GPIO_Init+0x310>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x212>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x20e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4b      	ldr	r2, [pc, #300]	; (80013b4 <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x20a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4a      	ldr	r2, [pc, #296]	; (80013b8 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x206>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x202>
 800129a:	2306      	movs	r3, #6
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x21c>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	; (80013a0 <HAL_GPIO_Init+0x304>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x324>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_GPIO_Init+0x324>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae96 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40021800 	.word	0x40021800
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0cc      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d90c      	bls.n	8001434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0b8      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800146e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	494d      	ldr	r1, [pc, #308]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d044      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d119      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e06f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e067      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4934      	ldr	r1, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fce6 	bl	8000eb8 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fce2 	bl	8000eb8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e04f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 030f 	and.w	r3, r3, #15
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d20c      	bcs.n	8001540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e032      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	490e      	ldr	r1, [pc, #56]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157e:	f000 f855 	bl	800162c <HAL_RCC_GetSysClockFreq>
 8001582:	4602      	mov	r2, r0
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	5ccb      	ldrb	r3, [r1, r3]
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fc46 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	080032a4 	.word	0x080032a4
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e0:	f7ff fff0 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	0a9b      	lsrs	r3, r3, #10
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	4903      	ldr	r1, [pc, #12]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40023800 	.word	0x40023800
 8001600:	080032b4 	.word	0x080032b4

08001604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001608:	f7ff ffdc 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	0b5b      	lsrs	r3, r3, #13
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	4903      	ldr	r1, [pc, #12]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	080032b4 	.word	0x080032b4

0800162c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001630:	b0ae      	sub	sp, #184	; 0xb8
 8001632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001652:	4bcb      	ldr	r3, [pc, #812]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b0c      	cmp	r3, #12
 800165c:	f200 8206 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x440>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	0800169d 	.word	0x0800169d
 800166c:	08001a6d 	.word	0x08001a6d
 8001670:	08001a6d 	.word	0x08001a6d
 8001674:	08001a6d 	.word	0x08001a6d
 8001678:	080016a5 	.word	0x080016a5
 800167c:	08001a6d 	.word	0x08001a6d
 8001680:	08001a6d 	.word	0x08001a6d
 8001684:	08001a6d 	.word	0x08001a6d
 8001688:	080016ad 	.word	0x080016ad
 800168c:	08001a6d 	.word	0x08001a6d
 8001690:	08001a6d 	.word	0x08001a6d
 8001694:	08001a6d 	.word	0x08001a6d
 8001698:	0800189d 	.word	0x0800189d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4bb9      	ldr	r3, [pc, #740]	; (8001984 <HAL_RCC_GetSysClockFreq+0x358>)
 800169e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016a2:	e1e7      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4bb8      	ldr	r3, [pc, #736]	; (8001988 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016aa:	e1e3      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ac:	4bb4      	ldr	r3, [pc, #720]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b8:	4bb1      	ldr	r3, [pc, #708]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d071      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4bae      	ldr	r3, [pc, #696]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016ea:	4622      	mov	r2, r4
 80016ec:	462b      	mov	r3, r5
 80016ee:	f04f 0000 	mov.w	r0, #0
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	0159      	lsls	r1, r3, #5
 80016f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016fc:	0150      	lsls	r0, r2, #5
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4621      	mov	r1, r4
 8001704:	1a51      	subs	r1, r2, r1
 8001706:	6439      	str	r1, [r7, #64]	; 0x40
 8001708:	4629      	mov	r1, r5
 800170a:	eb63 0301 	sbc.w	r3, r3, r1
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800171c:	4649      	mov	r1, r9
 800171e:	018b      	lsls	r3, r1, #6
 8001720:	4641      	mov	r1, r8
 8001722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001726:	4641      	mov	r1, r8
 8001728:	018a      	lsls	r2, r1, #6
 800172a:	4641      	mov	r1, r8
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001730:	4649      	mov	r1, r9
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001744:	4649      	mov	r1, r9
 8001746:	00cb      	lsls	r3, r1, #3
 8001748:	4641      	mov	r1, r8
 800174a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800174e:	4641      	mov	r1, r8
 8001750:	00ca      	lsls	r2, r1, #3
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	4603      	mov	r3, r0
 8001758:	4622      	mov	r2, r4
 800175a:	189b      	adds	r3, r3, r2
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	462b      	mov	r3, r5
 8001760:	460a      	mov	r2, r1
 8001762:	eb42 0303 	adc.w	r3, r2, r3
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001774:	4629      	mov	r1, r5
 8001776:	024b      	lsls	r3, r1, #9
 8001778:	4621      	mov	r1, r4
 800177a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800177e:	4621      	mov	r1, r4
 8001780:	024a      	lsls	r2, r1, #9
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001794:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001798:	f7fe fd34 	bl	8000204 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017a6:	e067      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a8:	4b75      	ldr	r3, [pc, #468]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80017c2:	2300      	movs	r3, #0
 80017c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017ca:	4622      	mov	r2, r4
 80017cc:	462b      	mov	r3, r5
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	0159      	lsls	r1, r3, #5
 80017d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017dc:	0150      	lsls	r0, r2, #5
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4621      	mov	r1, r4
 80017e4:	1a51      	subs	r1, r2, r1
 80017e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80017e8:	4629      	mov	r1, r5
 80017ea:	eb63 0301 	sbc.w	r3, r3, r1
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017fc:	4649      	mov	r1, r9
 80017fe:	018b      	lsls	r3, r1, #6
 8001800:	4641      	mov	r1, r8
 8001802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001806:	4641      	mov	r1, r8
 8001808:	018a      	lsls	r2, r1, #6
 800180a:	4641      	mov	r1, r8
 800180c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001810:	4649      	mov	r1, r9
 8001812:	eb63 0b01 	sbc.w	fp, r3, r1
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001822:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800182a:	4692      	mov	sl, r2
 800182c:	469b      	mov	fp, r3
 800182e:	4623      	mov	r3, r4
 8001830:	eb1a 0303 	adds.w	r3, sl, r3
 8001834:	623b      	str	r3, [r7, #32]
 8001836:	462b      	mov	r3, r5
 8001838:	eb4b 0303 	adc.w	r3, fp, r3
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800184a:	4629      	mov	r1, r5
 800184c:	028b      	lsls	r3, r1, #10
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001854:	4621      	mov	r1, r4
 8001856:	028a      	lsls	r2, r1, #10
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001860:	2200      	movs	r2, #0
 8001862:	673b      	str	r3, [r7, #112]	; 0x70
 8001864:	677a      	str	r2, [r7, #116]	; 0x74
 8001866:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800186a:	f7fe fccb 	bl	8000204 <__aeabi_uldivmod>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4613      	mov	r3, r2
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800188a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800188e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800189a:	e0eb      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800189c:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d06b      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_GetSysClockFreq+0x354>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	2200      	movs	r2, #0
 80018bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80018be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c6:	663b      	str	r3, [r7, #96]	; 0x60
 80018c8:	2300      	movs	r3, #0
 80018ca:	667b      	str	r3, [r7, #100]	; 0x64
 80018cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018d0:	4622      	mov	r2, r4
 80018d2:	462b      	mov	r3, r5
 80018d4:	f04f 0000 	mov.w	r0, #0
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	0159      	lsls	r1, r3, #5
 80018de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e2:	0150      	lsls	r0, r2, #5
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4621      	mov	r1, r4
 80018ea:	1a51      	subs	r1, r2, r1
 80018ec:	61b9      	str	r1, [r7, #24]
 80018ee:	4629      	mov	r1, r5
 80018f0:	eb63 0301 	sbc.w	r3, r3, r1
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001902:	4659      	mov	r1, fp
 8001904:	018b      	lsls	r3, r1, #6
 8001906:	4651      	mov	r1, sl
 8001908:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190c:	4651      	mov	r1, sl
 800190e:	018a      	lsls	r2, r1, #6
 8001910:	4651      	mov	r1, sl
 8001912:	ebb2 0801 	subs.w	r8, r2, r1
 8001916:	4659      	mov	r1, fp
 8001918:	eb63 0901 	sbc.w	r9, r3, r1
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800192c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001930:	4690      	mov	r8, r2
 8001932:	4699      	mov	r9, r3
 8001934:	4623      	mov	r3, r4
 8001936:	eb18 0303 	adds.w	r3, r8, r3
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	462b      	mov	r3, r5
 800193e:	eb49 0303 	adc.w	r3, r9, r3
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001950:	4629      	mov	r1, r5
 8001952:	024b      	lsls	r3, r1, #9
 8001954:	4621      	mov	r1, r4
 8001956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800195a:	4621      	mov	r1, r4
 800195c:	024a      	lsls	r2, r1, #9
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001966:	2200      	movs	r2, #0
 8001968:	65bb      	str	r3, [r7, #88]	; 0x58
 800196a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800196c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001970:	f7fe fc48 	bl	8000204 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800197e:	e065      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x420>
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x458>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	2200      	movs	r2, #0
 8001994:	4618      	mov	r0, r3
 8001996:	4611      	mov	r1, r2
 8001998:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800199c:	653b      	str	r3, [r7, #80]	; 0x50
 800199e:	2300      	movs	r3, #0
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54
 80019a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019a6:	4642      	mov	r2, r8
 80019a8:	464b      	mov	r3, r9
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	0159      	lsls	r1, r3, #5
 80019b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b8:	0150      	lsls	r0, r2, #5
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4641      	mov	r1, r8
 80019c0:	1a51      	subs	r1, r2, r1
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	4649      	mov	r1, r9
 80019c6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019d8:	4659      	mov	r1, fp
 80019da:	018b      	lsls	r3, r1, #6
 80019dc:	4651      	mov	r1, sl
 80019de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e2:	4651      	mov	r1, sl
 80019e4:	018a      	lsls	r2, r1, #6
 80019e6:	4651      	mov	r1, sl
 80019e8:	1a54      	subs	r4, r2, r1
 80019ea:	4659      	mov	r1, fp
 80019ec:	eb63 0501 	sbc.w	r5, r3, r1
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	00eb      	lsls	r3, r5, #3
 80019fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fe:	00e2      	lsls	r2, r4, #3
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4643      	mov	r3, r8
 8001a06:	18e3      	adds	r3, r4, r3
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	eb45 0303 	adc.w	r3, r5, r3
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a34:	2200      	movs	r2, #0
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a3e:	f7fe fbe1 	bl	8000204 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4613      	mov	r3, r2
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	0f1b      	lsrs	r3, r3, #28
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a6a:	e003      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	37b8      	adds	r7, #184	; 0xb8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400

08001a8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e28d      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8083 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d019      	beq.n	8001aec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab8:	4b91      	ldr	r3, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ac4:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x124>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e25a      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x90>
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xcc>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0xb4>
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a72      	ldr	r2, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xcc>
 8001b40:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6b      	ldr	r2, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9aa 	bl	8000eb8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f9a6 	bl	8000eb8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e21f      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xdc>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f996 	bl	8000eb8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff f992 	bl	8000eb8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e20b      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x104>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d06f      	beq.n	8001c9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bbe:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d017      	beq.n	8001bfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bca:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x186>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1d3      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x278>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f93f 	bl	8000eb8 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f93b 	bl	8000eb8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1b4      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x278>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f91e 	bl	8000eb8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff f91a 	bl	8000eb8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e193      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f8fe 	bl	8000eb8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f8fa 	bl	8000eb8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e173      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x234>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f8e7 	bl	8000eb8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff f8e3 	bl	8000eb8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e15c      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b8a      	ldr	r3, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b83      	ldr	r3, [pc, #524]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7f      	ldr	r3, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x4b0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x4b0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x4b0>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f8a3 	bl	8000eb8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff f89f 	bl	8000eb8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e118      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x4b0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x31e>
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a65      	ldr	r2, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x358>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x340>
 8001db2:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5d      	ldr	r2, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x358>
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a59      	ldr	r2, [pc, #356]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f864 	bl	8000eb8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff f860 	bl	8000eb8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0d7      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x368>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff f84e 	bl	8000eb8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff f84a 	bl	8000eb8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0c1      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80ad 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d060      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d145      	bne.n	8001efe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_RCC_OscConfig+0x4b4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f81e 	bl	8000eb8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f81a 	bl	8000eb8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e093      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	071b      	lsls	r3, r3, #28
 8001eca:	491b      	ldr	r1, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x4b4>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ffef 	bl	8000eb8 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe ffeb 	bl	8000eb8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e064      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x452>
 8001efc:	e05c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_RCC_OscConfig+0x4b4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe ffd8 	bl	8000eb8 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe ffd4 	bl	8000eb8 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e04d      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x480>
 8001f2a:	e045      	b.n	8001fb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e040      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x538>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d030      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d122      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f74:	4013      	ands	r3, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d119      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07b      	b.n	80020d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fea:	d009      	beq.n	8002000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fd94 	bl	8000b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	ea42 0103 	orr.w	r1, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0104 	and.w	r1, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f003 0210 	and.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e041      	b.n	8002170 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe fd69 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f000 fa11 	bl	8002540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e041      	b.n	800220e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f839 	bl	8002216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 f9c2 	bl	8002540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002246:	2302      	movs	r3, #2
 8002248:	e0ae      	b.n	80023a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	f200 809f 	bhi.w	8002398 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002295 	.word	0x08002295
 8002264:	08002399 	.word	0x08002399
 8002268:	08002399 	.word	0x08002399
 800226c:	08002399 	.word	0x08002399
 8002270:	080022d5 	.word	0x080022d5
 8002274:	08002399 	.word	0x08002399
 8002278:	08002399 	.word	0x08002399
 800227c:	08002399 	.word	0x08002399
 8002280:	08002317 	.word	0x08002317
 8002284:	08002399 	.word	0x08002399
 8002288:	08002399 	.word	0x08002399
 800228c:	08002399 	.word	0x08002399
 8002290:	08002357 	.word	0x08002357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f9f0 	bl	8002680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0208 	orr.w	r2, r2, #8
 80022ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6999      	ldr	r1, [r3, #24]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	619a      	str	r2, [r3, #24]
      break;
 80022d2:	e064      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa40 	bl	8002760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6999      	ldr	r1, [r3, #24]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	619a      	str	r2, [r3, #24]
      break;
 8002314:	e043      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fa95 	bl	800284c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0208 	orr.w	r2, r2, #8
 8002330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0204 	bic.w	r2, r2, #4
 8002340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69d9      	ldr	r1, [r3, #28]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	61da      	str	r2, [r3, #28]
      break;
 8002354:	e023      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fae9 	bl	8002934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69d9      	ldr	r1, [r3, #28]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	021a      	lsls	r2, r3, #8
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	61da      	str	r2, [r3, #28]
      break;
 8002396:	e002      	b.n	800239e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	75fb      	strb	r3, [r7, #23]
      break;
 800239c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_TIM_ConfigClockSource+0x1c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e0b4      	b.n	8002536 <HAL_TIM_ConfigClockSource+0x186>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002404:	d03e      	beq.n	8002484 <HAL_TIM_ConfigClockSource+0xd4>
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	f200 8087 	bhi.w	800251c <HAL_TIM_ConfigClockSource+0x16c>
 800240e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002412:	f000 8086 	beq.w	8002522 <HAL_TIM_ConfigClockSource+0x172>
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241a:	d87f      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d01a      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0xa6>
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d87b      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 8002424:	2b60      	cmp	r3, #96	; 0x60
 8002426:	d050      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x11a>
 8002428:	2b60      	cmp	r3, #96	; 0x60
 800242a:	d877      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b50      	cmp	r3, #80	; 0x50
 800242e:	d03c      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0xfa>
 8002430:	2b50      	cmp	r3, #80	; 0x50
 8002432:	d873      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d058      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x13a>
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d86f      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b30      	cmp	r3, #48	; 0x30
 800243e:	d064      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x15a>
 8002440:	2b30      	cmp	r3, #48	; 0x30
 8002442:	d86b      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b20      	cmp	r3, #32
 8002446:	d060      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x15a>
 8002448:	2b20      	cmp	r3, #32
 800244a:	d867      	bhi.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05c      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	2b10      	cmp	r3, #16
 8002452:	d05a      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x15a>
 8002454:	e062      	b.n	800251c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f000 fb35 	bl	8002ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	609a      	str	r2, [r3, #8]
      break;
 8002482:	e04f      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6899      	ldr	r1, [r3, #8]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f000 fb1e 	bl	8002ad4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a6:	609a      	str	r2, [r3, #8]
      break;
 80024a8:	e03c      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f000 fa92 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2150      	movs	r1, #80	; 0x50
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 faeb 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 80024c8:	e02c      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f000 fab1 	bl	8002a3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2160      	movs	r1, #96	; 0x60
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fadb 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 80024e8:	e01c      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f000 fa72 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2140      	movs	r1, #64	; 0x40
 8002502:	4618      	mov	r0, r3
 8002504:	f000 facb 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 8002508:	e00c      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f000 fac2 	bl	8002a9e <TIM_ITRx_SetConfig>
      break;
 800251a:	e003      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      break;
 8002520:	e000      	b.n	8002524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a40      	ldr	r2, [pc, #256]	; (8002654 <TIM_Base_SetConfig+0x114>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255e:	d00f      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a3d      	ldr	r2, [pc, #244]	; (8002658 <TIM_Base_SetConfig+0x118>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00b      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3c      	ldr	r2, [pc, #240]	; (800265c <TIM_Base_SetConfig+0x11c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <TIM_Base_SetConfig+0x120>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <TIM_Base_SetConfig+0x124>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <TIM_Base_SetConfig+0x114>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a0:	d027      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <TIM_Base_SetConfig+0x118>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d023      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2b      	ldr	r2, [pc, #172]	; (800265c <TIM_Base_SetConfig+0x11c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <TIM_Base_SetConfig+0x120>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a29      	ldr	r2, [pc, #164]	; (8002664 <TIM_Base_SetConfig+0x124>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <TIM_Base_SetConfig+0x128>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <TIM_Base_SetConfig+0x12c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <TIM_Base_SetConfig+0x130>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a25      	ldr	r2, [pc, #148]	; (8002674 <TIM_Base_SetConfig+0x134>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <TIM_Base_SetConfig+0x138>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a23      	ldr	r2, [pc, #140]	; (800267c <TIM_Base_SetConfig+0x13c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <TIM_Base_SetConfig+0x114>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0xf8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <TIM_Base_SetConfig+0x124>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40010400 	.word	0x40010400
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800
 8002674:	40001800 	.word	0x40001800
 8002678:	40001c00 	.word	0x40001c00
 800267c:	40002000 	.word	0x40002000

08002680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0201 	bic.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <TIM_OC1_SetConfig+0xd8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d003      	beq.n	80026e4 <TIM_OC1_SetConfig+0x64>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <TIM_OC1_SetConfig+0xdc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0308 	bic.w	r3, r3, #8
 80026ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <TIM_OC1_SetConfig+0xd8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <TIM_OC1_SetConfig+0x8e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <TIM_OC1_SetConfig+0xdc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800271c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
}
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40010000 	.word	0x40010000
 800275c:	40010400 	.word	0x40010400

08002760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0210 	bic.w	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0320 	bic.w	r3, r3, #32
 80027aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a22      	ldr	r2, [pc, #136]	; (8002844 <TIM_OC2_SetConfig+0xe4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <TIM_OC2_SetConfig+0x68>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a21      	ldr	r2, [pc, #132]	; (8002848 <TIM_OC2_SetConfig+0xe8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <TIM_OC2_SetConfig+0xe4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d003      	beq.n	80027f4 <TIM_OC2_SetConfig+0x94>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <TIM_OC2_SetConfig+0xe8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d113      	bne.n	800281c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	bf00      	nop
 8002838:	371c      	adds	r7, #28
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40010400 	.word	0x40010400

0800284c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0303 	bic.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <TIM_OC3_SetConfig+0xe0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_OC3_SetConfig+0x66>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a20      	ldr	r2, [pc, #128]	; (8002930 <TIM_OC3_SetConfig+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <TIM_OC3_SetConfig+0xe0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <TIM_OC3_SetConfig+0x92>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <TIM_OC3_SetConfig+0xe4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	621a      	str	r2, [r3, #32]
}
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40010000 	.word	0x40010000
 8002930:	40010400 	.word	0x40010400

08002934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800297e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <TIM_OC4_SetConfig+0xa4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_OC4_SetConfig+0x68>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <TIM_OC4_SetConfig+0xa8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010400 	.word	0x40010400

080029e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0210 	bic.w	r2, r3, #16
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	031b      	lsls	r3, r3, #12
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f043 0307 	orr.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e05a      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d022      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d01d      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40010400 	.word	0x40010400
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40001800 	.word	0x40001800

08002c0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e03d      	b.n	8002ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e03f      	b.n	8002d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd ffda 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f829 	bl	8002d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d50:	b0c0      	sub	sp, #256	; 0x100
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	ea40 0301 	orr.w	r3, r0, r1
 8002d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002da4:	f021 010c 	bic.w	r1, r1, #12
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002db2:	430b      	orrs	r3, r1
 8002db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	6999      	ldr	r1, [r3, #24]
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	ea40 0301 	orr.w	r3, r0, r1
 8002dd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b8f      	ldr	r3, [pc, #572]	; (8003018 <UART_SetConfig+0x2cc>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0xa0>
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <UART_SetConfig+0x2d0>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d104      	bne.n	8002df6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dec:	f7fe fc0a 	bl	8001604 <HAL_RCC_GetPCLK2Freq>
 8002df0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002df4:	e003      	b.n	8002dfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002df6:	f7fe fbf1 	bl	80015dc <HAL_RCC_GetPCLK1Freq>
 8002dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e08:	f040 810c 	bne.w	8003024 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e26:	415b      	adcs	r3, r3
 8002e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e2e:	4621      	mov	r1, r4
 8002e30:	eb12 0801 	adds.w	r8, r2, r1
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb43 0901 	adc.w	r9, r3, r1
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4e:	4690      	mov	r8, r2
 8002e50:	4699      	mov	r9, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	eb18 0303 	adds.w	r3, r8, r3
 8002e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	eb49 0303 	adc.w	r3, r9, r3
 8002e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	18db      	adds	r3, r3, r3
 8002e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002e80:	4613      	mov	r3, r2
 8002e82:	eb42 0303 	adc.w	r3, r2, r3
 8002e86:	657b      	str	r3, [r7, #84]	; 0x54
 8002e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e90:	f7fd f9b8 	bl	8000204 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <UART_SetConfig+0x2d4>)
 8002e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	011c      	lsls	r4, r3, #4
 8002ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002eb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1891      	adds	r1, r2, r2
 8002eba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ebc:	415b      	adcs	r3, r3
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002edc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ee0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee4:	4692      	mov	sl, r2
 8002ee6:	469b      	mov	fp, r3
 8002ee8:	4643      	mov	r3, r8
 8002eea:	eb1a 0303 	adds.w	r3, sl, r3
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f10:	460b      	mov	r3, r1
 8002f12:	18db      	adds	r3, r3, r3
 8002f14:	643b      	str	r3, [r7, #64]	; 0x40
 8002f16:	4613      	mov	r3, r2
 8002f18:	eb42 0303 	adc.w	r3, r2, r3
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f26:	f7fd f96d 	bl	8000204 <__aeabi_uldivmod>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <UART_SetConfig+0x2d4>)
 8002f32:	fba3 2301 	umull	r2, r3, r3, r1
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2264      	movs	r2, #100	; 0x64
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	1acb      	subs	r3, r1, r3
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <UART_SetConfig+0x2d4>)
 8002f48:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f54:	441c      	add	r4, r3
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f70:	415b      	adcs	r3, r3
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fcc:	460b      	mov	r3, r1
 8002fce:	18db      	adds	r3, r3, r3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fe2:	f7fd f90f 	bl	8000204 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <UART_SetConfig+0x2d4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a08      	ldr	r2, [pc, #32]	; (8003020 <UART_SetConfig+0x2d4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 0207 	and.w	r2, r3, #7
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4422      	add	r2, r4
 8003012:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003014:	e105      	b.n	8003222 <UART_SetConfig+0x4d6>
 8003016:	bf00      	nop
 8003018:	40011000 	.word	0x40011000
 800301c:	40011400 	.word	0x40011400
 8003020:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800302e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003032:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003036:	4642      	mov	r2, r8
 8003038:	464b      	mov	r3, r9
 800303a:	1891      	adds	r1, r2, r2
 800303c:	6239      	str	r1, [r7, #32]
 800303e:	415b      	adcs	r3, r3
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003046:	4641      	mov	r1, r8
 8003048:	1854      	adds	r4, r2, r1
 800304a:	4649      	mov	r1, r9
 800304c:	eb43 0501 	adc.w	r5, r3, r1
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	00eb      	lsls	r3, r5, #3
 800305a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305e:	00e2      	lsls	r2, r4, #3
 8003060:	4614      	mov	r4, r2
 8003062:	461d      	mov	r5, r3
 8003064:	4643      	mov	r3, r8
 8003066:	18e3      	adds	r3, r4, r3
 8003068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800306c:	464b      	mov	r3, r9
 800306e:	eb45 0303 	adc.w	r3, r5, r3
 8003072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003082:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003092:	4629      	mov	r1, r5
 8003094:	008b      	lsls	r3, r1, #2
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800309c:	4621      	mov	r1, r4
 800309e:	008a      	lsls	r2, r1, #2
 80030a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030a4:	f7fd f8ae 	bl	8000204 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4b60      	ldr	r3, [pc, #384]	; (8003230 <UART_SetConfig+0x4e4>)
 80030ae:	fba3 2302 	umull	r2, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	011c      	lsls	r4, r3, #4
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	61b9      	str	r1, [r7, #24]
 80030d0:	415b      	adcs	r3, r3
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d8:	4641      	mov	r1, r8
 80030da:	1851      	adds	r1, r2, r1
 80030dc:	6139      	str	r1, [r7, #16]
 80030de:	4649      	mov	r1, r9
 80030e0:	414b      	adcs	r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	00cb      	lsls	r3, r1, #3
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fa:	4651      	mov	r1, sl
 80030fc:	00ca      	lsls	r2, r1, #3
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	4603      	mov	r3, r0
 8003104:	4642      	mov	r2, r8
 8003106:	189b      	adds	r3, r3, r2
 8003108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800310c:	464b      	mov	r3, r9
 800310e:	460a      	mov	r2, r1
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	67bb      	str	r3, [r7, #120]	; 0x78
 8003122:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003130:	4649      	mov	r1, r9
 8003132:	008b      	lsls	r3, r1, #2
 8003134:	4641      	mov	r1, r8
 8003136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800313a:	4641      	mov	r1, r8
 800313c:	008a      	lsls	r2, r1, #2
 800313e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003142:	f7fd f85f 	bl	8000204 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <UART_SetConfig+0x4e4>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	2164      	movs	r1, #100	; 0x64
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	3332      	adds	r3, #50	; 0x32
 800315e:	4a34      	ldr	r2, [pc, #208]	; (8003230 <UART_SetConfig+0x4e4>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800316a:	441c      	add	r4, r3
 800316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003170:	2200      	movs	r2, #0
 8003172:	673b      	str	r3, [r7, #112]	; 0x70
 8003174:	677a      	str	r2, [r7, #116]	; 0x74
 8003176:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800317a:	4642      	mov	r2, r8
 800317c:	464b      	mov	r3, r9
 800317e:	1891      	adds	r1, r2, r2
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	415b      	adcs	r3, r3
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318a:	4641      	mov	r1, r8
 800318c:	1851      	adds	r1, r2, r1
 800318e:	6039      	str	r1, [r7, #0]
 8003190:	4649      	mov	r1, r9
 8003192:	414b      	adcs	r3, r1
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031a2:	4659      	mov	r1, fp
 80031a4:	00cb      	lsls	r3, r1, #3
 80031a6:	4651      	mov	r1, sl
 80031a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ac:	4651      	mov	r1, sl
 80031ae:	00ca      	lsls	r2, r1, #3
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	4642      	mov	r2, r8
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80031bc:	464b      	mov	r3, r9
 80031be:	460a      	mov	r2, r1
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	663b      	str	r3, [r7, #96]	; 0x60
 80031d0:	667a      	str	r2, [r7, #100]	; 0x64
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031de:	4649      	mov	r1, r9
 80031e0:	008b      	lsls	r3, r1, #2
 80031e2:	4641      	mov	r1, r8
 80031e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e8:	4641      	mov	r1, r8
 80031ea:	008a      	lsls	r2, r1, #2
 80031ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031f0:	f7fd f808 	bl	8000204 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <UART_SetConfig+0x4e4>)
 80031fa:	fba3 1302 	umull	r1, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2164      	movs	r1, #100	; 0x64
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	; 0x32
 800320c:	4a08      	ldr	r2, [pc, #32]	; (8003230 <UART_SetConfig+0x4e4>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4422      	add	r2, r4
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	51eb851f 	.word	0x51eb851f

08003234 <__libc_init_array>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	4d0d      	ldr	r5, [pc, #52]	; (800326c <__libc_init_array+0x38>)
 8003238:	4c0d      	ldr	r4, [pc, #52]	; (8003270 <__libc_init_array+0x3c>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	2600      	movs	r6, #0
 8003240:	42a6      	cmp	r6, r4
 8003242:	d109      	bne.n	8003258 <__libc_init_array+0x24>
 8003244:	4d0b      	ldr	r5, [pc, #44]	; (8003274 <__libc_init_array+0x40>)
 8003246:	4c0c      	ldr	r4, [pc, #48]	; (8003278 <__libc_init_array+0x44>)
 8003248:	f000 f820 	bl	800328c <_init>
 800324c:	1b64      	subs	r4, r4, r5
 800324e:	10a4      	asrs	r4, r4, #2
 8003250:	2600      	movs	r6, #0
 8003252:	42a6      	cmp	r6, r4
 8003254:	d105      	bne.n	8003262 <__libc_init_array+0x2e>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	f855 3b04 	ldr.w	r3, [r5], #4
 800325c:	4798      	blx	r3
 800325e:	3601      	adds	r6, #1
 8003260:	e7ee      	b.n	8003240 <__libc_init_array+0xc>
 8003262:	f855 3b04 	ldr.w	r3, [r5], #4
 8003266:	4798      	blx	r3
 8003268:	3601      	adds	r6, #1
 800326a:	e7f2      	b.n	8003252 <__libc_init_array+0x1e>
 800326c:	080032c4 	.word	0x080032c4
 8003270:	080032c4 	.word	0x080032c4
 8003274:	080032c4 	.word	0x080032c4
 8003278:	080032c8 	.word	0x080032c8

0800327c <memset>:
 800327c:	4402      	add	r2, r0
 800327e:	4603      	mov	r3, r0
 8003280:	4293      	cmp	r3, r2
 8003282:	d100      	bne.n	8003286 <memset+0xa>
 8003284:	4770      	bx	lr
 8003286:	f803 1b01 	strb.w	r1, [r3], #1
 800328a:	e7f9      	b.n	8003280 <memset+0x4>

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr

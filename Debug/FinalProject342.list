
FinalProject342.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009574  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009744  08009744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ec  080097ec  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f4  080097f4  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cdc  20000170  0800996c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e4c  0800996c  00021e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d7e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f8  00000000  00000000  00034f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00038118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249d5  00000000  00000000  00039fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152bc  00000000  00000000  0005e995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce625  00000000  00000000  00073c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  001422c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000170 	.word	0x20000170
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800972c 	.word	0x0800972c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000174 	.word	0x20000174
 800020c:	0800972c 	.word	0x0800972c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <get_spi_byte>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_spi_byte(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <get_spi_byte+0x2c>)
 80005c2:	f003 fb96 	bl	8003cf2 <HAL_SPI_Receive>
	while(hspi1.State == HAL_SPI_STATE_BUSY);
 80005c6:	bf00      	nop
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <get_spi_byte+0x2c>)
 80005ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d0f9      	beq.n	80005c8 <get_spi_byte+0x14>
	return data;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000018c 	.word	0x2000018c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	f5ad 5dc2 	sub.w	sp, sp, #6208	; 0x1840
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fbc7 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f8c1 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f98d 	bl	8000914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f961 	bl	80008c0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 f927 	bl	8000850 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000602:	f007 fe55 	bl	80082b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int strindex = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 800060c:	f102 0204 	add.w	r2, r2, #4
 8000610:	6013      	str	r3, [r2, #0]
  char strbuf[6000];

  HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_SET); // NSS1 Default Set
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4854      	ldr	r0, [pc, #336]	; (800076c <main+0x188>)
 800061a:	f000 feed 	bl	80013f8 <HAL_GPIO_WritePin>

#define NUM_VALS 100
  int vindex = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8000624:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint16_t value = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800062c:	f102 021a 	add.w	r2, r2, #26
 8000630:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_RESET); // NSS1 low
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	484c      	ldr	r0, [pc, #304]	; (800076c <main+0x188>)
 800063a:	f000 fedd 	bl	80013f8 <HAL_GPIO_WritePin>
	value |= get_spi_byte();
 800063e:	f7ff ffb9 	bl	80005b4 <get_spi_byte>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800064a:	f103 031a 	add.w	r3, r3, #26
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4313      	orrs	r3, r2
 8000652:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8000656:	f102 021a 	add.w	r2, r2, #26
 800065a:	8013      	strh	r3, [r2, #0]
	value |= get_spi_byte() << 8;
 800065c:	f7ff ffaa 	bl	80005b4 <get_spi_byte>
 8000660:	4603      	mov	r3, r0
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800066a:	f103 031a 	add.w	r3, r3, #26
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 800067a:	f102 021a 	add.w	r2, r2, #26
 800067e:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(SPI_SNSS_GPIO_Port, SPI_SNSS_Pin, GPIO_PIN_SET); // NSS1 low
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4839      	ldr	r0, [pc, #228]	; (800076c <main+0x188>)
 8000688:	f000 feb6 	bl	80013f8 <HAL_GPIO_WritePin>

	if (vindex >= NUM_VALS)
 800068c:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b63      	cmp	r3, #99	; 0x63
 8000694:	dd56      	ble.n	8000744 <main+0x160>
	{
		//HAL_UART_Transmit(&huart3, (uint8_t*)"\n\nBegin:\n", strlen("\n\nBegin:\n"), 100);
		CDC_Transmit_FS((uint8_t*)"\n\nBegin:\n", strlen("\n\nBegin:\n"));
 8000696:	2109      	movs	r1, #9
 8000698:	4835      	ldr	r0, [pc, #212]	; (8000770 <main+0x18c>)
 800069a:	f007 fec7 	bl	800842c <CDC_Transmit_FS>

		vindex = 0; strindex = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 80006ac:	f102 0204 	add.w	r2, r2, #4
 80006b0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < NUM_VALS; ++i)
 80006b2:	2300      	movs	r3, #0
 80006b4:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80006b8:	f102 021c 	add.w	r2, r2, #28
 80006bc:	6013      	str	r3, [r2, #0]
 80006be:	e02d      	b.n	800071c <main+0x138>
			strindex += sprintf(strbuf + strindex, "%d, ", values[i]);
 80006c0:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80006c4:	f103 0304 	add.w	r3, r3, #4
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80006ce:	18d0      	adds	r0, r2, r3
 80006d0:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80006d4:	f6a3 0348 	subw	r3, r3, #2120	; 0x848
 80006d8:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 80006dc:	f102 021c 	add.w	r2, r2, #28
 80006e0:	6812      	ldr	r2, [r2, #0]
 80006e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4922      	ldr	r1, [pc, #136]	; (8000774 <main+0x190>)
 80006ea:	f008 fbb1 	bl	8008e50 <siprintf>
 80006ee:	4602      	mov	r2, r0
 80006f0:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 80006f4:	f103 0304 	add.w	r3, r3, #4
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	f507 52c2 	add.w	r2, r7, #6208	; 0x1840
 8000700:	f102 0204 	add.w	r2, r2, #4
 8000704:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < NUM_VALS; ++i)
 8000706:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 800070a:	f103 031c 	add.w	r3, r3, #28
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	f507 52c1 	add.w	r2, r7, #6176	; 0x1820
 8000716:	f102 021c 	add.w	r2, r2, #28
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	f507 53c1 	add.w	r3, r7, #6176	; 0x1820
 8000720:	f103 031c 	add.w	r3, r3, #28
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b63      	cmp	r3, #99	; 0x63
 8000728:	ddca      	ble.n	80006c0 <main+0xdc>

		//HAL_UART_Transmit(&huart3, (uint8_t*)strbuf, strindex, 100);
		CDC_Transmit_FS((uint8_t*)strbuf, strindex);
 800072a:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 800072e:	f103 0304 	add.w	r3, r3, #4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	b29a      	uxth	r2, r3
 8000736:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f007 fe75 	bl	800842c <CDC_Transmit_FS>
 8000742:	e770      	b.n	8000626 <main+0x42>
	}
	else { values[vindex++] = value; }
 8000744:	f507 53c2 	add.w	r3, r7, #6208	; 0x1840
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	f507 51c2 	add.w	r1, r7, #6208	; 0x1840
 8000750:	600a      	str	r2, [r1, #0]
 8000752:	f607 0248 	addw	r2, r7, #2120	; 0x848
 8000756:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 800075a:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
 800075e:	f101 011a 	add.w	r1, r1, #26
 8000762:	8809      	ldrh	r1, [r1, #0]
 8000764:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  {
 8000768:	e75d      	b.n	8000626 <main+0x42>
 800076a:	bf00      	nop
 800076c:	40021400 	.word	0x40021400
 8000770:	08009744 	.word	0x08009744
 8000774:	08009750 	.word	0x08009750

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2234      	movs	r2, #52	; 0x34
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 fb5a 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <SystemClock_Config+0xd0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a28      	ldr	r2, [pc, #160]	; (8000848 <SystemClock_Config+0xd0>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <SystemClock_Config+0xd0>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <SystemClock_Config+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <SystemClock_Config+0xd4>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <SystemClock_Config+0xd4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e8:	2304      	movs	r3, #4
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ec:	23a8      	movs	r3, #168	; 0xa8
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4618      	mov	r0, r3
 8000802:	f002 ff4f 	bl	80036a4 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 f954 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2105      	movs	r1, #5
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f8c4 	bl	80029bc <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083a:	f000 f93d 	bl	8000ab8 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_SPI1_Init+0x68>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000868:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_SPI1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x68>)
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000886:	2208      	movs	r2, #8
 8000888:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SPI1_Init+0x68>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0x68>)
 800089e:	220a      	movs	r2, #10
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_SPI1_Init+0x68>)
 80008a4:	f003 f99c 	bl	8003be0 <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008ae:	f000 f903 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000018c 	.word	0x2000018c
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART3_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f8:	f003 fdde 	bl	80044b8 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f8d9 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001e4 	.word	0x200001e4
 8000910:	40004800 	.word	0x40004800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a5c      	ldr	r2, [pc, #368]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b5a      	ldr	r3, [pc, #360]	; (8000aa4 <MX_GPIO_Init+0x190>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <MX_GPIO_Init+0x190>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a55      	ldr	r2, [pc, #340]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b53      	ldr	r3, [pc, #332]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b4f      	ldr	r3, [pc, #316]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4e      	ldr	r2, [pc, #312]	; (8000aa4 <MX_GPIO_Init+0x190>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a47      	ldr	r2, [pc, #284]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x190>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_GPIO_Init+0x190>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009f4:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <MX_GPIO_Init+0x194>)
 80009f6:	f000 fcff 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	482a      	ldr	r0, [pc, #168]	; (8000aac <MX_GPIO_Init+0x198>)
 8000a02:	f000 fcf9 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4829      	ldr	r0, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000a0c:	f000 fcf4 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4823      	ldr	r0, [pc, #140]	; (8000ab4 <MX_GPIO_Init+0x1a0>)
 8000a28:	f000 fb52 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0x194>)
 8000a46:	f000 fb43 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_GPIO_Init+0x198>)
 8000a64:	f000 fb34 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a68:	2340      	movs	r3, #64	; 0x40
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000a80:	f000 fb26 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000a98:	f000 fb1a 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40021400 	.word	0x40021400
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_SPI_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b6e:	2360      	movs	r3, #96	; 0x60
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f000 faa1 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_UART_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12c      	bne.n	8000c20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000c1c:	f000 fa58 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f8d0 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <OTG_FS_IRQHandler+0x10>)
 8000c8e:	f000 fd23 	bl	80016d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20001710 	.word	0x20001710

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f008 f88e 	bl	8008dec <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000228 	.word	0x20000228
 8000d04:	20001e50 	.word	0x20001e50

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff ffd7 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f008 f84d 	bl	8008df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc41 	bl	80005e4 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000d70:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 8000d74:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000d78:	20001e4c 	.word	0x20001e4c

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f94f 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fe86 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f967 	bl	80010b6 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f92f 	bl	8001062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	2000022c 	.word	0x2000022c

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000022c 	.word	0x2000022c

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e165      	b.n	80013b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8154 	bne.w	80013b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80ae 	beq.w	80013b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <HAL_GPIO_Init+0x300>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <HAL_GPIO_Init+0x300>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <HAL_GPIO_Init+0x300>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_GPIO_Init+0x304>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	; (80013d8 <HAL_GPIO_Init+0x308>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_GPIO_Init+0x30c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4d      	ldr	r2, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x310>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4b      	ldr	r2, [pc, #300]	; (80013e8 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x20a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x206>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x202>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x21c>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_GPIO_Init+0x324>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a26      	ldr	r2, [pc, #152]	; (80013f4 <HAL_GPIO_Init+0x324>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_GPIO_Init+0x324>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x324>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_GPIO_Init+0x324>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae96 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800142a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142c:	b08f      	sub	sp, #60	; 0x3c
 800142e:	af0a      	add	r7, sp, #40	; 0x28
 8001430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e116      	b.n	800166a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 f942 	bl	80086e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2203      	movs	r2, #3
 8001460:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fbf3 	bl	8004c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	687e      	ldr	r6, [r7, #4]
 8001488:	466d      	mov	r5, sp
 800148a:	f106 0410 	add.w	r4, r6, #16
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149a:	e885 0003 	stmia.w	r5, {r0, r1}
 800149e:	1d33      	adds	r3, r6, #4
 80014a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f003 faca 	bl	8004a3c <USB_CoreInit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2202      	movs	r2, #2
 80014b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0d7      	b.n	800166a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fbe1 	bl	8004c88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e04a      	b.n	8001562 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	333d      	adds	r3, #61	; 0x3d
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	333c      	adds	r3, #60	; 0x3c
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	b298      	uxth	r0, r3
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3344      	adds	r3, #68	; 0x44
 8001508:	4602      	mov	r2, r0
 800150a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3340      	adds	r3, #64	; 0x40
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3348      	adds	r3, #72	; 0x48
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	334c      	adds	r3, #76	; 0x4c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	3354      	adds	r3, #84	; 0x54
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	3301      	adds	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3af      	bcc.n	80014cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	e044      	b.n	80015fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3b5      	bcc.n	8001572 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	687e      	ldr	r6, [r7, #4]
 800160e:	466d      	mov	r5, sp
 8001610:	f106 0410 	add.w	r4, r6, #16
 8001614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001620:	e885 0003 	stmia.w	r5, {r0, r1}
 8001624:	1d33      	adds	r3, r6, #4
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f003 fb79 	bl	8004d20 <USB_DevInit>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e014      	b.n	800166a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	2b01      	cmp	r3, #1
 8001656:	d102      	bne.n	800165e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f001 f98b 	bl	8002974 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fcbb 	bl	8005fde <USB_DevDisconnect>

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001672 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_Start+0x1c>
 800168a:	2302      	movs	r3, #2
 800168c:	e020      	b.n	80016d0 <HAL_PCD_Start+0x5e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	2b01      	cmp	r3, #1
 800169c:	d109      	bne.n	80016b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fac4 	bl	8004c44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fc6b 	bl	8005f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08d      	sub	sp, #52	; 0x34
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fd29 	bl	8006146 <USB_GetMode>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 84b7 	bne.w	800206a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fc8d 	bl	8006020 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 84ad 	beq.w	8002068 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fc7a 	bl	8006020 <USB_ReadInterrupts>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d107      	bne.n	8001746 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f002 0202 	and.w	r2, r2, #2
 8001744:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fc68 	bl	8006020 <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b10      	cmp	r3, #16
 8001758:	d161      	bne.n	800181e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699a      	ldr	r2, [r3, #24]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0210 	bic.w	r2, r2, #16
 8001768:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f003 020f 	and.w	r2, r3, #15
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	3304      	adds	r3, #4
 8001788:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	0c5b      	lsrs	r3, r3, #17
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	2b02      	cmp	r3, #2
 8001794:	d124      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d035      	beq.n	800180e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	6a38      	ldr	r0, [r7, #32]
 80017b6:	f004 fa9f 	bl	8005cf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017c6:	441a      	add	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d8:	441a      	add	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	621a      	str	r2, [r3, #32]
 80017de:	e016      	b.n	800180e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	0c5b      	lsrs	r3, r3, #17
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d110      	bne.n	800180e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017f2:	2208      	movs	r2, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	6a38      	ldr	r0, [r7, #32]
 80017f8:	f004 fa7e 	bl	8005cf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001808:	441a      	add	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0210 	orr.w	r2, r2, #16
 800181c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fbfc 	bl	8006020 <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001832:	f040 80a7 	bne.w	8001984 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f004 fc01 	bl	8006046 <USB_ReadDevAllOutEpInterrupt>
 8001844:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001846:	e099      	b.n	800197c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 808e 	beq.w	8001970 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fc25 	bl	80060ae <USB_ReadDevOutEPInterrupt>
 8001864:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187c:	461a      	mov	r2, r3
 800187e:	2301      	movs	r3, #1
 8001880:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 feef 	bl	8002668 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00c      	beq.n	80018ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a0:	461a      	mov	r2, r3
 80018a2:	2308      	movs	r3, #8
 80018a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 ffc5 	bl	8002838 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c4:	461a      	mov	r2, r3
 80018c6:	2310      	movs	r3, #16
 80018c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d030      	beq.n	8001936 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	2b80      	cmp	r3, #128	; 0x80
 80018de:	d109      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	3304      	adds	r3, #4
 8001908:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d108      	bne.n	8001924 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2200      	movs	r2, #0
 8001916:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f007 f808 	bl	8008934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001930:	461a      	mov	r2, r3
 8001932:	2302      	movs	r3, #2
 8001934:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194c:	461a      	mov	r2, r3
 800194e:	2320      	movs	r3, #32
 8001950:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001968:	461a      	mov	r2, r3
 800196a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3301      	adds	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	f47f af62 	bne.w	8001848 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fb49 	bl	8006020 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001998:	f040 80db 	bne.w	8001b52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fb6a 	bl	800607a <USB_ReadDevAllInEpInterrupt>
 80019a6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019ac:	e0cd      	b.n	8001b4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80c2 	beq.w	8001b3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 fb90 	bl	80060ea <USB_ReadDevInEPInterrupt>
 80019ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d057      	beq.n	8001a86 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	2201      	movs	r2, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69f9      	ldr	r1, [r7, #28]
 80019f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019f6:	4013      	ands	r3, r2
 80019f8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a06:	461a      	mov	r2, r3
 8001a08:	2301      	movs	r3, #1
 8001a0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d132      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	334c      	adds	r3, #76	; 0x4c
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4403      	add	r3, r0
 8001a34:	3348      	adds	r3, #72	; 0x48
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4419      	add	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4403      	add	r3, r0
 8001a48:	334c      	adds	r3, #76	; 0x4c
 8001a4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d113      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x3a2>
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3354      	adds	r3, #84	; 0x54
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d108      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a72:	461a      	mov	r2, r3
 8001a74:	2101      	movs	r1, #1
 8001a76:	f004 fb97 	bl	80061a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f006 fed2 	bl	800882a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2310      	movs	r3, #16
 8001abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae6:	6a38      	ldr	r0, [r7, #32]
 8001ae8:	f003 fa78 	bl	8004fdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	3338      	adds	r3, #56	; 0x38
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	78db      	ldrb	r3, [r3, #3]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f006 ff1f 	bl	8008958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b26:	461a      	mov	r2, r3
 8001b28:	2302      	movs	r3, #2
 8001b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fd08 	bl	800254e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f af2e 	bne.w	80019ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fa62 	bl	8006020 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b66:	d122      	bne.n	8001bae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f007 f899 	bl	8008cc8 <HAL_PCDEx_LPM_Callback>
 8001b96:	e002      	b.n	8001b9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f006 febd 	bl	8008918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fa34 	bl	8006020 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bc2:	d112      	bne.n	8001bea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f006 fe79 	bl	80088cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001be8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 fa16 	bl	8006020 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bfe:	d121      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d111      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c34:	2101      	movs	r1, #1
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f007 f846 	bl	8008cc8 <HAL_PCDEx_LPM_Callback>
 8001c3c:	e002      	b.n	8001c44 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f006 fe44 	bl	80088cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 f9e9 	bl	8006020 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c58:	f040 80b7 	bne.w	8001dca <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2110      	movs	r1, #16
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 f9b0 	bl	8004fdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c80:	e046      	b.n	8001d10 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca6:	0151      	lsls	r1, r2, #5
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	440a      	add	r2, r1
 8001cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cda:	0151      	lsls	r1, r2, #5
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	440a      	add	r2, r1
 8001ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ce8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cfa:	0151      	lsls	r1, r2, #5
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	440a      	add	r2, r1
 8001d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3b3      	bcc.n	8001c82 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d46:	f043 030b 	orr.w	r3, r3, #11
 8001d4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5c:	f043 030b 	orr.w	r3, r3, #11
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	e015      	b.n	8001d90 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8a:	f043 030b 	orr.w	r3, r3, #11
 8001d8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001da2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001db4:	461a      	mov	r2, r3
 8001db6:	f004 f9f7 	bl	80061a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 f926 	bl	8006020 <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dde:	d124      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f9bc 	bl	8006162 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f971 	bl	80050d6 <USB_GetDevSpeed>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	f000 fec2 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8001e04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f002 fe76 	bl	8004b00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f006 fd30 	bl	800887a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f8f6 	bl	8006020 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d10a      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fd0d 	bl	800885e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 0208 	and.w	r2, r2, #8
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 f8e1 	bl	8006020 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d122      	bne.n	8001eae <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e014      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb27 	bl	80024ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d3e5      	bcc.n	8001e7a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f8b4 	bl	8006020 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec2:	d13b      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	e02b      	b.n	8001f22 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3340      	adds	r3, #64	; 0x40
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d115      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da12      	bge.n	8001f1c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	333f      	adds	r3, #63	; 0x3f
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fae8 	bl	80024ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3ce      	bcc.n	8001eca <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 f86d 	bl	8006020 <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f50:	d155      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e045      	b.n	8001fe4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d12e      	bne.n	8001fde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da2b      	bge.n	8001fde <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d121      	bne.n	8001fde <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6053      	str	r3, [r2, #4]
            break;
 8001fdc:	e007      	b.n	8001fee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3b4      	bcc.n	8001f58 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 f80c 	bl	8006020 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d10a      	bne.n	800202a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f006 fcb1 	bl	800897c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fff6 	bl	8006020 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	d115      	bne.n	800206a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f006 fca1 	bl	8008998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	e000      	b.n	800206a <HAL_PCD_IRQHandler+0x992>
      return;
 8002068:	bf00      	nop
    }
  }
}
 800206a:	3734      	adds	r7, #52	; 0x34
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}

08002070 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_PCD_SetAddress+0x1a>
 8002086:	2302      	movs	r3, #2
 8002088:	e013      	b.n	80020b2 <HAL_PCD_SetAddress+0x42>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 ff54 	bl	8005f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	4608      	mov	r0, r1
 80020c4:	4611      	mov	r1, r2
 80020c6:	461a      	mov	r2, r3
 80020c8:	4603      	mov	r3, r0
 80020ca:	70fb      	strb	r3, [r7, #3]
 80020cc:	460b      	mov	r3, r1
 80020ce:	803b      	strh	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	da0f      	bge.n	8002100 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 020f 	and.w	r2, r3, #15
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	3338      	adds	r3, #56	; 0x38
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	705a      	strb	r2, [r3, #1]
 80020fe:	e00f      	b.n	8002120 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	3304      	adds	r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800212c:	883a      	ldrh	r2, [r7, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	78ba      	ldrb	r2, [r7, #2]
 8002136:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800214a:	78bb      	ldrb	r3, [r7, #2]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d102      	bne.n	8002156 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_EP_Open+0xaa>
 8002160:	2302      	movs	r3, #2
 8002162:	e00e      	b.n	8002182 <HAL_PCD_EP_Open+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f002 ffd4 	bl	8005120 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002180:	7afb      	ldrb	r3, [r7, #11]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da0f      	bge.n	80021be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3338      	adds	r3, #56	; 0x38
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	705a      	strb	r2, [r3, #1]
 80021bc:	e00f      	b.n	80021de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 020f 	and.w	r2, r3, #15
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Close+0x6e>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Close+0x8c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 f812 	bl	8005230 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2200      	movs	r2, #0
 8002258:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002260:	7afb      	ldrb	r3, [r7, #11]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	b2da      	uxtb	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	6979      	ldr	r1, [r7, #20]
 8002292:	f003 faf1 	bl	8005878 <USB_EP0StartXfer>
 8002296:	e008      	b.n	80022aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f003 f89f 	bl	80053e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	f003 020f 	and.w	r2, r3, #15
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3338      	adds	r3, #56	; 0x38
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2201      	movs	r2, #1
 8002322:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	b2da      	uxtb	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	f003 fa8f 	bl	8005878 <USB_EP0StartXfer>
 800235a:	e008      	b.n	800236e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6979      	ldr	r1, [r7, #20]
 800236a:	f003 f83d 	bl	80053e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	d901      	bls.n	8002396 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e050      	b.n	8002438 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	da0f      	bge.n	80023be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 020f 	and.w	r2, r3, #15
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3338      	adds	r3, #56	; 0x38
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	705a      	strb	r2, [r3, #1]
 80023bc:	e00d      	b.n	80023da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	3304      	adds	r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_PCD_EP_SetStall+0x82>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e01e      	b.n	8002438 <HAL_PCD_EP_SetStall+0xc0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fccd 	bl	8005da8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	b2d9      	uxtb	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002428:	461a      	mov	r2, r3
 800242a:	f003 febd 	bl	80061a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d901      	bls.n	800245e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e042      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800245e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da0f      	bge.n	8002486 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 020f 	and.w	r2, r3, #15
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3338      	adds	r3, #56	; 0x38
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	705a      	strb	r2, [r3, #1]
 8002484:	e00f      	b.n	80024a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_EP_ClrStall+0x86>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e00e      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0xa4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fcd5 	bl	8005e84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da0c      	bge.n	800251a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	3338      	adds	r3, #56	; 0x38
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	3304      	adds	r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e00c      	b.n	8002534 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 020f 	and.w	r2, r3, #15
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 faf4 	bl	8005b28 <USB_EPStopXfer>
 8002540:	4603      	mov	r3, r0
 8002542:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002544:	7afb      	ldrb	r3, [r7, #11]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08a      	sub	sp, #40	; 0x28
 8002552:	af02      	add	r7, sp, #8
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	3338      	adds	r3, #56	; 0x38
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	429a      	cmp	r2, r3
 8002580:	d901      	bls.n	8002586 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06c      	b.n	8002660 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	429a      	cmp	r2, r3
 800259a:	d902      	bls.n	80025a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3303      	adds	r3, #3
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025aa:	e02b      	b.n	8002604 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d902      	bls.n	80025c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3303      	adds	r3, #3
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4603      	mov	r3, r0
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f003 fb48 	bl	8005c7c <USB_WritePacket>

    ep->xfer_buff  += len;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	441a      	add	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	441a      	add	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	b29b      	uxth	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	429a      	cmp	r2, r3
 8002618:	d809      	bhi.n	800262e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002622:	429a      	cmp	r2, r3
 8002624:	d203      	bcs.n	800262e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1be      	bne.n	80025ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	429a      	cmp	r2, r3
 8002638:	d811      	bhi.n	800265e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	43db      	mvns	r3, r3
 8002654:	6939      	ldr	r1, [r7, #16]
 8002656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800265a:	4013      	ands	r3, r2
 800265c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	333c      	adds	r3, #60	; 0x3c
 8002680:	3304      	adds	r3, #4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d17b      	bne.n	8002796 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	4a61      	ldr	r2, [pc, #388]	; (8002830 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f240 80b9 	bls.w	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80b3 	beq.w	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ca:	461a      	mov	r2, r3
 80026cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d0:	6093      	str	r3, [r2, #8]
 80026d2:	e0a7      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	461a      	mov	r2, r3
 80026ec:	2320      	movs	r3, #32
 80026ee:	6093      	str	r3, [r2, #8]
 80026f0:	e098      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 8093 	bne.w	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d90f      	bls.n	8002726 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002722:	6093      	str	r3, [r2, #8]
 8002724:	e07e      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	440b      	add	r3, r1
 8002748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002752:	1ad2      	subs	r2, r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d114      	bne.n	8002788 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002770:	461a      	mov	r2, r3
 8002772:	2101      	movs	r1, #1
 8002774:	f003 fd18 	bl	80061a8 <USB_EP0_OutStart>
 8002778:	e006      	b.n	8002788 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	441a      	add	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 f830 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
 8002794:	e046      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d124      	bne.n	80027e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ba:	6093      	str	r3, [r2, #8]
 80027bc:	e032      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	2320      	movs	r3, #32
 80027d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f006 f807 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
 80027e6:	e01d      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d114      	bne.n	8002818 <PCD_EP_OutXfrComplete_int+0x1b0>
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002810:	461a      	mov	r2, r3
 8002812:	2100      	movs	r1, #0
 8002814:	f003 fcc8 	bl	80061a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f005 ffe8 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	4f54300a 	.word	0x4f54300a
 8002834:	4f54310a 	.word	0x4f54310a

08002838 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	333c      	adds	r3, #60	; 0x3c
 8002850:	3304      	adds	r3, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d90e      	bls.n	800288c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800288a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f005 ff9f 	bl	80087d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d90c      	bls.n	80028b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ac:	461a      	mov	r2, r3
 80028ae:	2101      	movs	r1, #1
 80028b0:	f003 fc7a 	bl	80061a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	4f54300a 	.word	0x4f54300a

080028c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	4613      	mov	r3, r2
 80028d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028e2:	883b      	ldrh	r3, [r7, #0]
 80028e4:	0419      	lsls	r1, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
 80028f0:	e028      	b.n	8002944 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e00d      	b.n	8002922 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3340      	adds	r3, #64	; 0x40
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	3301      	adds	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	3b01      	subs	r3, #1
 8002928:	429a      	cmp	r2, r3
 800292a:	d3ec      	bcc.n	8002906 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800292c:	883b      	ldrh	r3, [r7, #0]
 800292e:	0418      	lsls	r0, r3, #16
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	3b01      	subs	r3, #1
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	4302      	orrs	r2, r0
 800293c:	3340      	adds	r3, #64	; 0x40
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	f043 0303 	orr.w	r3, r3, #3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe f9ce 	bl	8000e4c <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe f9ca 	bl	8000e4c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 fb7f 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f92e 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	080097a0 	.word	0x080097a0
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	080097b0 	.word	0x080097b0

08002bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bcc:	f7ff ffdc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0b5b      	lsrs	r3, r3, #13
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	080097b0 	.word	0x080097b0

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	; 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	496c      	ldr	r1, [pc, #432]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c56:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	4960      	ldr	r1, [pc, #384]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c74:	2301      	movs	r3, #1
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c84:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4955      	ldr	r1, [pc, #340]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc0:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	4946      	ldr	r1, [pc, #280]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002cec:	2301      	movs	r3, #1
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 808a 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a33      	ldr	r2, [pc, #204]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d26:	f7fe f891 	bl	8000e4c <HAL_GetTick>
 8002d2a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe f88d 	bl	8000e4c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e278      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d54:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02f      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d028      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d80:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d114      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe f85b 	bl	8000e4c <HAL_GetTick>
 8002d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe f857 	bl	8000e4c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e240      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc8:	d114      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dde:	4902      	ldr	r1, [pc, #8]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	e00c      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42470e40 	.word	0x42470e40
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	4944      	ldr	r1, [pc, #272]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	492e      	ldr	r1, [pc, #184]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d011      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	4926      	ldr	r1, [pc, #152]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e96:	d101      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	491a      	ldr	r1, [pc, #104]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	4911      	ldr	r1, [pc, #68]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee8:	d101      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efc:	f040 80ff 	bne.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f06:	f7fd ffa1 	bl	8000e4c <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f0e:	f7fd ff9d 	bl	8000e4c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d907      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e188      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f20:	40023800 	.word	0x40023800
 8002f24:	424711e0 	.word	0x424711e0
 8002f28:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2c:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d028      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d124      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f60:	4b71      	ldr	r3, [pc, #452]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f72:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f78:	0e1b      	lsrs	r3, r3, #24
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	019b      	lsls	r3, r3, #6
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	3b01      	subs	r3, #1
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	4961      	ldr	r1, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d035      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d130      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe8:	4b4f      	ldr	r3, [pc, #316]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fee:	0f1b      	lsrs	r3, r3, #28
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	019b      	lsls	r3, r3, #6
 8003000:	431a      	orrs	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	071b      	lsls	r3, r3, #28
 8003018:	4943      	ldr	r1, [pc, #268]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003026:	f023 021f 	bic.w	r2, r3, #31
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	493d      	ldr	r1, [pc, #244]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d029      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304c:	d124      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003060:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003066:	0f1b      	lsrs	r3, r3, #28
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	019b      	lsls	r3, r3, #6
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	071b      	lsls	r3, r3, #28
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	4917      	ldr	r1, [pc, #92]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fd feb8 	bl	8000e4c <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030e0:	f7fd feb4 	bl	8000e4c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e09f      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 8095 	bne.w	8003230 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd fe9e 	bl	8000e4c <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003112:	e00f      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003114:	f7fd fe9a 	bl	8000e4c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d908      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e085      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	42470068 	.word	0x42470068
 8003130:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003134:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800313c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003140:	d0e8      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800315e:	2b00      	cmp	r3, #0
 8003160:	d02b      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2b00      	cmp	r3, #0
 8003168:	d127      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	019b      	lsls	r3, r3, #6
 8003186:	431a      	orrs	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	061b      	lsls	r3, r3, #24
 8003198:	4928      	ldr	r1, [pc, #160]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	3b01      	subs	r3, #1
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d01d      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ce:	d118      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	0e1b      	lsrs	r3, r3, #24
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	019b      	lsls	r3, r3, #6
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	4910      	ldr	r1, [pc, #64]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003208:	f7fd fe20 	bl	8000e4c <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003210:	f7fd fe1c 	bl	8000e4c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e007      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322e:	d1ef      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3730      	adds	r7, #48	; 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	42470070 	.word	0x42470070

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b0ae      	sub	sp, #184	; 0xb8
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326a:	4bcb      	ldr	r3, [pc, #812]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b0c      	cmp	r3, #12
 8003274:	f200 8206 	bhi.w	8003684 <HAL_RCC_GetSysClockFreq+0x440>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <HAL_RCC_GetSysClockFreq+0x3c>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032b5 	.word	0x080032b5
 8003284:	08003685 	.word	0x08003685
 8003288:	08003685 	.word	0x08003685
 800328c:	08003685 	.word	0x08003685
 8003290:	080032bd 	.word	0x080032bd
 8003294:	08003685 	.word	0x08003685
 8003298:	08003685 	.word	0x08003685
 800329c:	08003685 	.word	0x08003685
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	08003685 	.word	0x08003685
 80032a8:	08003685 	.word	0x08003685
 80032ac:	08003685 	.word	0x08003685
 80032b0:	080034b5 	.word	0x080034b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4bb9      	ldr	r3, [pc, #740]	; (800359c <HAL_RCC_GetSysClockFreq+0x358>)
 80032b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032ba:	e1e7      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4bb8      	ldr	r3, [pc, #736]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032c2:	e1e3      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4bb4      	ldr	r3, [pc, #720]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d0:	4bb1      	ldr	r3, [pc, #708]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d071      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032dc:	4bae      	ldr	r3, [pc, #696]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	099b      	lsrs	r3, r3, #6
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003302:	4622      	mov	r2, r4
 8003304:	462b      	mov	r3, r5
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4621      	mov	r1, r4
 800331c:	1a51      	subs	r1, r2, r1
 800331e:	6439      	str	r1, [r7, #64]	; 0x40
 8003320:	4629      	mov	r1, r5
 8003322:	eb63 0301 	sbc.w	r3, r3, r1
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003334:	4649      	mov	r1, r9
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	4641      	mov	r1, r8
 800333a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800333e:	4641      	mov	r1, r8
 8003340:	018a      	lsls	r2, r1, #6
 8003342:	4641      	mov	r1, r8
 8003344:	1a51      	subs	r1, r2, r1
 8003346:	63b9      	str	r1, [r7, #56]	; 0x38
 8003348:	4649      	mov	r1, r9
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800335c:	4649      	mov	r1, r9
 800335e:	00cb      	lsls	r3, r1, #3
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003366:	4641      	mov	r1, r8
 8003368:	00ca      	lsls	r2, r1, #3
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	4603      	mov	r3, r0
 8003370:	4622      	mov	r2, r4
 8003372:	189b      	adds	r3, r3, r2
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
 8003376:	462b      	mov	r3, r5
 8003378:	460a      	mov	r2, r1
 800337a:	eb42 0303 	adc.w	r3, r2, r3
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800338c:	4629      	mov	r1, r5
 800338e:	024b      	lsls	r3, r1, #9
 8003390:	4621      	mov	r1, r4
 8003392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003396:	4621      	mov	r1, r4
 8003398:	024a      	lsls	r2, r1, #9
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033b0:	f7fc ff7e 	bl	80002b0 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033be:	e067      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033da:	2300      	movs	r3, #0
 80033dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80033e2:	4622      	mov	r2, r4
 80033e4:	462b      	mov	r3, r5
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4621      	mov	r1, r4
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003400:	4629      	mov	r1, r5
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003414:	4649      	mov	r1, r9
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4641      	mov	r1, r8
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4641      	mov	r1, r8
 8003424:	ebb2 0a01 	subs.w	sl, r2, r1
 8003428:	4649      	mov	r1, r9
 800342a:	eb63 0b01 	sbc.w	fp, r3, r1
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800343e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003442:	4692      	mov	sl, r2
 8003444:	469b      	mov	fp, r3
 8003446:	4623      	mov	r3, r4
 8003448:	eb1a 0303 	adds.w	r3, sl, r3
 800344c:	623b      	str	r3, [r7, #32]
 800344e:	462b      	mov	r3, r5
 8003450:	eb4b 0303 	adc.w	r3, fp, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003478:	2200      	movs	r2, #0
 800347a:	673b      	str	r3, [r7, #112]	; 0x70
 800347c:	677a      	str	r2, [r7, #116]	; 0x74
 800347e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003482:	f7fc ff15 	bl	80002b0 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4613      	mov	r3, r2
 800348c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003490:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034b2:	e0eb      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d06b      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	2200      	movs	r2, #0
 80034d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	663b      	str	r3, [r7, #96]	; 0x60
 80034e0:	2300      	movs	r3, #0
 80034e2:	667b      	str	r3, [r7, #100]	; 0x64
 80034e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034e8:	4622      	mov	r2, r4
 80034ea:	462b      	mov	r3, r5
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0159      	lsls	r1, r3, #5
 80034f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fa:	0150      	lsls	r0, r2, #5
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4621      	mov	r1, r4
 8003502:	1a51      	subs	r1, r2, r1
 8003504:	61b9      	str	r1, [r7, #24]
 8003506:	4629      	mov	r1, r5
 8003508:	eb63 0301 	sbc.w	r3, r3, r1
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800351a:	4659      	mov	r1, fp
 800351c:	018b      	lsls	r3, r1, #6
 800351e:	4651      	mov	r1, sl
 8003520:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003524:	4651      	mov	r1, sl
 8003526:	018a      	lsls	r2, r1, #6
 8003528:	4651      	mov	r1, sl
 800352a:	ebb2 0801 	subs.w	r8, r2, r1
 800352e:	4659      	mov	r1, fp
 8003530:	eb63 0901 	sbc.w	r9, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003548:	4690      	mov	r8, r2
 800354a:	4699      	mov	r9, r3
 800354c:	4623      	mov	r3, r4
 800354e:	eb18 0303 	adds.w	r3, r8, r3
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	462b      	mov	r3, r5
 8003556:	eb49 0303 	adc.w	r3, r9, r3
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	024b      	lsls	r3, r1, #9
 800356c:	4621      	mov	r1, r4
 800356e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003572:	4621      	mov	r1, r4
 8003574:	024a      	lsls	r2, r1, #9
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800357e:	2200      	movs	r2, #0
 8003580:	65bb      	str	r3, [r7, #88]	; 0x58
 8003582:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003584:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003588:	f7fc fe92 	bl	80002b0 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003596:	e065      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x420>
 8003598:	40023800 	.word	0x40023800
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <HAL_RCC_GetSysClockFreq+0x458>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	2200      	movs	r2, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	4611      	mov	r1, r2
 80035b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b4:	653b      	str	r3, [r7, #80]	; 0x50
 80035b6:	2300      	movs	r3, #0
 80035b8:	657b      	str	r3, [r7, #84]	; 0x54
 80035ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035be:	4642      	mov	r2, r8
 80035c0:	464b      	mov	r3, r9
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4641      	mov	r1, r8
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	4649      	mov	r1, r9
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035f0:	4659      	mov	r1, fp
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4651      	mov	r1, sl
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4651      	mov	r1, sl
 8003600:	1a54      	subs	r4, r2, r1
 8003602:	4659      	mov	r1, fp
 8003604:	eb63 0501 	sbc.w	r5, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	464b      	mov	r3, r9
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364c:	2200      	movs	r2, #0
 800364e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003650:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003652:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003656:	f7fc fe2b 	bl	80002b0 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4613      	mov	r3, r2
 8003660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <HAL_RCC_GetSysClockFreq+0x458>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	0f1b      	lsrs	r3, r3, #28
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800367a:	fbb2 f3f3 	udiv	r3, r2, r3
 800367e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003682:	e003      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800368a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003690:	4618      	mov	r0, r3
 8003692:	37b8      	adds	r7, #184	; 0xb8
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400

080036a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e28d      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8083 	beq.w	80037ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036c4:	4b94      	ldr	r3, [pc, #592]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d019      	beq.n	8003704 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d0:	4b91      	ldr	r3, [pc, #580]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036dc:	4b8e      	ldr	r3, [pc, #568]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d00c      	beq.n	8003704 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ea:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d112      	bne.n	800371c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003702:	d10b      	bne.n	800371c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d05b      	beq.n	80037c8 <HAL_RCC_OscConfig+0x124>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d157      	bne.n	80037c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e25a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d106      	bne.n	8003734 <HAL_RCC_OscConfig+0x90>
 8003726:	4b7c      	ldr	r3, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7b      	ldr	r2, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xcc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xb4>
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a75      	ldr	r2, [pc, #468]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xcc>
 8003758:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6b      	ldr	r2, [pc, #428]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fb68 	bl	8000e4c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fb64 	bl	8000e4c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e21f      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b61      	ldr	r3, [pc, #388]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xdc>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fb54 	bl	8000e4c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fb50 	bl	8000e4c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e20b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x104>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d06f      	beq.n	80038b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d017      	beq.n	8003812 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d105      	bne.n	80037fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d11c      	bne.n	8003840 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b44      	ldr	r3, [pc, #272]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x186>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1d3      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4937      	ldr	r1, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e03a      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCC_OscConfig+0x278>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fd fafd 	bl	8000e4c <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003856:	f7fd faf9 	bl	8000e4c <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1b4      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4925      	ldr	r1, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	e015      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x278>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fd fadc 	bl	8000e4c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003898:	f7fd fad8 	bl	8000e4c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e193      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d036      	beq.n	8003930 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fd fabc 	bl	8000e4c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fd fab8 	bl	8000e4c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e173      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80038ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x234>
 80038f6:	e01b      	b.n	8003930 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_OscConfig+0x27c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd faa5 	bl	8000e4c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	e00e      	b.n	8003924 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd faa1 	bl	8000e4c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d907      	bls.n	8003924 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e15c      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
 8003918:	40023800 	.word	0x40023800
 800391c:	42470000 	.word	0x42470000
 8003920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003924:	4b8a      	ldr	r3, [pc, #552]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ea      	bne.n	8003906 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8097 	beq.w	8003a6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003942:	4b83      	ldr	r3, [pc, #524]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	4b7f      	ldr	r3, [pc, #508]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a7e      	ldr	r2, [pc, #504]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b7c      	ldr	r3, [pc, #496]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCC_OscConfig+0x4b0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d118      	bne.n	80039ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x4b0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a75      	ldr	r2, [pc, #468]	; (8003b54 <HAL_RCC_OscConfig+0x4b0>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fd fa61 	bl	8000e4c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fd fa5d 	bl	8000e4c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e118      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	4b6c      	ldr	r3, [pc, #432]	; (8003b54 <HAL_RCC_OscConfig+0x4b0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x31e>
 80039b4:	4b66      	ldr	r3, [pc, #408]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e01c      	b.n	80039fc <HAL_RCC_OscConfig+0x358>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x340>
 80039ca:	4b61      	ldr	r3, [pc, #388]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a60      	ldr	r2, [pc, #384]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
 80039d6:	4b5e      	ldr	r3, [pc, #376]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0x358>
 80039e4:	4b5a      	ldr	r3, [pc, #360]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd fa22 	bl	8000e4c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fa1e 	bl	8000e4c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0d7      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ee      	beq.n	8003a0c <HAL_RCC_OscConfig+0x368>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fa0c 	bl	8000e4c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd fa08 	bl	8000e4c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0c1      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4e:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ee      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	4a3a      	ldr	r2, [pc, #232]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80ad 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d060      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d145      	bne.n	8003b16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x4b4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd f9dc 	bl	8000e4c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd f9d8 	bl	8000e4c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e093      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	491b      	ldr	r1, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4b4>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fd f9ad 	bl	8000e4c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fd f9a9 	bl	8000e4c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e064      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x452>
 8003b14:	e05c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_RCC_OscConfig+0x4b4>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd f996 	bl	8000e4c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd f992 	bl	8000e4c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e04d      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x480>
 8003b42:	e045      	b.n	8003bd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e040      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b5c:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <HAL_RCC_OscConfig+0x538>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d030      	beq.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d129      	bne.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d122      	bne.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d119      	bne.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10f      	bne.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800

08003be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07b      	b.n	8003cea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d009      	beq.n	8003c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
 8003c0a:	e005      	b.n	8003c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc ff6e 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	ea42 0103 	orr.w	r1, r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0104 	and.w	r1, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0210 	and.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b088      	sub	sp, #32
 8003cf6:	af02      	add	r7, sp, #8
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0e:	d112      	bne.n	8003d36 <HAL_SPI_Receive+0x44>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10e      	bne.n	8003d36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f8f1 	bl	8003f14 <HAL_SPI_TransmitReceive>
 8003d32:	4603      	mov	r3, r0
 8003d34:	e0ea      	b.n	8003f0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_SPI_Receive+0x52>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0e3      	b.n	8003f0c <HAL_SPI_Receive+0x21a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d4c:	f7fd f87e 	bl	8000e4c <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d62:	e0ca      	b.n	8003efa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Receive+0x7e>
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d74:	e0c1      	b.n	8003efa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d10f      	bne.n	8003dde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d007      	beq.n	8003dfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d162      	bne.n	8003eca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e04:	e02e      	b.n	8003e64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d115      	bne.n	8003e40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f103 020c 	add.w	r2, r3, #12
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e3e:	e011      	b.n	8003e64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e40:	f7fd f804 	bl	8000e4c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d803      	bhi.n	8003e58 <HAL_SPI_Receive+0x166>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d102      	bne.n	8003e5e <HAL_SPI_Receive+0x16c>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e62:	e04a      	b.n	8003efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1cb      	bne.n	8003e06 <HAL_SPI_Receive+0x114>
 8003e6e:	e031      	b.n	8003ed4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d113      	bne.n	8003ea6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ea4:	e011      	b.n	8003eca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea6:	f7fc ffd1 	bl	8000e4c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d803      	bhi.n	8003ebe <HAL_SPI_Receive+0x1cc>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d102      	bne.n	8003ec4 <HAL_SPI_Receive+0x1d2>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ec8:	e017      	b.n	8003efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1cd      	bne.n	8003e70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fa45 	bl	8004368 <SPI_EndRxTransaction>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
 8003ef6:	e000      	b.n	8003efa <HAL_SPI_Receive+0x208>
  }

error :
 8003ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	; 0x30
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f22:	2301      	movs	r3, #1
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x26>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e18a      	b.n	8004250 <HAL_SPI_TransmitReceive+0x33c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f42:	f7fc ff83 	bl	8000e4c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d00f      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x70>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6a:	d107      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x68>
 8003f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d003      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f82:	e15b      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x82>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x82>
 8003f90:	887b      	ldrh	r3, [r7, #2]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f9c:	e14e      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2205      	movs	r2, #5
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	887a      	ldrh	r2, [r7, #2]
 8003fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	887a      	ldrh	r2, [r7, #2]
 8003fd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d007      	beq.n	8004006 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400e:	d178      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_SPI_TransmitReceive+0x10a>
 8004018:	8b7b      	ldrh	r3, [r7, #26]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d166      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	881a      	ldrh	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	1c9a      	adds	r2, r3, #2
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004042:	e053      	b.n	80040ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	d11b      	bne.n	800408a <HAL_SPI_TransmitReceive+0x176>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <HAL_SPI_TransmitReceive+0x176>
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b01      	cmp	r3, #1
 8004060:	d113      	bne.n	800408a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	1c9a      	adds	r2, r3, #2
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d119      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x1b8>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d014      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	b292      	uxth	r2, r2
 80040ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040c8:	2301      	movs	r3, #1
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040cc:	f7fc febe 	bl	8000e4c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d8:	429a      	cmp	r2, r3
 80040da:	d807      	bhi.n	80040ec <HAL_SPI_TransmitReceive+0x1d8>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d003      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040ea:	e0a7      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1a6      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x130>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1a1      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x130>
 8004100:	e07c      	b.n	80041fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x1fc>
 800410a:	8b7b      	ldrh	r3, [r7, #26]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d16b      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004136:	e057      	b.n	80041e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d11c      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x26c>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d017      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x26c>
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d114      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d119      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x2ae>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041c2:	f7fc fe43 	bl	8000e4c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_TransmitReceive+0x2c6>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_TransmitReceive+0x2cc>
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041e6:	e029      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1a2      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x224>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d19d      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f917 	bl	8004434 <SPI_EndRxTxTransaction>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004218:	e010      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	e000      	b.n	800423c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800423a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800424c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004250:	4618      	mov	r0, r3
 8004252:	3730      	adds	r7, #48	; 0x30
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004268:	f7fc fdf0 	bl	8000e4c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004278:	f7fc fde8 	bl	8000e4c <HAL_GetTick>
 800427c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800427e:	4b39      	ldr	r3, [pc, #228]	; (8004364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	015b      	lsls	r3, r3, #5
 8004284:	0d1b      	lsrs	r3, r3, #20
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	fb02 f303 	mul.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428e:	e054      	b.n	800433a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d050      	beq.n	800433a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004298:	f7fc fdd8 	bl	8000e4c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d902      	bls.n	80042ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d13d      	bne.n	800432a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c6:	d111      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d0:	d004      	beq.n	80042dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d107      	bne.n	80042ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f4:	d10f      	bne.n	8004316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e017      	b.n	800435a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3b01      	subs	r3, #1
 8004338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	429a      	cmp	r2, r3
 8004356:	d19b      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000000 	.word	0x20000000

08004368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800437c:	d111      	bne.n	80043a2 <SPI_EndRxTransaction+0x3a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004386:	d004      	beq.n	8004392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004390:	d107      	bne.n	80043a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043aa:	d12a      	bne.n	8004402 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d012      	beq.n	80043dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff ff49 	bl	8004258 <SPI_WaitFlagStateUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02d      	beq.n	8004428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e026      	b.n	800442a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2200      	movs	r2, #0
 80043e4:	2101      	movs	r1, #1
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff ff36 	bl	8004258 <SPI_WaitFlagStateUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01a      	beq.n	8004428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e013      	b.n	800442a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2200      	movs	r2, #0
 800440a:	2101      	movs	r1, #1
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff23 	bl	8004258 <SPI_WaitFlagStateUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e000      	b.n	800442a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <SPI_EndRxTxTransaction+0x7c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <SPI_EndRxTxTransaction+0x80>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0d5b      	lsrs	r3, r3, #21
 800444c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d112      	bne.n	8004486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff fef4 	bl	8004258 <SPI_WaitFlagStateUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00f      	b.n	80044a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d0f2      	beq.n	8004486 <SPI_EndRxTxTransaction+0x52>
 80044a0:	e000      	b.n	80044a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044a2:	bf00      	nop
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000
 80044b4:	165e9f81 	.word	0x165e9f81

080044b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e03f      	b.n	800454a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fc fb60 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f829 	bl	8004554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004558:	b0c0      	sub	sp, #256	; 0x100
 800455a:	af00      	add	r7, sp, #0
 800455c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	68d9      	ldr	r1, [r3, #12]
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	ea40 0301 	orr.w	r3, r0, r1
 800457c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	431a      	orrs	r2, r3
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045ac:	f021 010c 	bic.w	r1, r1, #12
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ba:	430b      	orrs	r3, r1
 80045bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	6999      	ldr	r1, [r3, #24]
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	ea40 0301 	orr.w	r3, r0, r1
 80045da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b8f      	ldr	r3, [pc, #572]	; (8004820 <UART_SetConfig+0x2cc>)
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d005      	beq.n	80045f4 <UART_SetConfig+0xa0>
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8d      	ldr	r3, [pc, #564]	; (8004824 <UART_SetConfig+0x2d0>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d104      	bne.n	80045fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7fe fae8 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 80045f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045fc:	e003      	b.n	8004606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045fe:	f7fe facf 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8004602:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004610:	f040 810c 	bne.w	800482c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800461e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004626:	4622      	mov	r2, r4
 8004628:	462b      	mov	r3, r5
 800462a:	1891      	adds	r1, r2, r2
 800462c:	65b9      	str	r1, [r7, #88]	; 0x58
 800462e:	415b      	adcs	r3, r3
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004636:	4621      	mov	r1, r4
 8004638:	eb12 0801 	adds.w	r8, r2, r1
 800463c:	4629      	mov	r1, r5
 800463e:	eb43 0901 	adc.w	r9, r3, r1
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004656:	4690      	mov	r8, r2
 8004658:	4699      	mov	r9, r3
 800465a:	4623      	mov	r3, r4
 800465c:	eb18 0303 	adds.w	r3, r8, r3
 8004660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004664:	462b      	mov	r3, r5
 8004666:	eb49 0303 	adc.w	r3, r9, r3
 800466a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800467a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800467e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004682:	460b      	mov	r3, r1
 8004684:	18db      	adds	r3, r3, r3
 8004686:	653b      	str	r3, [r7, #80]	; 0x50
 8004688:	4613      	mov	r3, r2
 800468a:	eb42 0303 	adc.w	r3, r2, r3
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
 8004690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004698:	f7fb fe0a 	bl	80002b0 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b61      	ldr	r3, [pc, #388]	; (8004828 <UART_SetConfig+0x2d4>)
 80046a2:	fba3 2302 	umull	r2, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	011c      	lsls	r4, r3, #4
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046c4:	415b      	adcs	r3, r3
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046cc:	4641      	mov	r1, r8
 80046ce:	eb12 0a01 	adds.w	sl, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb43 0b01 	adc.w	fp, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ec:	4692      	mov	sl, r2
 80046ee:	469b      	mov	fp, r3
 80046f0:	4643      	mov	r3, r8
 80046f2:	eb1a 0303 	adds.w	r3, sl, r3
 80046f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046fa:	464b      	mov	r3, r9
 80046fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004710:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004718:	460b      	mov	r3, r1
 800471a:	18db      	adds	r3, r3, r3
 800471c:	643b      	str	r3, [r7, #64]	; 0x40
 800471e:	4613      	mov	r3, r2
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
 8004726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800472a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800472e:	f7fb fdbf 	bl	80002b0 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4611      	mov	r1, r2
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <UART_SetConfig+0x2d4>)
 800473a:	fba3 2301 	umull	r2, r3, r3, r1
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2264      	movs	r2, #100	; 0x64
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	1acb      	subs	r3, r1, r3
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <UART_SetConfig+0x2d4>)
 8004750:	fba3 2302 	umull	r2, r3, r3, r2
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800475c:	441c      	add	r4, r3
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800476c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	63b9      	str	r1, [r7, #56]	; 0x38
 8004778:	415b      	adcs	r3, r3
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6339      	str	r1, [r7, #48]	; 0x30
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b4:	464b      	mov	r3, r9
 80047b6:	460a      	mov	r2, r1
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047d4:	460b      	mov	r3, r1
 80047d6:	18db      	adds	r3, r3, r3
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	4613      	mov	r3, r2
 80047dc:	eb42 0303 	adc.w	r3, r2, r3
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ea:	f7fb fd61 	bl	80002b0 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <UART_SetConfig+0x2d4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a08      	ldr	r2, [pc, #32]	; (8004828 <UART_SetConfig+0x2d4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 0207 	and.w	r2, r3, #7
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4422      	add	r2, r4
 800481a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800481c:	e105      	b.n	8004a2a <UART_SetConfig+0x4d6>
 800481e:	bf00      	nop
 8004820:	40011000 	.word	0x40011000
 8004824:	40011400 	.word	0x40011400
 8004828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800483a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800483e:	4642      	mov	r2, r8
 8004840:	464b      	mov	r3, r9
 8004842:	1891      	adds	r1, r2, r2
 8004844:	6239      	str	r1, [r7, #32]
 8004846:	415b      	adcs	r3, r3
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800484e:	4641      	mov	r1, r8
 8004850:	1854      	adds	r4, r2, r1
 8004852:	4649      	mov	r1, r9
 8004854:	eb43 0501 	adc.w	r5, r3, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	00eb      	lsls	r3, r5, #3
 8004862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004866:	00e2      	lsls	r2, r4, #3
 8004868:	4614      	mov	r4, r2
 800486a:	461d      	mov	r5, r3
 800486c:	4643      	mov	r3, r8
 800486e:	18e3      	adds	r3, r4, r3
 8004870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004874:	464b      	mov	r3, r9
 8004876:	eb45 0303 	adc.w	r3, r5, r3
 800487a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800488a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800489a:	4629      	mov	r1, r5
 800489c:	008b      	lsls	r3, r1, #2
 800489e:	4621      	mov	r1, r4
 80048a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a4:	4621      	mov	r1, r4
 80048a6:	008a      	lsls	r2, r1, #2
 80048a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048ac:	f7fb fd00 	bl	80002b0 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <UART_SetConfig+0x4e4>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	011c      	lsls	r4, r3, #4
 80048be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	61b9      	str	r1, [r7, #24]
 80048d8:	415b      	adcs	r3, r3
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e0:	4641      	mov	r1, r8
 80048e2:	1851      	adds	r1, r2, r1
 80048e4:	6139      	str	r1, [r7, #16]
 80048e6:	4649      	mov	r1, r9
 80048e8:	414b      	adcs	r3, r1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f8:	4659      	mov	r1, fp
 80048fa:	00cb      	lsls	r3, r1, #3
 80048fc:	4651      	mov	r1, sl
 80048fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004902:	4651      	mov	r1, sl
 8004904:	00ca      	lsls	r2, r1, #3
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	4603      	mov	r3, r0
 800490c:	4642      	mov	r2, r8
 800490e:	189b      	adds	r3, r3, r2
 8004910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004914:	464b      	mov	r3, r9
 8004916:	460a      	mov	r2, r1
 8004918:	eb42 0303 	adc.w	r3, r2, r3
 800491c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	67bb      	str	r3, [r7, #120]	; 0x78
 800492a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004938:	4649      	mov	r1, r9
 800493a:	008b      	lsls	r3, r1, #2
 800493c:	4641      	mov	r1, r8
 800493e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004942:	4641      	mov	r1, r8
 8004944:	008a      	lsls	r2, r1, #2
 8004946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800494a:	f7fb fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <UART_SetConfig+0x4e4>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2164      	movs	r1, #100	; 0x64
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	3332      	adds	r3, #50	; 0x32
 8004966:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <UART_SetConfig+0x4e4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004972:	441c      	add	r4, r3
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	673b      	str	r3, [r7, #112]	; 0x70
 800497c:	677a      	str	r2, [r7, #116]	; 0x74
 800497e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004982:	4642      	mov	r2, r8
 8004984:	464b      	mov	r3, r9
 8004986:	1891      	adds	r1, r2, r2
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	415b      	adcs	r3, r3
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004992:	4641      	mov	r1, r8
 8004994:	1851      	adds	r1, r2, r1
 8004996:	6039      	str	r1, [r7, #0]
 8004998:	4649      	mov	r1, r9
 800499a:	414b      	adcs	r3, r1
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049aa:	4659      	mov	r1, fp
 80049ac:	00cb      	lsls	r3, r1, #3
 80049ae:	4651      	mov	r1, sl
 80049b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b4:	4651      	mov	r1, sl
 80049b6:	00ca      	lsls	r2, r1, #3
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	4603      	mov	r3, r0
 80049be:	4642      	mov	r2, r8
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	663b      	str	r3, [r7, #96]	; 0x60
 80049d8:	667a      	str	r2, [r7, #100]	; 0x64
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049e6:	4649      	mov	r1, r9
 80049e8:	008b      	lsls	r3, r1, #2
 80049ea:	4641      	mov	r1, r8
 80049ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f0:	4641      	mov	r1, r8
 80049f2:	008a      	lsls	r2, r1, #2
 80049f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049f8:	f7fb fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <UART_SetConfig+0x4e4>)
 8004a02:	fba3 1302 	umull	r1, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2164      	movs	r1, #100	; 0x64
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	3332      	adds	r3, #50	; 0x32
 8004a14:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <UART_SetConfig+0x4e4>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	f003 020f 	and.w	r2, r3, #15
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4422      	add	r2, r4
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	51eb851f 	.word	0x51eb851f

08004a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	f107 001c 	add.w	r0, r7, #28
 8004a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d122      	bne.n	8004a9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f001 fbe8 	bl	8006264 <USB_CoreReset>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e01a      	b.n	8004ad0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fbdc 	bl	8006264 <USB_CoreReset>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ac2:	e005      	b.n	8004ad0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10b      	bne.n	8004aee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f043 0206 	orr.w	r2, r3, #6
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f043 0220 	orr.w	r2, r3, #32
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004afa:	b004      	add	sp, #16
 8004afc:	4770      	bx	lr
	...

08004b00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d165      	bne.n	8004be0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <USB_SetTurnaroundTime+0x11c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d906      	bls.n	8004b2a <USB_SetTurnaroundTime+0x2a>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a40      	ldr	r2, [pc, #256]	; (8004c20 <USB_SetTurnaroundTime+0x120>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d202      	bcs.n	8004b2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b24:	230f      	movs	r3, #15
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e062      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <USB_SetTurnaroundTime+0x120>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d306      	bcc.n	8004b40 <USB_SetTurnaroundTime+0x40>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <USB_SetTurnaroundTime+0x124>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d202      	bcs.n	8004b40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b3a:	230e      	movs	r3, #14
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e057      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4a38      	ldr	r2, [pc, #224]	; (8004c24 <USB_SetTurnaroundTime+0x124>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d306      	bcc.n	8004b56 <USB_SetTurnaroundTime+0x56>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4a37      	ldr	r2, [pc, #220]	; (8004c28 <USB_SetTurnaroundTime+0x128>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d202      	bcs.n	8004b56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b50:	230d      	movs	r3, #13
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e04c      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4a33      	ldr	r2, [pc, #204]	; (8004c28 <USB_SetTurnaroundTime+0x128>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d306      	bcc.n	8004b6c <USB_SetTurnaroundTime+0x6c>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a32      	ldr	r2, [pc, #200]	; (8004c2c <USB_SetTurnaroundTime+0x12c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d802      	bhi.n	8004b6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b66:	230c      	movs	r3, #12
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e041      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4a2f      	ldr	r2, [pc, #188]	; (8004c2c <USB_SetTurnaroundTime+0x12c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d906      	bls.n	8004b82 <USB_SetTurnaroundTime+0x82>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a2e      	ldr	r2, [pc, #184]	; (8004c30 <USB_SetTurnaroundTime+0x130>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d802      	bhi.n	8004b82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b7c:	230b      	movs	r3, #11
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e036      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <USB_SetTurnaroundTime+0x130>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d906      	bls.n	8004b98 <USB_SetTurnaroundTime+0x98>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <USB_SetTurnaroundTime+0x134>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d802      	bhi.n	8004b98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b92:	230a      	movs	r3, #10
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e02b      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a26      	ldr	r2, [pc, #152]	; (8004c34 <USB_SetTurnaroundTime+0x134>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d906      	bls.n	8004bae <USB_SetTurnaroundTime+0xae>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <USB_SetTurnaroundTime+0x138>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d202      	bcs.n	8004bae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ba8:	2309      	movs	r3, #9
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e020      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <USB_SetTurnaroundTime+0x138>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d306      	bcc.n	8004bc4 <USB_SetTurnaroundTime+0xc4>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <USB_SetTurnaroundTime+0x13c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d802      	bhi.n	8004bc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e015      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <USB_SetTurnaroundTime+0x13c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d906      	bls.n	8004bda <USB_SetTurnaroundTime+0xda>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <USB_SetTurnaroundTime+0x140>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d202      	bcs.n	8004bda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bd4:	2307      	movs	r3, #7
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e00a      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bda:	2306      	movs	r3, #6
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e007      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004be6:	2309      	movs	r3, #9
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e001      	b.n	8004bf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bec:	2309      	movs	r3, #9
 8004bee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	00d8acbf 	.word	0x00d8acbf
 8004c20:	00e4e1c0 	.word	0x00e4e1c0
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	01067380 	.word	0x01067380
 8004c2c:	011a499f 	.word	0x011a499f
 8004c30:	01312cff 	.word	0x01312cff
 8004c34:	014ca43f 	.word	0x014ca43f
 8004c38:	016e3600 	.word	0x016e3600
 8004c3c:	01a6ab1f 	.word	0x01a6ab1f
 8004c40:	01e84800 	.word	0x01e84800

08004c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f043 0201 	orr.w	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d115      	bne.n	8004cd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cb6:	2001      	movs	r0, #1
 8004cb8:	f7fc f8d4 	bl	8000e64 <HAL_Delay>
      ms++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 fa3f 	bl	8006146 <USB_GetMode>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d01e      	beq.n	8004d0c <USB_SetCurrentMode+0x84>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b31      	cmp	r3, #49	; 0x31
 8004cd2:	d9f0      	bls.n	8004cb6 <USB_SetCurrentMode+0x2e>
 8004cd4:	e01a      	b.n	8004d0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d115      	bne.n	8004d08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f7fc f8bb 	bl	8000e64 <HAL_Delay>
      ms++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 fa26 	bl	8006146 <USB_GetMode>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <USB_SetCurrentMode+0x84>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b31      	cmp	r3, #49	; 0x31
 8004d04:	d9f0      	bls.n	8004ce8 <USB_SetCurrentMode+0x60>
 8004d06:	e001      	b.n	8004d0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e005      	b.n	8004d18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b32      	cmp	r3, #50	; 0x32
 8004d10:	d101      	bne.n	8004d16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d20:	b084      	sub	sp, #16
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e009      	b.n	8004d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3340      	adds	r3, #64	; 0x40
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3301      	adds	r3, #1
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b0e      	cmp	r3, #14
 8004d58:	d9f2      	bls.n	8004d40 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11c      	bne.n	8004d9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e005      	b.n	8004da6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dac:	461a      	mov	r2, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	4619      	mov	r1, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10c      	bne.n	8004de6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f965 	bl	80050a4 <USB_SetDevSpeed>
 8004dda:	e008      	b.n	8004dee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f960 	bl	80050a4 <USB_SetDevSpeed>
 8004de4:	e003      	b.n	8004dee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004de6:	2103      	movs	r1, #3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f95b 	bl	80050a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dee:	2110      	movs	r1, #16
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8f3 	bl	8004fdc <USB_FlushTxFifo>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f91f 	bl	8005044 <USB_FlushRxFifo>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e16:	461a      	mov	r2, r3
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e043      	b.n	8004ec2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e50:	d118      	bne.n	8004e84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e013      	b.n	8004e96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e008      	b.n	8004e96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	461a      	mov	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3b7      	bcc.n	8004e3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e043      	b.n	8004f58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee6:	d118      	bne.n	8004f1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e013      	b.n	8004f2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	461a      	mov	r2, r3
 8004f12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e008      	b.n	8004f2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3301      	adds	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d3b7      	bcc.n	8004ed0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f043 0210 	orr.w	r2, r3, #16
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <USB_DevInit+0x2b8>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d107      	bne.n	8004fc8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fc0:	f043 0304 	orr.w	r3, r3, #4
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fd4:	b004      	add	sp, #16
 8004fd6:	4770      	bx	lr
 8004fd8:	803c3800 	.word	0x803c3800

08004fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <USB_FlushTxFifo+0x64>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e01b      	b.n	8005034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	daf2      	bge.n	8004fea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	019b      	lsls	r3, r3, #6
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <USB_FlushTxFifo+0x64>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e006      	b.n	8005034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d0f0      	beq.n	8005014 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	00030d40 	.word	0x00030d40

08005044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <USB_FlushRxFifo+0x5c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e018      	b.n	8005094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	daf2      	bge.n	8005050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2210      	movs	r2, #16
 8005072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3301      	adds	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <USB_FlushRxFifo+0x5c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e006      	b.n	8005094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b10      	cmp	r3, #16
 8005090:	d0f0      	beq.n	8005074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	00030d40 	.word	0x00030d40

080050a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0306 	and.w	r3, r3, #6
 80050ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
 80050fa:	e00a      	b.n	8005112 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d002      	beq.n	8005108 <USB_GetDevSpeed+0x32>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d102      	bne.n	800510e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005108:	2302      	movs	r3, #2
 800510a:	75fb      	strb	r3, [r7, #23]
 800510c:	e001      	b.n	8005112 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800510e:	230f      	movs	r3, #15
 8005110:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d13a      	bne.n	80051b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f303 	lsl.w	r3, r1, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515a:	4313      	orrs	r3, r2
 800515c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d155      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	791b      	ldrb	r3, [r3, #4]
 800518e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005190:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	059b      	lsls	r3, r3, #22
 8005196:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005198:	4313      	orrs	r3, r2
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e036      	b.n	8005220 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11a      	bne.n	8005220 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	791b      	ldrb	r3, [r3, #4]
 8005204:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005206:	430b      	orrs	r3, r1
 8005208:	4313      	orrs	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d161      	bne.n	8005310 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005262:	d11f      	bne.n	80052a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005282:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2101      	movs	r1, #1
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e8:	4013      	ands	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	0159      	lsls	r1, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	440b      	add	r3, r1
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	4619      	mov	r1, r3
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <USB_DeactivateEndpoint+0x1b0>)
 800530a:	4013      	ands	r3, r2
 800530c:	600b      	str	r3, [r1, #0]
 800530e:	e060      	b.n	80053d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005326:	d11f      	bne.n	8005368 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005346:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005366:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	2101      	movs	r1, #1
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	43db      	mvns	r3, r3
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005388:	4013      	ands	r3, r2
 800538a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2101      	movs	r1, #1
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	43db      	mvns	r3, r3
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4013      	ands	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0159      	lsls	r1, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	4619      	mov	r1, r3
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <USB_DeactivateEndpoint+0x1b4>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	ec337800 	.word	0xec337800
 80053e4:	eff37800 	.word	0xeff37800

080053e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 815c 	bne.w	80056c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d132      	bne.n	8005478 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	0cdb      	lsrs	r3, r3, #19
 8005472:	04db      	lsls	r3, r3, #19
 8005474:	6113      	str	r3, [r2, #16]
 8005476:	e074      	b.n	8005562 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005492:	0cdb      	lsrs	r3, r3, #19
 8005494:	04db      	lsls	r3, r3, #19
 8005496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	440b      	add	r3, r1
 80054d4:	1e59      	subs	r1, r3, #1
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	fbb1 f3f3 	udiv	r3, r1, r3
 80054de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054e0:	4b9d      	ldr	r3, [pc, #628]	; (8005758 <USB_EPStartXfer+0x370>)
 80054e2:	400b      	ands	r3, r1
 80054e4:	69b9      	ldr	r1, [r7, #24]
 80054e6:	0148      	lsls	r0, r1, #5
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	4401      	add	r1, r0
 80054ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054f0:	4313      	orrs	r3, r2
 80054f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	0148      	lsls	r0, r1, #5
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	4401      	add	r1, r0
 8005512:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005516:	4313      	orrs	r3, r2
 8005518:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	791b      	ldrb	r3, [r3, #4]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d11f      	bne.n	8005562 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005540:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005560:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d14b      	bne.n	8005600 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	791b      	ldrb	r3, [r3, #4]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d128      	bne.n	80055de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d110      	bne.n	80055be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e00f      	b.n	80055de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e133      	b.n	8005868 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800561e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	791b      	ldrb	r3, [r3, #4]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d015      	beq.n	8005654 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 811b 	beq.w	8005868 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564e:	4313      	orrs	r3, r2
 8005650:	634b      	str	r3, [r1, #52]	; 0x34
 8005652:	e109      	b.n	8005868 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d110      	bne.n	8005686 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e00f      	b.n	80056a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6919      	ldr	r1, [r3, #16]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	b298      	uxth	r0, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	4603      	mov	r3, r0
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fade 	bl	8005c7c <USB_WritePacket>
 80056c0:	e0d2      	b.n	8005868 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	0cdb      	lsrs	r3, r3, #19
 80056de:	04db      	lsls	r3, r3, #19
 80056e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005704:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d126      	bne.n	800575c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	0148      	lsls	r0, r1, #5
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	4401      	add	r1, r0
 800572c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005730:	4313      	orrs	r3, r2
 8005732:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005752:	6113      	str	r3, [r2, #16]
 8005754:	e03a      	b.n	80057cc <USB_EPStartXfer+0x3e4>
 8005756:	bf00      	nop
 8005758:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4413      	add	r3, r2
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	8afa      	ldrh	r2, [r7, #22]
 8005778:	fb03 f202 	mul.w	r2, r3, r2
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	8afb      	ldrh	r3, [r7, #22]
 8005790:	04d9      	lsls	r1, r3, #19
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <USB_EPStartXfer+0x48c>)
 8005794:	400b      	ands	r3, r1
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	0148      	lsls	r0, r1, #5
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	4401      	add	r1, r0
 800579e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057a2:	4313      	orrs	r3, r2
 80057a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	0148      	lsls	r0, r1, #5
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	4401      	add	r1, r0
 80057c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057c8:	4313      	orrs	r3, r2
 80057ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d10d      	bne.n	80057ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6919      	ldr	r1, [r3, #16]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	460a      	mov	r2, r1
 80057ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d128      	bne.n	8005848 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d110      	bne.n	8005828 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005820:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e00f      	b.n	8005848 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005846:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005862:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	1ff80000 	.word	0x1ff80000

08005878 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 80ce 	bne.w	8005a36 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d132      	bne.n	8005908 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	0cdb      	lsrs	r3, r3, #19
 8005902:	04db      	lsls	r3, r3, #19
 8005904:	6113      	str	r3, [r2, #16]
 8005906:	e04e      	b.n	80059a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	0cdb      	lsrs	r3, r3, #19
 8005924:	04db      	lsls	r3, r3, #19
 8005926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800594a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	429a      	cmp	r2, r3
 8005956:	d903      	bls.n	8005960 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005996:	6939      	ldr	r1, [r7, #16]
 8005998:	0148      	lsls	r0, r1, #5
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	4401      	add	r1, r0
 800599e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059a2:	4313      	orrs	r3, r2
 80059a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d11e      	bne.n	80059ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e097      	b.n	8005b1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8083 	beq.w	8005b1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4313      	orrs	r3, r2
 8005a32:	634b      	str	r3, [r1, #52]	; 0x34
 8005a34:	e071      	b.n	8005b1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	0cdb      	lsrs	r3, r3, #19
 8005a52:	04db      	lsls	r3, r3, #19
 8005a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac8:	6939      	ldr	r1, [r7, #16]
 8005aca:	0148      	lsls	r0, r1, #5
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	4401      	add	r1, r0
 8005ad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10d      	bne.n	8005afa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6919      	ldr	r1, [r3, #16]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	460a      	mov	r2, r1
 8005af8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d14a      	bne.n	8005bdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b5e:	f040 8086 	bne.w	8005c6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	7812      	ldrb	r2, [r2, #0]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d902      	bls.n	8005bc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005bbe:	e056      	b.n	8005c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd8:	d0e7      	beq.n	8005baa <USB_EPStopXfer+0x82>
 8005bda:	e048      	b.n	8005c6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf4:	d13b      	bne.n	8005c6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d902      	bls.n	8005c54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
          break;
 8005c52:	e00c      	b.n	8005c6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6c:	d0e7      	beq.n	8005c3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	71fb      	strb	r3, [r7, #7]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d123      	bne.n	8005cea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ca2:	88bb      	ldrh	r3, [r7, #4]
 8005ca4:	3303      	adds	r3, #3
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e018      	b.n	8005ce2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	031a      	lsls	r2, r3, #12
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3e2      	bcc.n	8005cb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3724      	adds	r7, #36	; 0x24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b08b      	sub	sp, #44	; 0x2c
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	089b      	lsrs	r3, r3, #2
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	623b      	str	r3, [r7, #32]
 8005d22:	e014      	b.n	8005d4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	3301      	adds	r3, #1
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	3301      	adds	r3, #1
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	3301      	adds	r3, #1
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d3e6      	bcc.n	8005d24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d56:	8bfb      	ldrh	r3, [r7, #30]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d66:	461a      	mov	r2, r3
 8005d68:	f107 0310 	add.w	r3, r7, #16
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	701a      	strb	r2, [r3, #0]
      i++;
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	3301      	adds	r3, #1
 8005d86:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d8e:	8bfb      	ldrh	r3, [r7, #30]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d94:	8bfb      	ldrh	r3, [r7, #30]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1ea      	bne.n	8005d70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	372c      	adds	r7, #44	; 0x2c
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d12c      	bne.n	8005e1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db12      	blt.n	8005dfc <USB_EPSetStall+0x54>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00f      	beq.n	8005dfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e02b      	b.n	8005e76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db12      	blt.n	8005e56 <USB_EPSetStall+0xae>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00f      	beq.n	8005e56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d128      	bne.n	8005ef2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ebe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d003      	beq.n	8005ed0 <USB_EPClearStall+0x4c>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	791b      	ldrb	r3, [r3, #4]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d138      	bne.n	8005f42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	e027      	b.n	8005f42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	791b      	ldrb	r3, [r3, #4]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d003      	beq.n	8005f22 <USB_EPClearStall+0x9e>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	791b      	ldrb	r3, [r3, #4]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d10f      	bne.n	8005f42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fca:	f023 0302 	bic.w	r3, r3, #2
 8005fce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0c1b      	lsrs	r3, r3, #16
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	b29b      	uxth	r3, r3
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4013      	ands	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060dc:	68bb      	ldr	r3, [r7, #8]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	b2db      	uxtb	r3, r3
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4013      	ands	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006138:	68bb      	ldr	r3, [r7, #8]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006180:	f023 0307 	bic.w	r3, r3, #7
 8006184:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	460b      	mov	r3, r1
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	333c      	adds	r3, #60	; 0x3c
 80061be:	3304      	adds	r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4a26      	ldr	r2, [pc, #152]	; (8006260 <USB_EP0_OutStart+0xb8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d90a      	bls.n	80061e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061dc:	d101      	bne.n	80061e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e037      	b.n	8006252 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	461a      	mov	r2, r3
 80061ea:	2300      	movs	r3, #0
 80061ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006210:	f043 0318 	orr.w	r3, r3, #24
 8006214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006228:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10f      	bne.n	8006250 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800624e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	4f54300a 	.word	0x4f54300a

08006264 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <USB_CoreReset+0x64>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e01b      	b.n	80062ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	daf2      	bge.n	8006270 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f043 0201 	orr.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <USB_CoreReset+0x64>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e006      	b.n	80062ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d0f0      	beq.n	800629a <USB_CoreReset+0x36>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	00030d40 	.word	0x00030d40

080062cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062dc:	f002 fd42 	bl	8008d64 <USBD_static_malloc>
 80062e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d109      	bne.n	80062fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32b0      	adds	r2, #176	; 0xb0
 80062f2:	2100      	movs	r1, #0
 80062f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062f8:	2302      	movs	r3, #2
 80062fa:	e0d4      	b.n	80064a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006300:	2100      	movs	r1, #0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f002 fd9c 	bl	8008e40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32b0      	adds	r2, #176	; 0xb0
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	32b0      	adds	r2, #176	; 0xb0
 8006322:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	7c1b      	ldrb	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d138      	bne.n	80063a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006334:	4b5e      	ldr	r3, [pc, #376]	; (80064b0 <USBD_CDC_Init+0x1e4>)
 8006336:	7819      	ldrb	r1, [r3, #0]
 8006338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800633c:	2202      	movs	r2, #2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f002 fb9f 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006344:	4b5a      	ldr	r3, [pc, #360]	; (80064b0 <USBD_CDC_Init+0x1e4>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3324      	adds	r3, #36	; 0x24
 800635a:	2201      	movs	r2, #1
 800635c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800635e:	4b55      	ldr	r3, [pc, #340]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 8006360:	7819      	ldrb	r1, [r3, #0]
 8006362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006366:	2202      	movs	r2, #2
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f002 fb8a 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800636e:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 020f 	and.w	r2, r3, #15
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006386:	2201      	movs	r2, #1
 8006388:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800638a:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <USBD_CDC_Init+0x1ec>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	3326      	adds	r3, #38	; 0x26
 80063a0:	2210      	movs	r2, #16
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e035      	b.n	8006412 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <USBD_CDC_Init+0x1e4>)
 80063a8:	7819      	ldrb	r1, [r3, #0]
 80063aa:	2340      	movs	r3, #64	; 0x40
 80063ac:	2202      	movs	r2, #2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fb67 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063b4:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <USBD_CDC_Init+0x1e4>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	2201      	movs	r2, #1
 80063cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063ce:	4b39      	ldr	r3, [pc, #228]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	2202      	movs	r2, #2
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f002 fb53 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063dc:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063f4:	2201      	movs	r2, #1
 80063f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063f8:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <USBD_CDC_Init+0x1ec>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3326      	adds	r3, #38	; 0x26
 800640e:	2210      	movs	r2, #16
 8006410:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006412:	4b29      	ldr	r3, [pc, #164]	; (80064b8 <USBD_CDC_Init+0x1ec>)
 8006414:	7819      	ldrb	r1, [r3, #0]
 8006416:	2308      	movs	r3, #8
 8006418:	2203      	movs	r2, #3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 fb31 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <USBD_CDC_Init+0x1ec>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3324      	adds	r3, #36	; 0x24
 8006436:	2201      	movs	r2, #1
 8006438:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	33b0      	adds	r3, #176	; 0xb0
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006470:	2302      	movs	r3, #2
 8006472:	e018      	b.n	80064a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7c1b      	ldrb	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 800647e:	7819      	ldrb	r1, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f002 fbe8 	bl	8008c60 <USBD_LL_PrepareReceive>
 8006490:	e008      	b.n	80064a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <USBD_CDC_Init+0x1e8>)
 8006494:	7819      	ldrb	r1, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800649c:	2340      	movs	r3, #64	; 0x40
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f002 fbde 	bl	8008c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000093 	.word	0x20000093
 80064b4:	20000094 	.word	0x20000094
 80064b8:	20000095 	.word	0x20000095

080064bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <USBD_CDC_DeInit+0xf8>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f002 fafd 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80064d4:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <USBD_CDC_DeInit+0xf8>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f003 020f 	and.w	r2, r3, #15
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	2200      	movs	r2, #0
 80064ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064ee:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <USBD_CDC_DeInit+0xfc>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f002 faea 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064fa:	4b2f      	ldr	r3, [pc, #188]	; (80065b8 <USBD_CDC_DeInit+0xfc>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006516:	4b29      	ldr	r3, [pc, #164]	; (80065bc <USBD_CDC_DeInit+0x100>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f002 fad6 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006522:	4b26      	ldr	r3, [pc, #152]	; (80065bc <USBD_CDC_DeInit+0x100>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	2200      	movs	r2, #0
 800653a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800653c:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <USBD_CDC_DeInit+0x100>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	3326      	adds	r3, #38	; 0x26
 8006552:	2200      	movs	r2, #0
 8006554:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	32b0      	adds	r2, #176	; 0xb0
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01f      	beq.n	80065a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	33b0      	adds	r3, #176	; 0xb0
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	32b0      	adds	r2, #176	; 0xb0
 8006586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800658a:	4618      	mov	r0, r3
 800658c:	f002 fbf8 	bl	8008d80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	32b0      	adds	r2, #176	; 0xb0
 800659a:	2100      	movs	r1, #0
 800659c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000093 	.word	0x20000093
 80065b8:	20000094 	.word	0x20000094
 80065bc:	20000095 	.word	0x20000095

080065c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32b0      	adds	r2, #176	; 0xb0
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0bf      	b.n	8006770 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d050      	beq.n	800669e <USBD_CDC_Setup+0xde>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f040 80af 	bne.w	8006760 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	88db      	ldrh	r3, [r3, #6]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d03a      	beq.n	8006680 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b25b      	sxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	da1b      	bge.n	800664c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	33b0      	adds	r3, #176	; 0xb0
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800662a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	88d2      	ldrh	r2, [r2, #6]
 8006630:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	88db      	ldrh	r3, [r3, #6]
 8006636:	2b07      	cmp	r3, #7
 8006638:	bf28      	it	cs
 800663a:	2307      	movcs	r3, #7
 800663c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	89fa      	ldrh	r2, [r7, #14]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fdb3 	bl	80081b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800664a:	e090      	b.n	800676e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	785a      	ldrb	r2, [r3, #1]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b3f      	cmp	r3, #63	; 0x3f
 800665c:	d803      	bhi.n	8006666 <USBD_CDC_Setup+0xa6>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	88db      	ldrh	r3, [r3, #6]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	e000      	b.n	8006668 <USBD_CDC_Setup+0xa8>
 8006666:	2240      	movs	r2, #64	; 0x40
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800666e:	6939      	ldr	r1, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fdc5 	bl	8008208 <USBD_CtlPrepareRx>
      break;
 800667e:	e076      	b.n	800676e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	33b0      	adds	r3, #176	; 0xb0
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7850      	ldrb	r0, [r2, #1]
 8006696:	2200      	movs	r2, #0
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	4798      	blx	r3
      break;
 800669c:	e067      	b.n	800676e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	2b0b      	cmp	r3, #11
 80066a4:	d851      	bhi.n	800674a <USBD_CDC_Setup+0x18a>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <USBD_CDC_Setup+0xec>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066dd 	.word	0x080066dd
 80066b0:	08006759 	.word	0x08006759
 80066b4:	0800674b 	.word	0x0800674b
 80066b8:	0800674b 	.word	0x0800674b
 80066bc:	0800674b 	.word	0x0800674b
 80066c0:	0800674b 	.word	0x0800674b
 80066c4:	0800674b 	.word	0x0800674b
 80066c8:	0800674b 	.word	0x0800674b
 80066cc:	0800674b 	.word	0x0800674b
 80066d0:	0800674b 	.word	0x0800674b
 80066d4:	08006707 	.word	0x08006707
 80066d8:	08006731 	.word	0x08006731
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d107      	bne.n	80066f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066e8:	f107 030a 	add.w	r3, r7, #10
 80066ec:	2202      	movs	r2, #2
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fd5d 	bl	80081b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066f6:	e032      	b.n	800675e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fce7 	bl	80080ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	75fb      	strb	r3, [r7, #23]
          break;
 8006704:	e02b      	b.n	800675e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b03      	cmp	r3, #3
 8006710:	d107      	bne.n	8006722 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006712:	f107 030d 	add.w	r3, r7, #13
 8006716:	2201      	movs	r2, #1
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fd48 	bl	80081b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006720:	e01d      	b.n	800675e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fcd2 	bl	80080ce <USBD_CtlError>
            ret = USBD_FAIL;
 800672a:	2303      	movs	r3, #3
 800672c:	75fb      	strb	r3, [r7, #23]
          break;
 800672e:	e016      	b.n	800675e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b03      	cmp	r3, #3
 800673a:	d00f      	beq.n	800675c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fcc5 	bl	80080ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006744:	2303      	movs	r3, #3
 8006746:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006748:	e008      	b.n	800675c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fcbe 	bl	80080ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006752:	2303      	movs	r3, #3
 8006754:	75fb      	strb	r3, [r7, #23]
          break;
 8006756:	e002      	b.n	800675e <USBD_CDC_Setup+0x19e>
          break;
 8006758:	bf00      	nop
 800675a:	e008      	b.n	800676e <USBD_CDC_Setup+0x1ae>
          break;
 800675c:	bf00      	nop
      }
      break;
 800675e:	e006      	b.n	800676e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fcb3 	bl	80080ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	75fb      	strb	r3, [r7, #23]
      break;
 800676c:	bf00      	nop
  }

  return (uint8_t)ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800678a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	32b0      	adds	r2, #176	; 0xb0
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800679e:	2303      	movs	r3, #3
 80067a0:	e065      	b.n	800686e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	32b0      	adds	r2, #176	; 0xb0
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	f003 020f 	and.w	r2, r3, #15
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	440b      	add	r3, r1
 80067c4:	3318      	adds	r3, #24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02f      	beq.n	800682c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	f003 020f 	and.w	r2, r3, #15
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	3318      	adds	r3, #24
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	f003 010f 	and.w	r1, r3, #15
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	460b      	mov	r3, r1
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	440b      	add	r3, r1
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4403      	add	r3, r0
 80067f4:	3348      	adds	r3, #72	; 0x48
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006802:	2b00      	cmp	r3, #0
 8006804:	d112      	bne.n	800682c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	f003 020f 	and.w	r2, r3, #15
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	3318      	adds	r3, #24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800681e:	78f9      	ldrb	r1, [r7, #3]
 8006820:	2300      	movs	r3, #0
 8006822:	2200      	movs	r2, #0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f002 f9fa 	bl	8008c1e <USBD_LL_Transmit>
 800682a:	e01f      	b.n	800686c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	33b0      	adds	r3, #176	; 0xb0
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d010      	beq.n	800686c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	33b0      	adds	r3, #176	; 0xb0
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32b0      	adds	r2, #176	; 0xb0
 800688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006890:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	32b0      	adds	r2, #176	; 0xb0
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e01a      	b.n	80068de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f002 f9f8 	bl	8008ca2 <USBD_LL_GetRxDataSize>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	33b0      	adds	r3, #176	; 0xb0
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068d8:	4611      	mov	r1, r2
 80068da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	; 0xb0
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e025      	b.n	8006954 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	33b0      	adds	r3, #176	; 0xb0
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01a      	beq.n	8006952 <USBD_CDC_EP0_RxReady+0x6c>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006922:	2bff      	cmp	r3, #255	; 0xff
 8006924:	d015      	beq.n	8006952 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	33b0      	adds	r3, #176	; 0xb0
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800693e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006946:	b292      	uxth	r2, r2
 8006948:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	22ff      	movs	r2, #255	; 0xff
 800694e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006964:	2182      	movs	r1, #130	; 0x82
 8006966:	4818      	ldr	r0, [pc, #96]	; (80069c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006968:	f000 fd4f 	bl	800740a <USBD_GetEpDesc>
 800696c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800696e:	2101      	movs	r1, #1
 8006970:	4815      	ldr	r0, [pc, #84]	; (80069c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006972:	f000 fd4a 	bl	800740a <USBD_GetEpDesc>
 8006976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006978:	2181      	movs	r1, #129	; 0x81
 800697a:	4813      	ldr	r0, [pc, #76]	; (80069c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800697c:	f000 fd45 	bl	800740a <USBD_GetEpDesc>
 8006980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2210      	movs	r2, #16
 800698c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2200      	movs	r2, #0
 8006998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699c:	711a      	strb	r2, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b0:	711a      	strb	r2, [r3, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2243      	movs	r2, #67	; 0x43
 80069ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000050 	.word	0x20000050

080069cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069d4:	2182      	movs	r1, #130	; 0x82
 80069d6:	4818      	ldr	r0, [pc, #96]	; (8006a38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069d8:	f000 fd17 	bl	800740a <USBD_GetEpDesc>
 80069dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069de:	2101      	movs	r1, #1
 80069e0:	4815      	ldr	r0, [pc, #84]	; (8006a38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069e2:	f000 fd12 	bl	800740a <USBD_GetEpDesc>
 80069e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e8:	2181      	movs	r1, #129	; 0x81
 80069ea:	4813      	ldr	r0, [pc, #76]	; (8006a38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069ec:	f000 fd0d 	bl	800740a <USBD_GetEpDesc>
 80069f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2210      	movs	r2, #16
 80069fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	711a      	strb	r2, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f042 0202 	orr.w	r2, r2, #2
 8006a10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f042 0202 	orr.w	r2, r2, #2
 8006a24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2243      	movs	r2, #67	; 0x43
 8006a2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a2c:	4b02      	ldr	r3, [pc, #8]	; (8006a38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000050 	.word	0x20000050

08006a3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a44:	2182      	movs	r1, #130	; 0x82
 8006a46:	4818      	ldr	r0, [pc, #96]	; (8006aa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a48:	f000 fcdf 	bl	800740a <USBD_GetEpDesc>
 8006a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a4e:	2101      	movs	r1, #1
 8006a50:	4815      	ldr	r0, [pc, #84]	; (8006aa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a52:	f000 fcda 	bl	800740a <USBD_GetEpDesc>
 8006a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a58:	2181      	movs	r1, #129	; 0x81
 8006a5a:	4813      	ldr	r0, [pc, #76]	; (8006aa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a5c:	f000 fcd5 	bl	800740a <USBD_GetEpDesc>
 8006a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a7c:	711a      	strb	r2, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a90:	711a      	strb	r2, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2243      	movs	r2, #67	; 0x43
 8006a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000050 	.word	0x20000050

08006aac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006aba:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	2000000c 	.word	0x2000000c

08006acc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e009      	b.n	8006af4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	33b0      	adds	r3, #176	; 0xb0
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	32b0      	adds	r2, #176	; 0xb0
 8006b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e008      	b.n	8006b38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	32b0      	adds	r2, #176	; 0xb0
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e004      	b.n	8006b72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32b0      	adds	r2, #176	; 0xb0
 8006b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	32b0      	adds	r2, #176	; 0xb0
 8006ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e025      	b.n	8006bfe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11f      	bne.n	8006bfc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006bc4:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <USBD_CDC_TransmitPacket+0x88>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4403      	add	r3, r0
 8006bde:	3318      	adds	r3, #24
 8006be0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <USBD_CDC_TransmitPacket+0x88>)
 8006be4:	7819      	ldrb	r1, [r3, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 f813 	bl	8008c1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000093 	.word	0x20000093

08006c0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32b0      	adds	r2, #176	; 0xb0
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32b0      	adds	r2, #176	; 0xb0
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e018      	b.n	8006c6c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7c1b      	ldrb	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c42:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <USBD_CDC_ReceivePacket+0x68>)
 8006c44:	7819      	ldrb	r1, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f002 f805 	bl	8008c60 <USBD_LL_PrepareReceive>
 8006c56:	e008      	b.n	8006c6a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <USBD_CDC_ReceivePacket+0x68>)
 8006c5a:	7819      	ldrb	r1, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fffb 	bl	8008c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000094 	.word	0x20000094

08006c78 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e01f      	b.n	8006cd0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	79fa      	ldrb	r2, [r7, #7]
 8006cc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f001 fe75 	bl	80089b4 <USBD_LL_Init>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e025      	b.n	8006d3c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	32ae      	adds	r2, #174	; 0xae
 8006d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00f      	beq.n	8006d2c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32ae      	adds	r2, #174	; 0xae
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	f107 020e 	add.w	r2, r7, #14
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
 8006d24:	4602      	mov	r2, r0
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fe7d 	bl	8008a4c <USBD_LL_Start>
 8006d52:	4603      	mov	r3, r0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	4611      	mov	r1, r2
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f932 	bl	800805a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d01a      	beq.n	8006e50 <USBD_LL_SetupStage+0x72>
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d822      	bhi.n	8006e64 <USBD_LL_SetupStage+0x86>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <USBD_LL_SetupStage+0x4a>
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d00a      	beq.n	8006e3c <USBD_LL_SetupStage+0x5e>
 8006e26:	e01d      	b.n	8006e64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb5f 	bl	80074f4 <USBD_StdDevReq>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3a:	e020      	b.n	8006e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fbc7 	bl	80075d8 <USBD_StdItfReq>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4e:	e016      	b.n	8006e7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc29 	bl	80076b0 <USBD_StdEPReq>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73fb      	strb	r3, [r7, #15]
      break;
 8006e62:	e00c      	b.n	8006e7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 fe4a 	bl	8008b0c <USBD_LL_StallEP>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	bf00      	nop
  }

  return ret;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	460b      	mov	r3, r1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d16e      	bne.n	8006f7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ea6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f040 8098 	bne.w	8006fe4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d913      	bls.n	8006ee8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	bf28      	it	cs
 8006eda:	4613      	movcs	r3, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f001 f9ae 	bl	8008242 <USBD_CtlContinueRx>
 8006ee6:	e07d      	b.n	8006fe4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d014      	beq.n	8006f20 <USBD_LL_DataOutStage+0x98>
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d81d      	bhi.n	8006f36 <USBD_LL_DataOutStage+0xae>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <USBD_LL_DataOutStage+0x7c>
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d003      	beq.n	8006f0a <USBD_LL_DataOutStage+0x82>
 8006f02:	e018      	b.n	8006f36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75bb      	strb	r3, [r7, #22]
            break;
 8006f08:	e018      	b.n	8006f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fa5e 	bl	80073d6 <USBD_CoreFindIF>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f1e:	e00d      	b.n	8006f3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fa60 	bl	80073f0 <USBD_CoreFindEP>
 8006f30:	4603      	mov	r3, r0
 8006f32:	75bb      	strb	r3, [r7, #22]
            break;
 8006f34:	e002      	b.n	8006f3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75bb      	strb	r3, [r7, #22]
            break;
 8006f3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f3c:	7dbb      	ldrb	r3, [r7, #22]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d119      	bne.n	8006f76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d113      	bne.n	8006f76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f4e:	7dba      	ldrb	r2, [r7, #22]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	32ae      	adds	r2, #174	; 0xae
 8006f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f5e:	7dba      	ldrb	r2, [r7, #22]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f66:	7dba      	ldrb	r2, [r7, #22]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	32ae      	adds	r2, #174	; 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f001 f974 	bl	8008264 <USBD_CtlSendStatus>
 8006f7c:	e032      	b.n	8006fe4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa31 	bl	80073f0 <USBD_CoreFindEP>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f92:	7dbb      	ldrb	r3, [r7, #22]
 8006f94:	2bff      	cmp	r3, #255	; 0xff
 8006f96:	d025      	beq.n	8006fe4 <USBD_LL_DataOutStage+0x15c>
 8006f98:	7dbb      	ldrb	r3, [r7, #22]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d122      	bne.n	8006fe4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d117      	bne.n	8006fda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006faa:	7dba      	ldrb	r2, [r7, #22]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	32ae      	adds	r2, #174	; 0xae
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00f      	beq.n	8006fda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006fba:	7dba      	ldrb	r2, [r7, #22]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006fc2:	7dba      	ldrb	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	32ae      	adds	r2, #174	; 0xae
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	7afa      	ldrb	r2, [r7, #11]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	4798      	blx	r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	e000      	b.n	8006fe6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d16f      	bne.n	80070e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3314      	adds	r3, #20
 8007006:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800700e:	2b02      	cmp	r3, #2
 8007010:	d15a      	bne.n	80070c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	429a      	cmp	r2, r3
 800701c:	d914      	bls.n	8007048 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	461a      	mov	r2, r3
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f001 f8d6 	bl	80081e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	2100      	movs	r1, #0
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f001 fe0d 	bl	8008c60 <USBD_LL_PrepareReceive>
 8007046:	e03f      	b.n	80070c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	429a      	cmp	r2, r3
 8007052:	d11c      	bne.n	800708e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800705c:	429a      	cmp	r2, r3
 800705e:	d316      	bcc.n	800708e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800706a:	429a      	cmp	r2, r3
 800706c:	d20f      	bcs.n	800708e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800706e:	2200      	movs	r2, #0
 8007070:	2100      	movs	r1, #0
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f001 f8b7 	bl	80081e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007080:	2300      	movs	r3, #0
 8007082:	2200      	movs	r2, #0
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f001 fdea 	bl	8008c60 <USBD_LL_PrepareReceive>
 800708c:	e01c      	b.n	80070c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d10f      	bne.n	80070ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f001 fd25 	bl	8008b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f001 f8e1 	bl	800828a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d03a      	beq.n	8007148 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fe42 	bl	8006d5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070e0:	e032      	b.n	8007148 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f97f 	bl	80073f0 <USBD_CoreFindEP>
 80070f2:	4603      	mov	r3, r0
 80070f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2bff      	cmp	r3, #255	; 0xff
 80070fa:	d025      	beq.n	8007148 <USBD_LL_DataInStage+0x15a>
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d122      	bne.n	8007148 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b03      	cmp	r3, #3
 800710c:	d11c      	bne.n	8007148 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800710e:	7dfa      	ldrb	r2, [r7, #23]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	32ae      	adds	r2, #174	; 0xae
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d014      	beq.n	8007148 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800711e:	7dfa      	ldrb	r2, [r7, #23]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007126:	7dfa      	ldrb	r2, [r7, #23]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	32ae      	adds	r2, #174	; 0xae
 800712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	7afa      	ldrb	r2, [r7, #11]
 8007134:	4611      	mov	r1, r2
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800713e:	7dbb      	ldrb	r3, [r7, #22]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007144:	7dbb      	ldrb	r3, [r7, #22]
 8007146:	e000      	b.n	800714a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	2b00      	cmp	r3, #0
 800718c:	d014      	beq.n	80071b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6852      	ldr	r2, [r2, #4]
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	4611      	mov	r1, r2
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b8:	2340      	movs	r3, #64	; 0x40
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fc5f 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071d4:	2340      	movs	r3, #64	; 0x40
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fc51 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	621a      	str	r2, [r3, #32]

  return ret;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	b2da      	uxtb	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2204      	movs	r2, #4
 8007230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b04      	cmp	r3, #4
 8007254:	d106      	bne.n	8007264 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800725c:	b2da      	uxtb	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d110      	bne.n	80072a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	32ae      	adds	r2, #174	; 0xae
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e01c      	b.n	800730e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d115      	bne.n	800730c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32ae      	adds	r2, #174	; 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	; 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	78fa      	ldrb	r2, [r7, #3]
 8007306:	4611      	mov	r1, r2
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	32ae      	adds	r2, #174	; 0xae
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e01c      	b.n	8007372 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b03      	cmp	r3, #3
 8007342:	d115      	bne.n	8007370 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	32ae      	adds	r2, #174	; 0xae
 800734e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32ae      	adds	r2, #174	; 0xae
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4611      	mov	r1, r2
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6852      	ldr	r2, [r2, #4]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	4611      	mov	r1, r2
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	4798      	blx	r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80073c8:	2303      	movs	r3, #3
 80073ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	429a      	cmp	r2, r3
 8007430:	d920      	bls.n	8007474 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800743a:	e013      	b.n	8007464 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800743c:	f107 030a 	add.w	r3, r7, #10
 8007440:	4619      	mov	r1, r3
 8007442:	6978      	ldr	r0, [r7, #20]
 8007444:	f000 f81b 	bl	800747e <USBD_GetNextDesc>
 8007448:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b05      	cmp	r3, #5
 8007450:	d108      	bne.n	8007464 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	429a      	cmp	r2, r3
 800745e:	d008      	beq.n	8007472 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	885b      	ldrh	r3, [r3, #2]
 8007468:	b29a      	uxth	r2, r3
 800746a:	897b      	ldrh	r3, [r7, #10]
 800746c:	429a      	cmp	r2, r3
 800746e:	d8e5      	bhi.n	800743c <USBD_GetEpDesc+0x32>
 8007470:	e000      	b.n	8007474 <USBD_GetEpDesc+0x6a>
          break;
 8007472:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007474:	693b      	ldr	r3, [r7, #16]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	4413      	add	r3, r2
 8007498:	b29a      	uxth	r2, r3
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074aa:	68fb      	ldr	r3, [r7, #12]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	3301      	adds	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074d6:	8a3b      	ldrh	r3, [r7, #16]
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	b21a      	sxth	r2, r3
 80074dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	b21b      	sxth	r3, r3
 80074e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074e6:	89fb      	ldrh	r3, [r7, #14]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d005      	beq.n	800751a <USBD_StdDevReq+0x26>
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d857      	bhi.n	80075c2 <USBD_StdDevReq+0xce>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00f      	beq.n	8007536 <USBD_StdDevReq+0x42>
 8007516:	2b20      	cmp	r3, #32
 8007518:	d153      	bne.n	80075c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	32ae      	adds	r2, #174	; 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e04a      	b.n	80075cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b09      	cmp	r3, #9
 800753c:	d83b      	bhi.n	80075b6 <USBD_StdDevReq+0xc2>
 800753e:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBD_StdDevReq+0x50>)
 8007540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007544:	08007599 	.word	0x08007599
 8007548:	080075ad 	.word	0x080075ad
 800754c:	080075b7 	.word	0x080075b7
 8007550:	080075a3 	.word	0x080075a3
 8007554:	080075b7 	.word	0x080075b7
 8007558:	08007577 	.word	0x08007577
 800755c:	0800756d 	.word	0x0800756d
 8007560:	080075b7 	.word	0x080075b7
 8007564:	0800758f 	.word	0x0800758f
 8007568:	08007581 	.word	0x08007581
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa3c 	bl	80079ec <USBD_GetDescriptor>
          break;
 8007574:	e024      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fbcb 	bl	8007d14 <USBD_SetAddress>
          break;
 800757e:	e01f      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc0a 	bl	8007d9c <USBD_SetConfig>
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
          break;
 800758c:	e018      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fcad 	bl	8007ef0 <USBD_GetConfig>
          break;
 8007596:	e013      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fcde 	bl	8007f5c <USBD_GetStatus>
          break;
 80075a0:	e00e      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fd0d 	bl	8007fc4 <USBD_SetFeature>
          break;
 80075aa:	e009      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fd31 	bl	8008016 <USBD_ClrFeature>
          break;
 80075b4:	e004      	b.n	80075c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fd88 	bl	80080ce <USBD_CtlError>
          break;
 80075be:	bf00      	nop
      }
      break;
 80075c0:	e004      	b.n	80075cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fd82 	bl	80080ce <USBD_CtlError>
      break;
 80075ca:	bf00      	nop
  }

  return ret;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop

080075d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d005      	beq.n	80075fe <USBD_StdItfReq+0x26>
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d852      	bhi.n	800769c <USBD_StdItfReq+0xc4>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <USBD_StdItfReq+0x26>
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d14e      	bne.n	800769c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007604:	b2db      	uxtb	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	2b02      	cmp	r3, #2
 800760a:	d840      	bhi.n	800768e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	889b      	ldrh	r3, [r3, #4]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d836      	bhi.n	8007684 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	889b      	ldrh	r3, [r3, #4]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fed9 	bl	80073d6 <USBD_CoreFindIF>
 8007624:	4603      	mov	r3, r0
 8007626:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2bff      	cmp	r3, #255	; 0xff
 800762c:	d01d      	beq.n	800766a <USBD_StdItfReq+0x92>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11a      	bne.n	800766a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007634:	7bba      	ldrb	r2, [r7, #14]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32ae      	adds	r2, #174	; 0xae
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00f      	beq.n	8007664 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007644:	7bba      	ldrb	r2, [r7, #14]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800764c:	7bba      	ldrb	r2, [r7, #14]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	32ae      	adds	r2, #174	; 0xae
 8007652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007662:	e004      	b.n	800766e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007668:	e001      	b.n	800766e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d110      	bne.n	8007698 <USBD_StdItfReq+0xc0>
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10d      	bne.n	8007698 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fdf1 	bl	8008264 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007682:	e009      	b.n	8007698 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fd21 	bl	80080ce <USBD_CtlError>
          break;
 800768c:	e004      	b.n	8007698 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fd1c 	bl	80080ce <USBD_CtlError>
          break;
 8007696:	e000      	b.n	800769a <USBD_StdItfReq+0xc2>
          break;
 8007698:	bf00      	nop
      }
      break;
 800769a:	e004      	b.n	80076a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fd15 	bl	80080ce <USBD_CtlError>
      break;
 80076a4:	bf00      	nop
  }

  return ret;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076cc:	2b40      	cmp	r3, #64	; 0x40
 80076ce:	d007      	beq.n	80076e0 <USBD_StdEPReq+0x30>
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	f200 817f 	bhi.w	80079d4 <USBD_StdEPReq+0x324>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02a      	beq.n	8007730 <USBD_StdEPReq+0x80>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	f040 817a 	bne.w	80079d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fe83 	bl	80073f0 <USBD_CoreFindEP>
 80076ea:	4603      	mov	r3, r0
 80076ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076ee:	7b7b      	ldrb	r3, [r7, #13]
 80076f0:	2bff      	cmp	r3, #255	; 0xff
 80076f2:	f000 8174 	beq.w	80079de <USBD_StdEPReq+0x32e>
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f040 8170 	bne.w	80079de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076fe:	7b7a      	ldrb	r2, [r7, #13]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007706:	7b7a      	ldrb	r2, [r7, #13]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 8163 	beq.w	80079de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007718:	7b7a      	ldrb	r2, [r7, #13]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32ae      	adds	r2, #174	; 0xae
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800772e:	e156      	b.n	80079de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d008      	beq.n	800774a <USBD_StdEPReq+0x9a>
 8007738:	2b03      	cmp	r3, #3
 800773a:	f300 8145 	bgt.w	80079c8 <USBD_StdEPReq+0x318>
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 809b 	beq.w	800787a <USBD_StdEPReq+0x1ca>
 8007744:	2b01      	cmp	r3, #1
 8007746:	d03c      	beq.n	80077c2 <USBD_StdEPReq+0x112>
 8007748:	e13e      	b.n	80079c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d002      	beq.n	800775c <USBD_StdEPReq+0xac>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d016      	beq.n	8007788 <USBD_StdEPReq+0xd8>
 800775a:	e02c      	b.n	80077b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <USBD_StdEPReq+0xce>
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d00a      	beq.n	800777e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f9cd 	bl	8008b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f9c9 	bl	8008b0c <USBD_LL_StallEP>
 800777a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800777c:	e020      	b.n	80077c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fca4 	bl	80080ce <USBD_CtlError>
              break;
 8007786:	e01b      	b.n	80077c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <USBD_StdEPReq+0xfe>
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d008      	beq.n	80077ae <USBD_StdEPReq+0xfe>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f9af 	bl	8008b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fd58 	bl	8008264 <USBD_CtlSendStatus>

              break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc88 	bl	80080ce <USBD_CtlError>
              break;
 80077be:	bf00      	nop
          }
          break;
 80077c0:	e107      	b.n	80079d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d002      	beq.n	80077d4 <USBD_StdEPReq+0x124>
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d016      	beq.n	8007800 <USBD_StdEPReq+0x150>
 80077d2:	e04b      	b.n	800786c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00d      	beq.n	80077f6 <USBD_StdEPReq+0x146>
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d00a      	beq.n	80077f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f991 	bl	8008b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 f98d 	bl	8008b0c <USBD_LL_StallEP>
 80077f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077f4:	e040      	b.n	8007878 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fc68 	bl	80080ce <USBD_CtlError>
              break;
 80077fe:	e03b      	b.n	8007878 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	885b      	ldrh	r3, [r3, #2]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d136      	bne.n	8007876 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 f997 	bl	8008b4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fd21 	bl	8008264 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff fde2 	bl	80073f0 <USBD_CoreFindEP>
 800782c:	4603      	mov	r3, r0
 800782e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007830:	7b7b      	ldrb	r3, [r7, #13]
 8007832:	2bff      	cmp	r3, #255	; 0xff
 8007834:	d01f      	beq.n	8007876 <USBD_StdEPReq+0x1c6>
 8007836:	7b7b      	ldrb	r3, [r7, #13]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11c      	bne.n	8007876 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800783c:	7b7a      	ldrb	r2, [r7, #13]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007844:	7b7a      	ldrb	r2, [r7, #13]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32ae      	adds	r2, #174	; 0xae
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007854:	7b7a      	ldrb	r2, [r7, #13]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	; 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800786a:	e004      	b.n	8007876 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc2d 	bl	80080ce <USBD_CtlError>
              break;
 8007874:	e000      	b.n	8007878 <USBD_StdEPReq+0x1c8>
              break;
 8007876:	bf00      	nop
          }
          break;
 8007878:	e0ab      	b.n	80079d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d002      	beq.n	800788c <USBD_StdEPReq+0x1dc>
 8007886:	2b03      	cmp	r3, #3
 8007888:	d032      	beq.n	80078f0 <USBD_StdEPReq+0x240>
 800788a:	e097      	b.n	80079bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <USBD_StdEPReq+0x1f2>
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d004      	beq.n	80078a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc17 	bl	80080ce <USBD_CtlError>
                break;
 80078a0:	e091      	b.n	80079c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da0b      	bge.n	80078c2 <USBD_StdEPReq+0x212>
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078b0:	4613      	mov	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	3310      	adds	r3, #16
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	e00b      	b.n	80078da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	3304      	adds	r3, #4
 80078da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2202      	movs	r2, #2
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc61 	bl	80081b0 <USBD_CtlSendData>
              break;
 80078ee:	e06a      	b.n	80079c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da11      	bge.n	800791c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	f003 020f 	and.w	r2, r3, #15
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d117      	bne.n	8007942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fbda 	bl	80080ce <USBD_CtlError>
                  break;
 800791a:	e054      	b.n	80079c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	f003 020f 	and.w	r2, r3, #15
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fbc7 	bl	80080ce <USBD_CtlError>
                  break;
 8007940:	e041      	b.n	80079c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007946:	2b00      	cmp	r3, #0
 8007948:	da0b      	bge.n	8007962 <USBD_StdEPReq+0x2b2>
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	3310      	adds	r3, #16
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	3304      	adds	r3, #4
 8007960:	e00b      	b.n	800797a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	4413      	add	r3, r2
 8007978:	3304      	adds	r3, #4
 800797a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <USBD_StdEPReq+0x2d8>
 8007982:	7bbb      	ldrb	r3, [r7, #14]
 8007984:	2b80      	cmp	r3, #128	; 0x80
 8007986:	d103      	bne.n	8007990 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e00e      	b.n	80079ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f8f7 	bl	8008b88 <USBD_LL_IsStallEP>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e002      	b.n	80079ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2202      	movs	r2, #2
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fbfb 	bl	80081b0 <USBD_CtlSendData>
              break;
 80079ba:	e004      	b.n	80079c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fb85 	bl	80080ce <USBD_CtlError>
              break;
 80079c4:	bf00      	nop
          }
          break;
 80079c6:	e004      	b.n	80079d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fb7f 	bl	80080ce <USBD_CtlError>
          break;
 80079d0:	bf00      	nop
      }
      break;
 80079d2:	e005      	b.n	80079e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fb79 	bl	80080ce <USBD_CtlError>
      break;
 80079dc:	e000      	b.n	80079e0 <USBD_StdEPReq+0x330>
      break;
 80079de:	bf00      	nop
  }

  return ret;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	0a1b      	lsrs	r3, r3, #8
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	2b0e      	cmp	r3, #14
 8007a0e:	f200 8152 	bhi.w	8007cb6 <USBD_GetDescriptor+0x2ca>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_GetDescriptor+0x2c>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a89 	.word	0x08007a89
 8007a1c:	08007aa1 	.word	0x08007aa1
 8007a20:	08007ae1 	.word	0x08007ae1
 8007a24:	08007cb7 	.word	0x08007cb7
 8007a28:	08007cb7 	.word	0x08007cb7
 8007a2c:	08007c57 	.word	0x08007c57
 8007a30:	08007c83 	.word	0x08007c83
 8007a34:	08007cb7 	.word	0x08007cb7
 8007a38:	08007cb7 	.word	0x08007cb7
 8007a3c:	08007cb7 	.word	0x08007cb7
 8007a40:	08007cb7 	.word	0x08007cb7
 8007a44:	08007cb7 	.word	0x08007cb7
 8007a48:	08007cb7 	.word	0x08007cb7
 8007a4c:	08007cb7 	.word	0x08007cb7
 8007a50:	08007a55 	.word	0x08007a55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	7c12      	ldrb	r2, [r2, #16]
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a76:	e126      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb27 	bl	80080ce <USBD_CtlError>
        err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
      break;
 8007a86:	e11e      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
      break;
 8007a9e:	e112      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7c1b      	ldrb	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f107 0208 	add.w	r2, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3301      	adds	r3, #1
 8007abe:	2202      	movs	r2, #2
 8007ac0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ac2:	e100      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e0f2      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	885b      	ldrh	r3, [r3, #2]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	f200 80ac 	bhi.w	8007c44 <USBD_GetDescriptor+0x258>
 8007aec:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <USBD_GetDescriptor+0x108>)
 8007aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af2:	bf00      	nop
 8007af4:	08007b0d 	.word	0x08007b0d
 8007af8:	08007b41 	.word	0x08007b41
 8007afc:	08007b75 	.word	0x08007b75
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007bdd 	.word	0x08007bdd
 8007b08:	08007c11 	.word	0x08007c11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e091      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 facb 	bl	80080ce <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e089      	b.n	8007c54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e077      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fab1 	bl	80080ce <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e06f      	b.n	8007c54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e05d      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa97 	bl	80080ce <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e055      	b.n	8007c54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e043      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa7d 	bl	80080ce <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e03b      	b.n	8007c54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e029      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa63 	bl	80080ce <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e021      	b.n	8007c54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7c12      	ldrb	r2, [r2, #16]
 8007c28:	f107 0108 	add.w	r1, r7, #8
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
 8007c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c32:	e00f      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa49 	bl	80080ce <USBD_CtlError>
            err++;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	72fb      	strb	r3, [r7, #11]
          break;
 8007c42:	e007      	b.n	8007c54 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa41 	bl	80080ce <USBD_CtlError>
          err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c52:	bf00      	nop
      }
      break;
 8007c54:	e037      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7c1b      	ldrb	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f107 0208 	add.w	r2, r7, #8
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	4798      	blx	r3
 8007c6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c70:	e029      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fa2a 	bl	80080ce <USBD_CtlError>
        err++;
 8007c7a:	7afb      	ldrb	r3, [r7, #11]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c80:	e021      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7c1b      	ldrb	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10d      	bne.n	8007ca6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f107 0208 	add.w	r2, r7, #8
 8007c96:	4610      	mov	r0, r2
 8007c98:	4798      	blx	r3
 8007c9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca4:	e00f      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa10 	bl	80080ce <USBD_CtlError>
        err++;
 8007cae:	7afb      	ldrb	r3, [r7, #11]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb4:	e007      	b.n	8007cc6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa08 	bl	80080ce <USBD_CtlError>
      err++;
 8007cbe:	7afb      	ldrb	r3, [r7, #11]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc4:	bf00      	nop
  }

  if (err != 0U)
 8007cc6:	7afb      	ldrb	r3, [r7, #11]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11e      	bne.n	8007d0a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	88db      	ldrh	r3, [r3, #6]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d016      	beq.n	8007d02 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00e      	beq.n	8007cf8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	88da      	ldrh	r2, [r3, #6]
 8007cde:	893b      	ldrh	r3, [r7, #8]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bf28      	it	cs
 8007ce4:	4613      	movcs	r3, r2
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	461a      	mov	r2, r3
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa5d 	bl	80081b0 <USBD_CtlSendData>
 8007cf6:	e009      	b.n	8007d0c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f9e7 	bl	80080ce <USBD_CtlError>
 8007d00:	e004      	b.n	8007d0c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 faae 	bl	8008264 <USBD_CtlSendStatus>
 8007d08:	e000      	b.n	8007d0c <USBD_GetDescriptor+0x320>
    return;
 8007d0a:	bf00      	nop
  }
}
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop

08007d14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	889b      	ldrh	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d131      	bne.n	8007d8a <USBD_SetAddress+0x76>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d12d      	bne.n	8007d8a <USBD_SetAddress+0x76>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	885b      	ldrh	r3, [r3, #2]
 8007d32:	2b7f      	cmp	r3, #127	; 0x7f
 8007d34:	d829      	bhi.n	8007d8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d104      	bne.n	8007d58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9bc 	bl	80080ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d56:	e01d      	b.n	8007d94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7bfa      	ldrb	r2, [r7, #15]
 8007d5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 ff3b 	bl	8008be0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa7a 	bl	8008264 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7e:	e009      	b.n	8007d94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	e004      	b.n	8007d94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f99e 	bl	80080ce <USBD_CtlError>
  }
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	885b      	ldrh	r3, [r3, #2]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	4b4e      	ldr	r3, [pc, #312]	; (8007eec <USBD_SetConfig+0x150>)
 8007db2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007db4:	4b4d      	ldr	r3, [pc, #308]	; (8007eec <USBD_SetConfig+0x150>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d905      	bls.n	8007dc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f985 	bl	80080ce <USBD_CtlError>
    return USBD_FAIL;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e08c      	b.n	8007ee2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d002      	beq.n	8007dda <USBD_SetConfig+0x3e>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d029      	beq.n	8007e2c <USBD_SetConfig+0x90>
 8007dd8:	e075      	b.n	8007ec6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dda:	4b44      	ldr	r3, [pc, #272]	; (8007eec <USBD_SetConfig+0x150>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d020      	beq.n	8007e24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007de2:	4b42      	ldr	r3, [pc, #264]	; (8007eec <USBD_SetConfig+0x150>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dec:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <USBD_SetConfig+0x150>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fe ffbd 	bl	8006d72 <USBD_SetClassConfig>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f962 	bl	80080ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e12:	e065      	b.n	8007ee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa25 	bl	8008264 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e22:	e05d      	b.n	8007ee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa1d 	bl	8008264 <USBD_CtlSendStatus>
      break;
 8007e2a:	e059      	b.n	8007ee0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e2c:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <USBD_SetConfig+0x150>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d112      	bne.n	8007e5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e3c:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <USBD_SetConfig+0x150>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e46:	4b29      	ldr	r3, [pc, #164]	; (8007eec <USBD_SetConfig+0x150>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fe ffac 	bl	8006daa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa06 	bl	8008264 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e58:	e042      	b.n	8007ee0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e5a:	4b24      	ldr	r3, [pc, #144]	; (8007eec <USBD_SetConfig+0x150>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d02a      	beq.n	8007ebe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7fe ff9a 	bl	8006daa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e76:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <USBD_SetConfig+0x150>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <USBD_SetConfig+0x150>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe ff73 	bl	8006d72 <USBD_SetClassConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00f      	beq.n	8007eb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f918 	bl	80080ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe ff7f 	bl	8006daa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eb4:	e014      	b.n	8007ee0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9d4 	bl	8008264 <USBD_CtlSendStatus>
      break;
 8007ebc:	e010      	b.n	8007ee0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9d0 	bl	8008264 <USBD_CtlSendStatus>
      break;
 8007ec4:	e00c      	b.n	8007ee0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f900 	bl	80080ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <USBD_SetConfig+0x150>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7fe ff68 	bl	8006daa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007eda:	2303      	movs	r3, #3
 8007edc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ede:	bf00      	nop
  }

  return ret;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000230 	.word	0x20000230

08007ef0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d004      	beq.n	8007f0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8e2 	bl	80080ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f0a:	e023      	b.n	8007f54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	dc02      	bgt.n	8007f1e <USBD_GetConfig+0x2e>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc03      	bgt.n	8007f24 <USBD_GetConfig+0x34>
 8007f1c:	e015      	b.n	8007f4a <USBD_GetConfig+0x5a>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d00b      	beq.n	8007f3a <USBD_GetConfig+0x4a>
 8007f22:	e012      	b.n	8007f4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f93c 	bl	80081b0 <USBD_CtlSendData>
        break;
 8007f38:	e00c      	b.n	8007f54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f934 	bl	80081b0 <USBD_CtlSendData>
        break;
 8007f48:	e004      	b.n	8007f54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f8be 	bl	80080ce <USBD_CtlError>
        break;
 8007f52:	bf00      	nop
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d81e      	bhi.n	8007fb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	88db      	ldrh	r3, [r3, #6]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d004      	beq.n	8007f86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8a5 	bl	80080ce <USBD_CtlError>
        break;
 8007f84:	e01a      	b.n	8007fbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f043 0202 	orr.w	r2, r3, #2
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f900 	bl	80081b0 <USBD_CtlSendData>
      break;
 8007fb0:	e004      	b.n	8007fbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f88a 	bl	80080ce <USBD_CtlError>
      break;
 8007fba:	bf00      	nop
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d107      	bne.n	8007fe6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f940 	bl	8008264 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fe4:	e013      	b.n	800800e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d10b      	bne.n	8008006 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	889b      	ldrh	r3, [r3, #4]
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f930 	bl	8008264 <USBD_CtlSendStatus>
}
 8008004:	e003      	b.n	800800e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f860 	bl	80080ce <USBD_CtlError>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008026:	b2db      	uxtb	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	2b02      	cmp	r3, #2
 800802c:	d80b      	bhi.n	8008046 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	885b      	ldrh	r3, [r3, #2]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d10c      	bne.n	8008050 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f910 	bl	8008264 <USBD_CtlSendStatus>
      }
      break;
 8008044:	e004      	b.n	8008050 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f840 	bl	80080ce <USBD_CtlError>
      break;
 800804e:	e000      	b.n	8008052 <USBD_ClrFeature+0x3c>
      break;
 8008050:	bf00      	nop
  }
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fa17 	bl	80074b8 <SWAPBYTE>
 800808a:	4603      	mov	r3, r0
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fa0a 	bl	80074b8 <SWAPBYTE>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff f9fd 	bl	80074b8 <SWAPBYTE>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	80da      	strh	r2, [r3, #6]
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fd16 	bl	8008b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fd12 	bl	8008b0c <USBD_LL_StallEP>
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d036      	beq.n	8008174 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800810a:	6938      	ldr	r0, [r7, #16]
 800810c:	f000 f836 	bl	800817c <USBD_GetLen>
 8008110:	4603      	mov	r3, r0
 8008112:	3301      	adds	r3, #1
 8008114:	b29b      	uxth	r3, r3
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4413      	add	r3, r2
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7812      	ldrb	r2, [r2, #0]
 8008128:	701a      	strb	r2, [r3, #0]
  idx++;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	3301      	adds	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4413      	add	r3, r2
 8008136:	2203      	movs	r2, #3
 8008138:	701a      	strb	r2, [r3, #0]
  idx++;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	3301      	adds	r3, #1
 800813e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008140:	e013      	b.n	800816a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4413      	add	r3, r2
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	613b      	str	r3, [r7, #16]
    idx++;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	3301      	adds	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	4413      	add	r3, r2
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
    idx++;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	3301      	adds	r3, #1
 8008168:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e7      	bne.n	8008142 <USBD_GetString+0x52>
 8008172:	e000      	b.n	8008176 <USBD_GetString+0x86>
    return;
 8008174:	bf00      	nop
  }
}
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800818c:	e005      	b.n	800819a <USBD_GetLen+0x1e>
  {
    len++;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	3301      	adds	r3, #1
 8008192:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3301      	adds	r3, #1
 8008198:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f5      	bne.n	800818e <USBD_GetLen+0x12>
  }

  return len;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2202      	movs	r2, #2
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	2100      	movs	r1, #0
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fd21 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	2100      	movs	r1, #0
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 fd10 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2203      	movs	r2, #3
 8008218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fd14 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fd03 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2204      	movs	r2, #4
 8008270:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008274:	2300      	movs	r3, #0
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fccf 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2205      	movs	r2, #5
 8008296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829a:	2300      	movs	r3, #0
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fcdd 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082b4:	2200      	movs	r2, #0
 80082b6:	4912      	ldr	r1, [pc, #72]	; (8008300 <MX_USB_DEVICE_Init+0x50>)
 80082b8:	4812      	ldr	r0, [pc, #72]	; (8008304 <MX_USB_DEVICE_Init+0x54>)
 80082ba:	f7fe fcdd 	bl	8006c78 <USBD_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082c4:	f7f8 fbf8 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082c8:	490f      	ldr	r1, [pc, #60]	; (8008308 <MX_USB_DEVICE_Init+0x58>)
 80082ca:	480e      	ldr	r0, [pc, #56]	; (8008304 <MX_USB_DEVICE_Init+0x54>)
 80082cc:	f7fe fd04 	bl	8006cd8 <USBD_RegisterClass>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082d6:	f7f8 fbef 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082da:	490c      	ldr	r1, [pc, #48]	; (800830c <MX_USB_DEVICE_Init+0x5c>)
 80082dc:	4809      	ldr	r0, [pc, #36]	; (8008304 <MX_USB_DEVICE_Init+0x54>)
 80082de:	f7fe fbf5 	bl	8006acc <USBD_CDC_RegisterInterface>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082e8:	f7f8 fbe6 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <MX_USB_DEVICE_Init+0x54>)
 80082ee:	f7fe fd29 	bl	8006d44 <USBD_Start>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082f8:	f7f8 fbde 	bl	8000ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082fc:	bf00      	nop
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	200000ac 	.word	0x200000ac
 8008304:	20000234 	.word	0x20000234
 8008308:	20000018 	.word	0x20000018
 800830c:	20000098 	.word	0x20000098

08008310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	4905      	ldr	r1, [pc, #20]	; (800832c <CDC_Init_FS+0x1c>)
 8008318:	4805      	ldr	r0, [pc, #20]	; (8008330 <CDC_Init_FS+0x20>)
 800831a:	f7fe fbf1 	bl	8006b00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800831e:	4905      	ldr	r1, [pc, #20]	; (8008334 <CDC_Init_FS+0x24>)
 8008320:	4803      	ldr	r0, [pc, #12]	; (8008330 <CDC_Init_FS+0x20>)
 8008322:	f7fe fc0f 	bl	8006b44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008326:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000d10 	.word	0x20000d10
 8008330:	20000234 	.word	0x20000234
 8008334:	20000510 	.word	0x20000510

08008338 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800833c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800833e:	4618      	mov	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
 8008354:	4613      	mov	r3, r2
 8008356:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b23      	cmp	r3, #35	; 0x23
 800835c:	d84a      	bhi.n	80083f4 <CDC_Control_FS+0xac>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <CDC_Control_FS+0x1c>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	080083f5 	.word	0x080083f5
 8008368:	080083f5 	.word	0x080083f5
 800836c:	080083f5 	.word	0x080083f5
 8008370:	080083f5 	.word	0x080083f5
 8008374:	080083f5 	.word	0x080083f5
 8008378:	080083f5 	.word	0x080083f5
 800837c:	080083f5 	.word	0x080083f5
 8008380:	080083f5 	.word	0x080083f5
 8008384:	080083f5 	.word	0x080083f5
 8008388:	080083f5 	.word	0x080083f5
 800838c:	080083f5 	.word	0x080083f5
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080083f5 	.word	0x080083f5
 8008398:	080083f5 	.word	0x080083f5
 800839c:	080083f5 	.word	0x080083f5
 80083a0:	080083f5 	.word	0x080083f5
 80083a4:	080083f5 	.word	0x080083f5
 80083a8:	080083f5 	.word	0x080083f5
 80083ac:	080083f5 	.word	0x080083f5
 80083b0:	080083f5 	.word	0x080083f5
 80083b4:	080083f5 	.word	0x080083f5
 80083b8:	080083f5 	.word	0x080083f5
 80083bc:	080083f5 	.word	0x080083f5
 80083c0:	080083f5 	.word	0x080083f5
 80083c4:	080083f5 	.word	0x080083f5
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	080083f5 	.word	0x080083f5
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	080083f5 	.word	0x080083f5
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	080083f5 	.word	0x080083f5
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	080083f5 	.word	0x080083f5
 80083ec:	080083f5 	.word	0x080083f5
 80083f0:	080083f5 	.word	0x080083f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083f4:	bf00      	nop
  }

  return (USBD_OK);
 80083f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <CDC_Receive_FS+0x24>)
 8008412:	f7fe fb97 	bl	8006b44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008416:	4804      	ldr	r0, [pc, #16]	; (8008428 <CDC_Receive_FS+0x24>)
 8008418:	f7fe fbf8 	bl	8006c0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800841c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000234 	.word	0x20000234

0800842c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <CDC_Transmit_FS+0x48>)
 800843e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008442:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800844e:	2301      	movs	r3, #1
 8008450:	e00b      	b.n	800846a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	461a      	mov	r2, r3
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	4806      	ldr	r0, [pc, #24]	; (8008474 <CDC_Transmit_FS+0x48>)
 800845a:	f7fe fb51 	bl	8006b00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <CDC_Transmit_FS+0x48>)
 8008460:	f7fe fb8e 	bl	8006b80 <USBD_CDC_TransmitPacket>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000234 	.word	0x20000234

08008478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800848a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
	...

0800849c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	6039      	str	r1, [r7, #0]
 80084a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2212      	movs	r2, #18
 80084ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ae:	4b03      	ldr	r3, [pc, #12]	; (80084bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	200000cc 	.word	0x200000cc

080084c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2204      	movs	r2, #4
 80084d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084d2:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	200000ec 	.word	0x200000ec

080084e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	4907      	ldr	r1, [pc, #28]	; (8008518 <USBD_FS_ProductStrDescriptor+0x34>)
 80084fa:	4808      	ldr	r0, [pc, #32]	; (800851c <USBD_FS_ProductStrDescriptor+0x38>)
 80084fc:	f7ff fdf8 	bl	80080f0 <USBD_GetString>
 8008500:	e004      	b.n	800850c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4904      	ldr	r1, [pc, #16]	; (8008518 <USBD_FS_ProductStrDescriptor+0x34>)
 8008506:	4805      	ldr	r0, [pc, #20]	; (800851c <USBD_FS_ProductStrDescriptor+0x38>)
 8008508:	f7ff fdf2 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20001510 	.word	0x20001510
 800851c:	08009758 	.word	0x08009758

08008520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	4904      	ldr	r1, [pc, #16]	; (8008540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008530:	4804      	ldr	r0, [pc, #16]	; (8008544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008532:	f7ff fddd 	bl	80080f0 <USBD_GetString>
  return USBD_StrDesc;
 8008536:	4b02      	ldr	r3, [pc, #8]	; (8008540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	20001510 	.word	0x20001510
 8008544:	08009770 	.word	0x08009770

08008548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	221a      	movs	r2, #26
 8008558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800855a:	f000 f855 	bl	8008608 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800855e:	4b02      	ldr	r3, [pc, #8]	; (8008568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	200000f0 	.word	0x200000f0

0800856c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4907      	ldr	r1, [pc, #28]	; (80085a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008582:	4808      	ldr	r0, [pc, #32]	; (80085a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008584:	f7ff fdb4 	bl	80080f0 <USBD_GetString>
 8008588:	e004      	b.n	8008594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	4904      	ldr	r1, [pc, #16]	; (80085a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800858e:	4805      	ldr	r0, [pc, #20]	; (80085a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008590:	f7ff fdae 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20001510 	.word	0x20001510
 80085a4:	08009784 	.word	0x08009784

080085a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	4907      	ldr	r1, [pc, #28]	; (80085dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085be:	4808      	ldr	r0, [pc, #32]	; (80085e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085c0:	f7ff fd96 	bl	80080f0 <USBD_GetString>
 80085c4:	e004      	b.n	80085d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	4904      	ldr	r1, [pc, #16]	; (80085dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ca:	4805      	ldr	r0, [pc, #20]	; (80085e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085cc:	f7ff fd90 	bl	80080f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20001510 	.word	0x20001510
 80085e0:	08009790 	.word	0x08009790

080085e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	220c      	movs	r2, #12
 80085f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	200000e0 	.word	0x200000e0

08008608 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <Get_SerialNum+0x44>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008614:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <Get_SerialNum+0x48>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <Get_SerialNum+0x4c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800862e:	2208      	movs	r2, #8
 8008630:	4909      	ldr	r1, [pc, #36]	; (8008658 <Get_SerialNum+0x50>)
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f814 	bl	8008660 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008638:	2204      	movs	r2, #4
 800863a:	4908      	ldr	r1, [pc, #32]	; (800865c <Get_SerialNum+0x54>)
 800863c:	68b8      	ldr	r0, [r7, #8]
 800863e:	f000 f80f 	bl	8008660 <IntToUnicode>
  }
}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	1fff7a10 	.word	0x1fff7a10
 8008650:	1fff7a14 	.word	0x1fff7a14
 8008654:	1fff7a18 	.word	0x1fff7a18
 8008658:	200000f2 	.word	0x200000f2
 800865c:	20000102 	.word	0x20000102

08008660 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]
 8008676:	e027      	b.n	80086c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	2b09      	cmp	r3, #9
 800867e:	d80b      	bhi.n	8008698 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	0f1b      	lsrs	r3, r3, #28
 8008684:	b2da      	uxtb	r2, r3
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	4619      	mov	r1, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	440b      	add	r3, r1
 8008690:	3230      	adds	r2, #48	; 0x30
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e00a      	b.n	80086ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	0f1b      	lsrs	r3, r3, #28
 800869c:	b2da      	uxtb	r2, r3
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4619      	mov	r1, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	440b      	add	r3, r1
 80086a8:	3237      	adds	r2, #55	; 0x37
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	3301      	adds	r3, #1
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	3301      	adds	r3, #1
 80086c6:	75fb      	strb	r3, [r7, #23]
 80086c8:	7dfa      	ldrb	r2, [r7, #23]
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d3d3      	bcc.n	8008678 <IntToUnicode+0x18>
  }
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b0a0      	sub	sp, #128	; 0x80
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	609a      	str	r2, [r3, #8]
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80086f8:	f107 0310 	add.w	r3, r7, #16
 80086fc:	225c      	movs	r2, #92	; 0x5c
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fb9d 	bl	8008e40 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800870e:	d156      	bne.n	80087be <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008716:	2300      	movs	r3, #0
 8008718:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800871a:	f107 0310 	add.w	r3, r7, #16
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fa66 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800872a:	f7f8 f9c5 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	6313      	str	r3, [r2, #48]	; 0x30
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800874a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800874e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008750:	2302      	movs	r3, #2
 8008752:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008754:	2300      	movs	r3, #0
 8008756:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008758:	2303      	movs	r3, #3
 800875a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800875c:	230a      	movs	r3, #10
 800875e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008764:	4619      	mov	r1, r3
 8008766:	4819      	ldr	r0, [pc, #100]	; (80087cc <HAL_PCD_MspInit+0xec>)
 8008768:	f7f8 fcb2 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800876c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008770:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008772:	2300      	movs	r3, #0
 8008774:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008776:	2300      	movs	r3, #0
 8008778:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800877a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800877e:	4619      	mov	r1, r3
 8008780:	4812      	ldr	r0, [pc, #72]	; (80087cc <HAL_PCD_MspInit+0xec>)
 8008782:	f7f8 fca5 	bl	80010d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 800878c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008790:	6353      	str	r3, [r2, #52]	; 0x34
 8008792:	2300      	movs	r3, #0
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 800879c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087a0:	6453      	str	r3, [r2, #68]	; 0x44
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_PCD_MspInit+0xe8>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087aa:	60bb      	str	r3, [r7, #8]
 80087ac:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087ae:	2200      	movs	r2, #0
 80087b0:	2100      	movs	r1, #0
 80087b2:	2043      	movs	r0, #67	; 0x43
 80087b4:	f7f8 fc55 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087b8:	2043      	movs	r0, #67	; 0x43
 80087ba:	f7f8 fc6e 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087be:	bf00      	nop
 80087c0:	3780      	adds	r7, #128	; 0x80
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40020000 	.word	0x40020000

080087d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe faf9 	bl	8006dde <USBD_LL_SetupStage>
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	4613      	mov	r3, r2
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	4619      	mov	r1, r3
 800881e:	f7fe fb33 	bl	8006e88 <USBD_LL_DataOutStage>
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800883c:	78fa      	ldrb	r2, [r7, #3]
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	334c      	adds	r3, #76	; 0x4c
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4619      	mov	r1, r3
 8008852:	f7fe fbcc 	bl	8006fee <USBD_LL_DataInStage>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fd00 	bl	8007272 <USBD_LL_SOF>
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e008      	b.n	80088a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d102      	bne.n	80088a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e001      	b.n	80088a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088a2:	f7f8 f909 	bl	8000ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088ac:	7bfa      	ldrb	r2, [r7, #15]
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fe fca0 	bl	80071f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fc48 	bl	8007152 <USBD_LL_Reset>
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fc9b 	bl	8007216 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <HAL_PCD_SuspendCallback+0x48>)
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	4a03      	ldr	r2, [pc, #12]	; (8008914 <HAL_PCD_SuspendCallback+0x48>)
 8008906:	f043 0306 	orr.w	r3, r3, #6
 800890a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	e000ed00 	.word	0xe000ed00

08008918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fc8b 	bl	8007242 <USBD_LL_Resume>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fce3 	bl	8007316 <USBD_LL_IsoOUTIncomplete>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fc9f 	bl	80072b2 <USBD_LL_IsoINIncomplete>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fcf5 	bl	800737a <USBD_LL_DevConnected>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fcf2 	bl	8007390 <USBD_LL_DevDisconnected>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d13c      	bne.n	8008a3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089c4:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <USBD_LL_Init+0x94>)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <USBD_LL_Init+0x94>)
 80089d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089d4:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <USBD_LL_Init+0x94>)
 80089d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <USBD_LL_Init+0x94>)
 80089de:	2206      	movs	r2, #6
 80089e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <USBD_LL_Init+0x94>)
 80089e4:	2202      	movs	r2, #2
 80089e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <USBD_LL_Init+0x94>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089ee:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <USBD_LL_Init+0x94>)
 80089f0:	2202      	movs	r2, #2
 80089f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <USBD_LL_Init+0x94>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <USBD_LL_Init+0x94>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a14:	f7f8 fd09 	bl	800142a <HAL_PCD_Init>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a1e:	f7f8 f84b 	bl	8000ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	4808      	ldr	r0, [pc, #32]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a26:	f7f9 ff94 	bl	8002952 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a2a:	2240      	movs	r2, #64	; 0x40
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4806      	ldr	r0, [pc, #24]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a30:	f7f9 ff48 	bl	80028c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a34:	2280      	movs	r2, #128	; 0x80
 8008a36:	2101      	movs	r1, #1
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a3a:	f7f9 ff43 	bl	80028c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20001710 	.word	0x20001710

08008a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7f8 fe05 	bl	8001672 <HAL_PCD_Start>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f990 	bl	8008d94 <USBD_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	70fb      	strb	r3, [r7, #3]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70bb      	strb	r3, [r7, #2]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008aaa:	78bb      	ldrb	r3, [r7, #2]
 8008aac:	883a      	ldrh	r2, [r7, #0]
 8008aae:	78f9      	ldrb	r1, [r7, #3]
 8008ab0:	f7f9 fb03 	bl	80020ba <HAL_PCD_EP_Open>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f96a 	bl	8008d94 <USBD_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7f9 fb4c 	bl	800218a <HAL_PCD_EP_Close>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f94b 	bl	8008d94 <USBD_Get_USB_Status>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f9 fc24 	bl	8002378 <HAL_PCD_EP_SetStall>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f92c 	bl	8008d94 <USBD_Get_USB_Status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7f9 fc69 	bl	8002440 <HAL_PCD_EP_ClrStall>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f90d 	bl	8008d94 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	333e      	adds	r3, #62	; 0x3e
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	e00b      	b.n	8008bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bfa:	78fa      	ldrb	r2, [r7, #3]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f9 fa36 	bl	8002070 <HAL_PCD_SetAddress>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f8c2 	bl	8008d94 <USBD_Get_USB_Status>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c3c:	7af9      	ldrb	r1, [r7, #11]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	f7f9 fb4f 	bl	80022e4 <HAL_PCD_EP_Transmit>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f8a1 	bl	8008d94 <USBD_Get_USB_Status>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c7e:	7af9      	ldrb	r1, [r7, #11]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	f7f9 facb 	bl	800221e <HAL_PCD_EP_Receive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f880 	bl	8008d94 <USBD_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7f9 fafb 	bl	80022b4 <HAL_PCD_EP_GetRxCount>
 8008cbe:	4603      	mov	r3, r0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_PCDEx_LPM_Callback+0x18>
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d01f      	beq.n	8008d1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008cde:	e03b      	b.n	8008d58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008ce8:	f7f7 fd46 	bl	8000778 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cec:	4b1c      	ldr	r3, [pc, #112]	; (8008d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	; (8008d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8008cf2:	f023 0306 	bic.w	r3, r3, #6
 8008cf6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6812      	ldr	r2, [r2, #0]
 8008d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d0a:	f023 0301 	bic.w	r3, r3, #1
 8008d0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fa93 	bl	8007242 <USBD_LL_Resume>
    break;
 8008d1c:	e01c      	b.n	8008d58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6812      	ldr	r2, [r2, #0]
 8008d2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d30:	f043 0301 	orr.w	r3, r3, #1
 8008d34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe fa6a 	bl	8007216 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <HAL_PCDEx_LPM_Callback+0x98>)
 8008d50:	f043 0306 	orr.w	r3, r3, #6
 8008d54:	6113      	str	r3, [r2, #16]
    break;
 8008d56:	bf00      	nop
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	e000ed00 	.word	0xe000ed00

08008d64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <USBD_static_malloc+0x18>)
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20001c1c 	.word	0x20001c1c

08008d80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d817      	bhi.n	8008dd8 <USBD_Get_USB_Status+0x44>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_Get_USB_Status+0x1c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dd3 	.word	0x08008dd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e00b      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	e008      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e005      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e002      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	bf00      	nop
  }
  return usb_status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <__errno>:
 8008dec:	4b01      	ldr	r3, [pc, #4]	; (8008df4 <__errno+0x8>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	2000010c 	.word	0x2000010c

08008df8 <__libc_init_array>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4d0d      	ldr	r5, [pc, #52]	; (8008e30 <__libc_init_array+0x38>)
 8008dfc:	4c0d      	ldr	r4, [pc, #52]	; (8008e34 <__libc_init_array+0x3c>)
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	2600      	movs	r6, #0
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	d109      	bne.n	8008e1c <__libc_init_array+0x24>
 8008e08:	4d0b      	ldr	r5, [pc, #44]	; (8008e38 <__libc_init_array+0x40>)
 8008e0a:	4c0c      	ldr	r4, [pc, #48]	; (8008e3c <__libc_init_array+0x44>)
 8008e0c:	f000 fc8e 	bl	800972c <_init>
 8008e10:	1b64      	subs	r4, r4, r5
 8008e12:	10a4      	asrs	r4, r4, #2
 8008e14:	2600      	movs	r6, #0
 8008e16:	42a6      	cmp	r6, r4
 8008e18:	d105      	bne.n	8008e26 <__libc_init_array+0x2e>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e20:	4798      	blx	r3
 8008e22:	3601      	adds	r6, #1
 8008e24:	e7ee      	b.n	8008e04 <__libc_init_array+0xc>
 8008e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e2a:	4798      	blx	r3
 8008e2c:	3601      	adds	r6, #1
 8008e2e:	e7f2      	b.n	8008e16 <__libc_init_array+0x1e>
 8008e30:	080097f4 	.word	0x080097f4
 8008e34:	080097f4 	.word	0x080097f4
 8008e38:	080097f4 	.word	0x080097f4
 8008e3c:	080097f8 	.word	0x080097f8

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <siprintf>:
 8008e50:	b40e      	push	{r1, r2, r3}
 8008e52:	b500      	push	{lr}
 8008e54:	b09c      	sub	sp, #112	; 0x70
 8008e56:	ab1d      	add	r3, sp, #116	; 0x74
 8008e58:	9002      	str	r0, [sp, #8]
 8008e5a:	9006      	str	r0, [sp, #24]
 8008e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e60:	4809      	ldr	r0, [pc, #36]	; (8008e88 <siprintf+0x38>)
 8008e62:	9107      	str	r1, [sp, #28]
 8008e64:	9104      	str	r1, [sp, #16]
 8008e66:	4909      	ldr	r1, [pc, #36]	; (8008e8c <siprintf+0x3c>)
 8008e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	9301      	str	r3, [sp, #4]
 8008e72:	a902      	add	r1, sp, #8
 8008e74:	f000 f868 	bl	8008f48 <_svfiprintf_r>
 8008e78:	9b02      	ldr	r3, [sp, #8]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	b01c      	add	sp, #112	; 0x70
 8008e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e84:	b003      	add	sp, #12
 8008e86:	4770      	bx	lr
 8008e88:	2000010c 	.word	0x2000010c
 8008e8c:	ffff0208 	.word	0xffff0208

08008e90 <__ssputs_r>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	688e      	ldr	r6, [r1, #8]
 8008e96:	429e      	cmp	r6, r3
 8008e98:	4682      	mov	sl, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	461f      	mov	r7, r3
 8008ea0:	d838      	bhi.n	8008f14 <__ssputs_r+0x84>
 8008ea2:	898a      	ldrh	r2, [r1, #12]
 8008ea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ea8:	d032      	beq.n	8008f10 <__ssputs_r+0x80>
 8008eaa:	6825      	ldr	r5, [r4, #0]
 8008eac:	6909      	ldr	r1, [r1, #16]
 8008eae:	eba5 0901 	sub.w	r9, r5, r1
 8008eb2:	6965      	ldr	r5, [r4, #20]
 8008eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	444b      	add	r3, r9
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	bf38      	it	cc
 8008ec6:	461d      	movcc	r5, r3
 8008ec8:	0553      	lsls	r3, r2, #21
 8008eca:	d531      	bpl.n	8008f30 <__ssputs_r+0xa0>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f000 fb63 	bl	8009598 <_malloc_r>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b950      	cbnz	r0, 8008eec <__ssputs_r+0x5c>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	f8ca 3000 	str.w	r3, [sl]
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eec:	6921      	ldr	r1, [r4, #16]
 8008eee:	464a      	mov	r2, r9
 8008ef0:	f000 fabe 	bl	8009470 <memcpy>
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efe:	81a3      	strh	r3, [r4, #12]
 8008f00:	6126      	str	r6, [r4, #16]
 8008f02:	6165      	str	r5, [r4, #20]
 8008f04:	444e      	add	r6, r9
 8008f06:	eba5 0509 	sub.w	r5, r5, r9
 8008f0a:	6026      	str	r6, [r4, #0]
 8008f0c:	60a5      	str	r5, [r4, #8]
 8008f0e:	463e      	mov	r6, r7
 8008f10:	42be      	cmp	r6, r7
 8008f12:	d900      	bls.n	8008f16 <__ssputs_r+0x86>
 8008f14:	463e      	mov	r6, r7
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4641      	mov	r1, r8
 8008f1c:	f000 fab6 	bl	800948c <memmove>
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	1b9b      	subs	r3, r3, r6
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	4433      	add	r3, r6
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7db      	b.n	8008ee8 <__ssputs_r+0x58>
 8008f30:	462a      	mov	r2, r5
 8008f32:	f000 fba5 	bl	8009680 <_realloc_r>
 8008f36:	4606      	mov	r6, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1e1      	bne.n	8008f00 <__ssputs_r+0x70>
 8008f3c:	6921      	ldr	r1, [r4, #16]
 8008f3e:	4650      	mov	r0, sl
 8008f40:	f000 fabe 	bl	80094c0 <_free_r>
 8008f44:	e7c7      	b.n	8008ed6 <__ssputs_r+0x46>
	...

08008f48 <_svfiprintf_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	4698      	mov	r8, r3
 8008f4e:	898b      	ldrh	r3, [r1, #12]
 8008f50:	061b      	lsls	r3, r3, #24
 8008f52:	b09d      	sub	sp, #116	; 0x74
 8008f54:	4607      	mov	r7, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	d50e      	bpl.n	8008f7a <_svfiprintf_r+0x32>
 8008f5c:	690b      	ldr	r3, [r1, #16]
 8008f5e:	b963      	cbnz	r3, 8008f7a <_svfiprintf_r+0x32>
 8008f60:	2140      	movs	r1, #64	; 0x40
 8008f62:	f000 fb19 	bl	8009598 <_malloc_r>
 8008f66:	6028      	str	r0, [r5, #0]
 8008f68:	6128      	str	r0, [r5, #16]
 8008f6a:	b920      	cbnz	r0, 8008f76 <_svfiprintf_r+0x2e>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	e0d1      	b.n	800911a <_svfiprintf_r+0x1d2>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	616b      	str	r3, [r5, #20]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7e:	2320      	movs	r3, #32
 8008f80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f88:	2330      	movs	r3, #48	; 0x30
 8008f8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009134 <_svfiprintf_r+0x1ec>
 8008f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f92:	f04f 0901 	mov.w	r9, #1
 8008f96:	4623      	mov	r3, r4
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f9e:	b10a      	cbz	r2, 8008fa4 <_svfiprintf_r+0x5c>
 8008fa0:	2a25      	cmp	r2, #37	; 0x25
 8008fa2:	d1f9      	bne.n	8008f98 <_svfiprintf_r+0x50>
 8008fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa8:	d00b      	beq.n	8008fc2 <_svfiprintf_r+0x7a>
 8008faa:	465b      	mov	r3, fp
 8008fac:	4622      	mov	r2, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ff6d 	bl	8008e90 <__ssputs_r>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f000 80aa 	beq.w	8009110 <_svfiprintf_r+0x1c8>
 8008fbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fbe:	445a      	add	r2, fp
 8008fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80a2 	beq.w	8009110 <_svfiprintf_r+0x1c8>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd6:	f10a 0a01 	add.w	sl, sl, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	9307      	str	r3, [sp, #28]
 8008fde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fe2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fe4:	4654      	mov	r4, sl
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fec:	4851      	ldr	r0, [pc, #324]	; (8009134 <_svfiprintf_r+0x1ec>)
 8008fee:	f7f7 f90f 	bl	8000210 <memchr>
 8008ff2:	9a04      	ldr	r2, [sp, #16]
 8008ff4:	b9d8      	cbnz	r0, 800902e <_svfiprintf_r+0xe6>
 8008ff6:	06d0      	lsls	r0, r2, #27
 8008ff8:	bf44      	itt	mi
 8008ffa:	2320      	movmi	r3, #32
 8008ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009000:	0711      	lsls	r1, r2, #28
 8009002:	bf44      	itt	mi
 8009004:	232b      	movmi	r3, #43	; 0x2b
 8009006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b2a      	cmp	r3, #42	; 0x2a
 8009010:	d015      	beq.n	800903e <_svfiprintf_r+0xf6>
 8009012:	9a07      	ldr	r2, [sp, #28]
 8009014:	4654      	mov	r4, sl
 8009016:	2000      	movs	r0, #0
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4621      	mov	r1, r4
 800901e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009022:	3b30      	subs	r3, #48	; 0x30
 8009024:	2b09      	cmp	r3, #9
 8009026:	d94e      	bls.n	80090c6 <_svfiprintf_r+0x17e>
 8009028:	b1b0      	cbz	r0, 8009058 <_svfiprintf_r+0x110>
 800902a:	9207      	str	r2, [sp, #28]
 800902c:	e014      	b.n	8009058 <_svfiprintf_r+0x110>
 800902e:	eba0 0308 	sub.w	r3, r0, r8
 8009032:	fa09 f303 	lsl.w	r3, r9, r3
 8009036:	4313      	orrs	r3, r2
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	46a2      	mov	sl, r4
 800903c:	e7d2      	b.n	8008fe4 <_svfiprintf_r+0x9c>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d19      	adds	r1, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9103      	str	r1, [sp, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfbb      	ittet	lt
 800904a:	425b      	neglt	r3, r3
 800904c:	f042 0202 	orrlt.w	r2, r2, #2
 8009050:	9307      	strge	r3, [sp, #28]
 8009052:	9307      	strlt	r3, [sp, #28]
 8009054:	bfb8      	it	lt
 8009056:	9204      	strlt	r2, [sp, #16]
 8009058:	7823      	ldrb	r3, [r4, #0]
 800905a:	2b2e      	cmp	r3, #46	; 0x2e
 800905c:	d10c      	bne.n	8009078 <_svfiprintf_r+0x130>
 800905e:	7863      	ldrb	r3, [r4, #1]
 8009060:	2b2a      	cmp	r3, #42	; 0x2a
 8009062:	d135      	bne.n	80090d0 <_svfiprintf_r+0x188>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	1d1a      	adds	r2, r3, #4
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	9203      	str	r2, [sp, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	bfb8      	it	lt
 8009070:	f04f 33ff 	movlt.w	r3, #4294967295
 8009074:	3402      	adds	r4, #2
 8009076:	9305      	str	r3, [sp, #20]
 8009078:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009144 <_svfiprintf_r+0x1fc>
 800907c:	7821      	ldrb	r1, [r4, #0]
 800907e:	2203      	movs	r2, #3
 8009080:	4650      	mov	r0, sl
 8009082:	f7f7 f8c5 	bl	8000210 <memchr>
 8009086:	b140      	cbz	r0, 800909a <_svfiprintf_r+0x152>
 8009088:	2340      	movs	r3, #64	; 0x40
 800908a:	eba0 000a 	sub.w	r0, r0, sl
 800908e:	fa03 f000 	lsl.w	r0, r3, r0
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	4303      	orrs	r3, r0
 8009096:	3401      	adds	r4, #1
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909e:	4826      	ldr	r0, [pc, #152]	; (8009138 <_svfiprintf_r+0x1f0>)
 80090a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090a4:	2206      	movs	r2, #6
 80090a6:	f7f7 f8b3 	bl	8000210 <memchr>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d038      	beq.n	8009120 <_svfiprintf_r+0x1d8>
 80090ae:	4b23      	ldr	r3, [pc, #140]	; (800913c <_svfiprintf_r+0x1f4>)
 80090b0:	bb1b      	cbnz	r3, 80090fa <_svfiprintf_r+0x1b2>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	3307      	adds	r3, #7
 80090b6:	f023 0307 	bic.w	r3, r3, #7
 80090ba:	3308      	adds	r3, #8
 80090bc:	9303      	str	r3, [sp, #12]
 80090be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c0:	4433      	add	r3, r6
 80090c2:	9309      	str	r3, [sp, #36]	; 0x24
 80090c4:	e767      	b.n	8008f96 <_svfiprintf_r+0x4e>
 80090c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ca:	460c      	mov	r4, r1
 80090cc:	2001      	movs	r0, #1
 80090ce:	e7a5      	b.n	800901c <_svfiprintf_r+0xd4>
 80090d0:	2300      	movs	r3, #0
 80090d2:	3401      	adds	r4, #1
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	4619      	mov	r1, r3
 80090d8:	f04f 0c0a 	mov.w	ip, #10
 80090dc:	4620      	mov	r0, r4
 80090de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e2:	3a30      	subs	r2, #48	; 0x30
 80090e4:	2a09      	cmp	r2, #9
 80090e6:	d903      	bls.n	80090f0 <_svfiprintf_r+0x1a8>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0c5      	beq.n	8009078 <_svfiprintf_r+0x130>
 80090ec:	9105      	str	r1, [sp, #20]
 80090ee:	e7c3      	b.n	8009078 <_svfiprintf_r+0x130>
 80090f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f4:	4604      	mov	r4, r0
 80090f6:	2301      	movs	r3, #1
 80090f8:	e7f0      	b.n	80090dc <_svfiprintf_r+0x194>
 80090fa:	ab03      	add	r3, sp, #12
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	462a      	mov	r2, r5
 8009100:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <_svfiprintf_r+0x1f8>)
 8009102:	a904      	add	r1, sp, #16
 8009104:	4638      	mov	r0, r7
 8009106:	f3af 8000 	nop.w
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	4606      	mov	r6, r0
 800910e:	d1d6      	bne.n	80090be <_svfiprintf_r+0x176>
 8009110:	89ab      	ldrh	r3, [r5, #12]
 8009112:	065b      	lsls	r3, r3, #25
 8009114:	f53f af2c 	bmi.w	8008f70 <_svfiprintf_r+0x28>
 8009118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800911a:	b01d      	add	sp, #116	; 0x74
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	ab03      	add	r3, sp, #12
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	462a      	mov	r2, r5
 8009126:	4b06      	ldr	r3, [pc, #24]	; (8009140 <_svfiprintf_r+0x1f8>)
 8009128:	a904      	add	r1, sp, #16
 800912a:	4638      	mov	r0, r7
 800912c:	f000 f87a 	bl	8009224 <_printf_i>
 8009130:	e7eb      	b.n	800910a <_svfiprintf_r+0x1c2>
 8009132:	bf00      	nop
 8009134:	080097b8 	.word	0x080097b8
 8009138:	080097c2 	.word	0x080097c2
 800913c:	00000000 	.word	0x00000000
 8009140:	08008e91 	.word	0x08008e91
 8009144:	080097be 	.word	0x080097be

08009148 <_printf_common>:
 8009148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	4616      	mov	r6, r2
 800914e:	4699      	mov	r9, r3
 8009150:	688a      	ldr	r2, [r1, #8]
 8009152:	690b      	ldr	r3, [r1, #16]
 8009154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009158:	4293      	cmp	r3, r2
 800915a:	bfb8      	it	lt
 800915c:	4613      	movlt	r3, r2
 800915e:	6033      	str	r3, [r6, #0]
 8009160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009164:	4607      	mov	r7, r0
 8009166:	460c      	mov	r4, r1
 8009168:	b10a      	cbz	r2, 800916e <_printf_common+0x26>
 800916a:	3301      	adds	r3, #1
 800916c:	6033      	str	r3, [r6, #0]
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	0699      	lsls	r1, r3, #26
 8009172:	bf42      	ittt	mi
 8009174:	6833      	ldrmi	r3, [r6, #0]
 8009176:	3302      	addmi	r3, #2
 8009178:	6033      	strmi	r3, [r6, #0]
 800917a:	6825      	ldr	r5, [r4, #0]
 800917c:	f015 0506 	ands.w	r5, r5, #6
 8009180:	d106      	bne.n	8009190 <_printf_common+0x48>
 8009182:	f104 0a19 	add.w	sl, r4, #25
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	6832      	ldr	r2, [r6, #0]
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	42ab      	cmp	r3, r5
 800918e:	dc26      	bgt.n	80091de <_printf_common+0x96>
 8009190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009194:	1e13      	subs	r3, r2, #0
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	bf18      	it	ne
 800919a:	2301      	movne	r3, #1
 800919c:	0692      	lsls	r2, r2, #26
 800919e:	d42b      	bmi.n	80091f8 <_printf_common+0xb0>
 80091a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a4:	4649      	mov	r1, r9
 80091a6:	4638      	mov	r0, r7
 80091a8:	47c0      	blx	r8
 80091aa:	3001      	adds	r0, #1
 80091ac:	d01e      	beq.n	80091ec <_printf_common+0xa4>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	68e5      	ldr	r5, [r4, #12]
 80091b2:	6832      	ldr	r2, [r6, #0]
 80091b4:	f003 0306 	and.w	r3, r3, #6
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	bf08      	it	eq
 80091bc:	1aad      	subeq	r5, r5, r2
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	6922      	ldr	r2, [r4, #16]
 80091c2:	bf0c      	ite	eq
 80091c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c8:	2500      	movne	r5, #0
 80091ca:	4293      	cmp	r3, r2
 80091cc:	bfc4      	itt	gt
 80091ce:	1a9b      	subgt	r3, r3, r2
 80091d0:	18ed      	addgt	r5, r5, r3
 80091d2:	2600      	movs	r6, #0
 80091d4:	341a      	adds	r4, #26
 80091d6:	42b5      	cmp	r5, r6
 80091d8:	d11a      	bne.n	8009210 <_printf_common+0xc8>
 80091da:	2000      	movs	r0, #0
 80091dc:	e008      	b.n	80091f0 <_printf_common+0xa8>
 80091de:	2301      	movs	r3, #1
 80091e0:	4652      	mov	r2, sl
 80091e2:	4649      	mov	r1, r9
 80091e4:	4638      	mov	r0, r7
 80091e6:	47c0      	blx	r8
 80091e8:	3001      	adds	r0, #1
 80091ea:	d103      	bne.n	80091f4 <_printf_common+0xac>
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f4:	3501      	adds	r5, #1
 80091f6:	e7c6      	b.n	8009186 <_printf_common+0x3e>
 80091f8:	18e1      	adds	r1, r4, r3
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	2030      	movs	r0, #48	; 0x30
 80091fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009202:	4422      	add	r2, r4
 8009204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800920c:	3302      	adds	r3, #2
 800920e:	e7c7      	b.n	80091a0 <_printf_common+0x58>
 8009210:	2301      	movs	r3, #1
 8009212:	4622      	mov	r2, r4
 8009214:	4649      	mov	r1, r9
 8009216:	4638      	mov	r0, r7
 8009218:	47c0      	blx	r8
 800921a:	3001      	adds	r0, #1
 800921c:	d0e6      	beq.n	80091ec <_printf_common+0xa4>
 800921e:	3601      	adds	r6, #1
 8009220:	e7d9      	b.n	80091d6 <_printf_common+0x8e>
	...

08009224 <_printf_i>:
 8009224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	7e0f      	ldrb	r7, [r1, #24]
 800922a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800922c:	2f78      	cmp	r7, #120	; 0x78
 800922e:	4691      	mov	r9, r2
 8009230:	4680      	mov	r8, r0
 8009232:	460c      	mov	r4, r1
 8009234:	469a      	mov	sl, r3
 8009236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800923a:	d807      	bhi.n	800924c <_printf_i+0x28>
 800923c:	2f62      	cmp	r7, #98	; 0x62
 800923e:	d80a      	bhi.n	8009256 <_printf_i+0x32>
 8009240:	2f00      	cmp	r7, #0
 8009242:	f000 80d8 	beq.w	80093f6 <_printf_i+0x1d2>
 8009246:	2f58      	cmp	r7, #88	; 0x58
 8009248:	f000 80a3 	beq.w	8009392 <_printf_i+0x16e>
 800924c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009254:	e03a      	b.n	80092cc <_printf_i+0xa8>
 8009256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800925a:	2b15      	cmp	r3, #21
 800925c:	d8f6      	bhi.n	800924c <_printf_i+0x28>
 800925e:	a101      	add	r1, pc, #4	; (adr r1, 8009264 <_printf_i+0x40>)
 8009260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009264:	080092bd 	.word	0x080092bd
 8009268:	080092d1 	.word	0x080092d1
 800926c:	0800924d 	.word	0x0800924d
 8009270:	0800924d 	.word	0x0800924d
 8009274:	0800924d 	.word	0x0800924d
 8009278:	0800924d 	.word	0x0800924d
 800927c:	080092d1 	.word	0x080092d1
 8009280:	0800924d 	.word	0x0800924d
 8009284:	0800924d 	.word	0x0800924d
 8009288:	0800924d 	.word	0x0800924d
 800928c:	0800924d 	.word	0x0800924d
 8009290:	080093dd 	.word	0x080093dd
 8009294:	08009301 	.word	0x08009301
 8009298:	080093bf 	.word	0x080093bf
 800929c:	0800924d 	.word	0x0800924d
 80092a0:	0800924d 	.word	0x0800924d
 80092a4:	080093ff 	.word	0x080093ff
 80092a8:	0800924d 	.word	0x0800924d
 80092ac:	08009301 	.word	0x08009301
 80092b0:	0800924d 	.word	0x0800924d
 80092b4:	0800924d 	.word	0x0800924d
 80092b8:	080093c7 	.word	0x080093c7
 80092bc:	682b      	ldr	r3, [r5, #0]
 80092be:	1d1a      	adds	r2, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	602a      	str	r2, [r5, #0]
 80092c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0a3      	b.n	8009418 <_printf_i+0x1f4>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	6829      	ldr	r1, [r5, #0]
 80092d4:	0606      	lsls	r6, r0, #24
 80092d6:	f101 0304 	add.w	r3, r1, #4
 80092da:	d50a      	bpl.n	80092f2 <_printf_i+0xce>
 80092dc:	680e      	ldr	r6, [r1, #0]
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	2e00      	cmp	r6, #0
 80092e2:	da03      	bge.n	80092ec <_printf_i+0xc8>
 80092e4:	232d      	movs	r3, #45	; 0x2d
 80092e6:	4276      	negs	r6, r6
 80092e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ec:	485e      	ldr	r0, [pc, #376]	; (8009468 <_printf_i+0x244>)
 80092ee:	230a      	movs	r3, #10
 80092f0:	e019      	b.n	8009326 <_printf_i+0x102>
 80092f2:	680e      	ldr	r6, [r1, #0]
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092fa:	bf18      	it	ne
 80092fc:	b236      	sxthne	r6, r6
 80092fe:	e7ef      	b.n	80092e0 <_printf_i+0xbc>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	1d19      	adds	r1, r3, #4
 8009306:	6029      	str	r1, [r5, #0]
 8009308:	0601      	lsls	r1, r0, #24
 800930a:	d501      	bpl.n	8009310 <_printf_i+0xec>
 800930c:	681e      	ldr	r6, [r3, #0]
 800930e:	e002      	b.n	8009316 <_printf_i+0xf2>
 8009310:	0646      	lsls	r6, r0, #25
 8009312:	d5fb      	bpl.n	800930c <_printf_i+0xe8>
 8009314:	881e      	ldrh	r6, [r3, #0]
 8009316:	4854      	ldr	r0, [pc, #336]	; (8009468 <_printf_i+0x244>)
 8009318:	2f6f      	cmp	r7, #111	; 0x6f
 800931a:	bf0c      	ite	eq
 800931c:	2308      	moveq	r3, #8
 800931e:	230a      	movne	r3, #10
 8009320:	2100      	movs	r1, #0
 8009322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009326:	6865      	ldr	r5, [r4, #4]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	2d00      	cmp	r5, #0
 800932c:	bfa2      	ittt	ge
 800932e:	6821      	ldrge	r1, [r4, #0]
 8009330:	f021 0104 	bicge.w	r1, r1, #4
 8009334:	6021      	strge	r1, [r4, #0]
 8009336:	b90e      	cbnz	r6, 800933c <_printf_i+0x118>
 8009338:	2d00      	cmp	r5, #0
 800933a:	d04d      	beq.n	80093d8 <_printf_i+0x1b4>
 800933c:	4615      	mov	r5, r2
 800933e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009342:	fb03 6711 	mls	r7, r3, r1, r6
 8009346:	5dc7      	ldrb	r7, [r0, r7]
 8009348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800934c:	4637      	mov	r7, r6
 800934e:	42bb      	cmp	r3, r7
 8009350:	460e      	mov	r6, r1
 8009352:	d9f4      	bls.n	800933e <_printf_i+0x11a>
 8009354:	2b08      	cmp	r3, #8
 8009356:	d10b      	bne.n	8009370 <_printf_i+0x14c>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	07de      	lsls	r6, r3, #31
 800935c:	d508      	bpl.n	8009370 <_printf_i+0x14c>
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	6861      	ldr	r1, [r4, #4]
 8009362:	4299      	cmp	r1, r3
 8009364:	bfde      	ittt	le
 8009366:	2330      	movle	r3, #48	; 0x30
 8009368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800936c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009370:	1b52      	subs	r2, r2, r5
 8009372:	6122      	str	r2, [r4, #16]
 8009374:	f8cd a000 	str.w	sl, [sp]
 8009378:	464b      	mov	r3, r9
 800937a:	aa03      	add	r2, sp, #12
 800937c:	4621      	mov	r1, r4
 800937e:	4640      	mov	r0, r8
 8009380:	f7ff fee2 	bl	8009148 <_printf_common>
 8009384:	3001      	adds	r0, #1
 8009386:	d14c      	bne.n	8009422 <_printf_i+0x1fe>
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	b004      	add	sp, #16
 800938e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009392:	4835      	ldr	r0, [pc, #212]	; (8009468 <_printf_i+0x244>)
 8009394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	f851 6b04 	ldr.w	r6, [r1], #4
 80093a0:	6029      	str	r1, [r5, #0]
 80093a2:	061d      	lsls	r5, r3, #24
 80093a4:	d514      	bpl.n	80093d0 <_printf_i+0x1ac>
 80093a6:	07df      	lsls	r7, r3, #31
 80093a8:	bf44      	itt	mi
 80093aa:	f043 0320 	orrmi.w	r3, r3, #32
 80093ae:	6023      	strmi	r3, [r4, #0]
 80093b0:	b91e      	cbnz	r6, 80093ba <_printf_i+0x196>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	f023 0320 	bic.w	r3, r3, #32
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	2310      	movs	r3, #16
 80093bc:	e7b0      	b.n	8009320 <_printf_i+0xfc>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	f043 0320 	orr.w	r3, r3, #32
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	2378      	movs	r3, #120	; 0x78
 80093c8:	4828      	ldr	r0, [pc, #160]	; (800946c <_printf_i+0x248>)
 80093ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ce:	e7e3      	b.n	8009398 <_printf_i+0x174>
 80093d0:	0659      	lsls	r1, r3, #25
 80093d2:	bf48      	it	mi
 80093d4:	b2b6      	uxthmi	r6, r6
 80093d6:	e7e6      	b.n	80093a6 <_printf_i+0x182>
 80093d8:	4615      	mov	r5, r2
 80093da:	e7bb      	b.n	8009354 <_printf_i+0x130>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	6826      	ldr	r6, [r4, #0]
 80093e0:	6961      	ldr	r1, [r4, #20]
 80093e2:	1d18      	adds	r0, r3, #4
 80093e4:	6028      	str	r0, [r5, #0]
 80093e6:	0635      	lsls	r5, r6, #24
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0x1cc>
 80093ec:	6019      	str	r1, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <_printf_i+0x1d2>
 80093f0:	0670      	lsls	r0, r6, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0x1c8>
 80093f4:	8019      	strh	r1, [r3, #0]
 80093f6:	2300      	movs	r3, #0
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	4615      	mov	r5, r2
 80093fc:	e7ba      	b.n	8009374 <_printf_i+0x150>
 80093fe:	682b      	ldr	r3, [r5, #0]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	681d      	ldr	r5, [r3, #0]
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	2100      	movs	r1, #0
 800940a:	4628      	mov	r0, r5
 800940c:	f7f6 ff00 	bl	8000210 <memchr>
 8009410:	b108      	cbz	r0, 8009416 <_printf_i+0x1f2>
 8009412:	1b40      	subs	r0, r0, r5
 8009414:	6060      	str	r0, [r4, #4]
 8009416:	6863      	ldr	r3, [r4, #4]
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	2300      	movs	r3, #0
 800941c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009420:	e7a8      	b.n	8009374 <_printf_i+0x150>
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	462a      	mov	r2, r5
 8009426:	4649      	mov	r1, r9
 8009428:	4640      	mov	r0, r8
 800942a:	47d0      	blx	sl
 800942c:	3001      	adds	r0, #1
 800942e:	d0ab      	beq.n	8009388 <_printf_i+0x164>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	079b      	lsls	r3, r3, #30
 8009434:	d413      	bmi.n	800945e <_printf_i+0x23a>
 8009436:	68e0      	ldr	r0, [r4, #12]
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	4298      	cmp	r0, r3
 800943c:	bfb8      	it	lt
 800943e:	4618      	movlt	r0, r3
 8009440:	e7a4      	b.n	800938c <_printf_i+0x168>
 8009442:	2301      	movs	r3, #1
 8009444:	4632      	mov	r2, r6
 8009446:	4649      	mov	r1, r9
 8009448:	4640      	mov	r0, r8
 800944a:	47d0      	blx	sl
 800944c:	3001      	adds	r0, #1
 800944e:	d09b      	beq.n	8009388 <_printf_i+0x164>
 8009450:	3501      	adds	r5, #1
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	9903      	ldr	r1, [sp, #12]
 8009456:	1a5b      	subs	r3, r3, r1
 8009458:	42ab      	cmp	r3, r5
 800945a:	dcf2      	bgt.n	8009442 <_printf_i+0x21e>
 800945c:	e7eb      	b.n	8009436 <_printf_i+0x212>
 800945e:	2500      	movs	r5, #0
 8009460:	f104 0619 	add.w	r6, r4, #25
 8009464:	e7f5      	b.n	8009452 <_printf_i+0x22e>
 8009466:	bf00      	nop
 8009468:	080097c9 	.word	0x080097c9
 800946c:	080097da 	.word	0x080097da

08009470 <memcpy>:
 8009470:	440a      	add	r2, r1
 8009472:	4291      	cmp	r1, r2
 8009474:	f100 33ff 	add.w	r3, r0, #4294967295
 8009478:	d100      	bne.n	800947c <memcpy+0xc>
 800947a:	4770      	bx	lr
 800947c:	b510      	push	{r4, lr}
 800947e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009486:	4291      	cmp	r1, r2
 8009488:	d1f9      	bne.n	800947e <memcpy+0xe>
 800948a:	bd10      	pop	{r4, pc}

0800948c <memmove>:
 800948c:	4288      	cmp	r0, r1
 800948e:	b510      	push	{r4, lr}
 8009490:	eb01 0402 	add.w	r4, r1, r2
 8009494:	d902      	bls.n	800949c <memmove+0x10>
 8009496:	4284      	cmp	r4, r0
 8009498:	4623      	mov	r3, r4
 800949a:	d807      	bhi.n	80094ac <memmove+0x20>
 800949c:	1e43      	subs	r3, r0, #1
 800949e:	42a1      	cmp	r1, r4
 80094a0:	d008      	beq.n	80094b4 <memmove+0x28>
 80094a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094aa:	e7f8      	b.n	800949e <memmove+0x12>
 80094ac:	4402      	add	r2, r0
 80094ae:	4601      	mov	r1, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	d100      	bne.n	80094b6 <memmove+0x2a>
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094be:	e7f7      	b.n	80094b0 <memmove+0x24>

080094c0 <_free_r>:
 80094c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094c2:	2900      	cmp	r1, #0
 80094c4:	d044      	beq.n	8009550 <_free_r+0x90>
 80094c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ca:	9001      	str	r0, [sp, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f1a1 0404 	sub.w	r4, r1, #4
 80094d2:	bfb8      	it	lt
 80094d4:	18e4      	addlt	r4, r4, r3
 80094d6:	f000 f913 	bl	8009700 <__malloc_lock>
 80094da:	4a1e      	ldr	r2, [pc, #120]	; (8009554 <_free_r+0x94>)
 80094dc:	9801      	ldr	r0, [sp, #4]
 80094de:	6813      	ldr	r3, [r2, #0]
 80094e0:	b933      	cbnz	r3, 80094f0 <_free_r+0x30>
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	6014      	str	r4, [r2, #0]
 80094e6:	b003      	add	sp, #12
 80094e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ec:	f000 b90e 	b.w	800970c <__malloc_unlock>
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	d908      	bls.n	8009506 <_free_r+0x46>
 80094f4:	6825      	ldr	r5, [r4, #0]
 80094f6:	1961      	adds	r1, r4, r5
 80094f8:	428b      	cmp	r3, r1
 80094fa:	bf01      	itttt	eq
 80094fc:	6819      	ldreq	r1, [r3, #0]
 80094fe:	685b      	ldreq	r3, [r3, #4]
 8009500:	1949      	addeq	r1, r1, r5
 8009502:	6021      	streq	r1, [r4, #0]
 8009504:	e7ed      	b.n	80094e2 <_free_r+0x22>
 8009506:	461a      	mov	r2, r3
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	b10b      	cbz	r3, 8009510 <_free_r+0x50>
 800950c:	42a3      	cmp	r3, r4
 800950e:	d9fa      	bls.n	8009506 <_free_r+0x46>
 8009510:	6811      	ldr	r1, [r2, #0]
 8009512:	1855      	adds	r5, r2, r1
 8009514:	42a5      	cmp	r5, r4
 8009516:	d10b      	bne.n	8009530 <_free_r+0x70>
 8009518:	6824      	ldr	r4, [r4, #0]
 800951a:	4421      	add	r1, r4
 800951c:	1854      	adds	r4, r2, r1
 800951e:	42a3      	cmp	r3, r4
 8009520:	6011      	str	r1, [r2, #0]
 8009522:	d1e0      	bne.n	80094e6 <_free_r+0x26>
 8009524:	681c      	ldr	r4, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	6053      	str	r3, [r2, #4]
 800952a:	4421      	add	r1, r4
 800952c:	6011      	str	r1, [r2, #0]
 800952e:	e7da      	b.n	80094e6 <_free_r+0x26>
 8009530:	d902      	bls.n	8009538 <_free_r+0x78>
 8009532:	230c      	movs	r3, #12
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	e7d6      	b.n	80094e6 <_free_r+0x26>
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	1961      	adds	r1, r4, r5
 800953c:	428b      	cmp	r3, r1
 800953e:	bf04      	itt	eq
 8009540:	6819      	ldreq	r1, [r3, #0]
 8009542:	685b      	ldreq	r3, [r3, #4]
 8009544:	6063      	str	r3, [r4, #4]
 8009546:	bf04      	itt	eq
 8009548:	1949      	addeq	r1, r1, r5
 800954a:	6021      	streq	r1, [r4, #0]
 800954c:	6054      	str	r4, [r2, #4]
 800954e:	e7ca      	b.n	80094e6 <_free_r+0x26>
 8009550:	b003      	add	sp, #12
 8009552:	bd30      	pop	{r4, r5, pc}
 8009554:	20001e3c 	.word	0x20001e3c

08009558 <sbrk_aligned>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4e0e      	ldr	r6, [pc, #56]	; (8009594 <sbrk_aligned+0x3c>)
 800955c:	460c      	mov	r4, r1
 800955e:	6831      	ldr	r1, [r6, #0]
 8009560:	4605      	mov	r5, r0
 8009562:	b911      	cbnz	r1, 800956a <sbrk_aligned+0x12>
 8009564:	f000 f8bc 	bl	80096e0 <_sbrk_r>
 8009568:	6030      	str	r0, [r6, #0]
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f8b7 	bl	80096e0 <_sbrk_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d00a      	beq.n	800958c <sbrk_aligned+0x34>
 8009576:	1cc4      	adds	r4, r0, #3
 8009578:	f024 0403 	bic.w	r4, r4, #3
 800957c:	42a0      	cmp	r0, r4
 800957e:	d007      	beq.n	8009590 <sbrk_aligned+0x38>
 8009580:	1a21      	subs	r1, r4, r0
 8009582:	4628      	mov	r0, r5
 8009584:	f000 f8ac 	bl	80096e0 <_sbrk_r>
 8009588:	3001      	adds	r0, #1
 800958a:	d101      	bne.n	8009590 <sbrk_aligned+0x38>
 800958c:	f04f 34ff 	mov.w	r4, #4294967295
 8009590:	4620      	mov	r0, r4
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	20001e40 	.word	0x20001e40

08009598 <_malloc_r>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	1ccd      	adds	r5, r1, #3
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	4607      	mov	r7, r0
 80095ae:	db01      	blt.n	80095b4 <_malloc_r+0x1c>
 80095b0:	42a9      	cmp	r1, r5
 80095b2:	d905      	bls.n	80095c0 <_malloc_r+0x28>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	2600      	movs	r6, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c0:	4e2e      	ldr	r6, [pc, #184]	; (800967c <_malloc_r+0xe4>)
 80095c2:	f000 f89d 	bl	8009700 <__malloc_lock>
 80095c6:	6833      	ldr	r3, [r6, #0]
 80095c8:	461c      	mov	r4, r3
 80095ca:	bb34      	cbnz	r4, 800961a <_malloc_r+0x82>
 80095cc:	4629      	mov	r1, r5
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ffc2 	bl	8009558 <sbrk_aligned>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	4604      	mov	r4, r0
 80095d8:	d14d      	bne.n	8009676 <_malloc_r+0xde>
 80095da:	6834      	ldr	r4, [r6, #0]
 80095dc:	4626      	mov	r6, r4
 80095de:	2e00      	cmp	r6, #0
 80095e0:	d140      	bne.n	8009664 <_malloc_r+0xcc>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4631      	mov	r1, r6
 80095e6:	4638      	mov	r0, r7
 80095e8:	eb04 0803 	add.w	r8, r4, r3
 80095ec:	f000 f878 	bl	80096e0 <_sbrk_r>
 80095f0:	4580      	cmp	r8, r0
 80095f2:	d13a      	bne.n	800966a <_malloc_r+0xd2>
 80095f4:	6821      	ldr	r1, [r4, #0]
 80095f6:	3503      	adds	r5, #3
 80095f8:	1a6d      	subs	r5, r5, r1
 80095fa:	f025 0503 	bic.w	r5, r5, #3
 80095fe:	3508      	adds	r5, #8
 8009600:	2d0c      	cmp	r5, #12
 8009602:	bf38      	it	cc
 8009604:	250c      	movcc	r5, #12
 8009606:	4629      	mov	r1, r5
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ffa5 	bl	8009558 <sbrk_aligned>
 800960e:	3001      	adds	r0, #1
 8009610:	d02b      	beq.n	800966a <_malloc_r+0xd2>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	442b      	add	r3, r5
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	e00e      	b.n	8009638 <_malloc_r+0xa0>
 800961a:	6822      	ldr	r2, [r4, #0]
 800961c:	1b52      	subs	r2, r2, r5
 800961e:	d41e      	bmi.n	800965e <_malloc_r+0xc6>
 8009620:	2a0b      	cmp	r2, #11
 8009622:	d916      	bls.n	8009652 <_malloc_r+0xba>
 8009624:	1961      	adds	r1, r4, r5
 8009626:	42a3      	cmp	r3, r4
 8009628:	6025      	str	r5, [r4, #0]
 800962a:	bf18      	it	ne
 800962c:	6059      	strne	r1, [r3, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	bf08      	it	eq
 8009632:	6031      	streq	r1, [r6, #0]
 8009634:	5162      	str	r2, [r4, r5]
 8009636:	604b      	str	r3, [r1, #4]
 8009638:	4638      	mov	r0, r7
 800963a:	f104 060b 	add.w	r6, r4, #11
 800963e:	f000 f865 	bl	800970c <__malloc_unlock>
 8009642:	f026 0607 	bic.w	r6, r6, #7
 8009646:	1d23      	adds	r3, r4, #4
 8009648:	1af2      	subs	r2, r6, r3
 800964a:	d0b6      	beq.n	80095ba <_malloc_r+0x22>
 800964c:	1b9b      	subs	r3, r3, r6
 800964e:	50a3      	str	r3, [r4, r2]
 8009650:	e7b3      	b.n	80095ba <_malloc_r+0x22>
 8009652:	6862      	ldr	r2, [r4, #4]
 8009654:	42a3      	cmp	r3, r4
 8009656:	bf0c      	ite	eq
 8009658:	6032      	streq	r2, [r6, #0]
 800965a:	605a      	strne	r2, [r3, #4]
 800965c:	e7ec      	b.n	8009638 <_malloc_r+0xa0>
 800965e:	4623      	mov	r3, r4
 8009660:	6864      	ldr	r4, [r4, #4]
 8009662:	e7b2      	b.n	80095ca <_malloc_r+0x32>
 8009664:	4634      	mov	r4, r6
 8009666:	6876      	ldr	r6, [r6, #4]
 8009668:	e7b9      	b.n	80095de <_malloc_r+0x46>
 800966a:	230c      	movs	r3, #12
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4638      	mov	r0, r7
 8009670:	f000 f84c 	bl	800970c <__malloc_unlock>
 8009674:	e7a1      	b.n	80095ba <_malloc_r+0x22>
 8009676:	6025      	str	r5, [r4, #0]
 8009678:	e7de      	b.n	8009638 <_malloc_r+0xa0>
 800967a:	bf00      	nop
 800967c:	20001e3c 	.word	0x20001e3c

08009680 <_realloc_r>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4680      	mov	r8, r0
 8009686:	4614      	mov	r4, r2
 8009688:	460e      	mov	r6, r1
 800968a:	b921      	cbnz	r1, 8009696 <_realloc_r+0x16>
 800968c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4611      	mov	r1, r2
 8009692:	f7ff bf81 	b.w	8009598 <_malloc_r>
 8009696:	b92a      	cbnz	r2, 80096a4 <_realloc_r+0x24>
 8009698:	f7ff ff12 	bl	80094c0 <_free_r>
 800969c:	4625      	mov	r5, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	f000 f838 	bl	8009718 <_malloc_usable_size_r>
 80096a8:	4284      	cmp	r4, r0
 80096aa:	4607      	mov	r7, r0
 80096ac:	d802      	bhi.n	80096b4 <_realloc_r+0x34>
 80096ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096b2:	d812      	bhi.n	80096da <_realloc_r+0x5a>
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff ff6e 	bl	8009598 <_malloc_r>
 80096bc:	4605      	mov	r5, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0ed      	beq.n	800969e <_realloc_r+0x1e>
 80096c2:	42bc      	cmp	r4, r7
 80096c4:	4622      	mov	r2, r4
 80096c6:	4631      	mov	r1, r6
 80096c8:	bf28      	it	cs
 80096ca:	463a      	movcs	r2, r7
 80096cc:	f7ff fed0 	bl	8009470 <memcpy>
 80096d0:	4631      	mov	r1, r6
 80096d2:	4640      	mov	r0, r8
 80096d4:	f7ff fef4 	bl	80094c0 <_free_r>
 80096d8:	e7e1      	b.n	800969e <_realloc_r+0x1e>
 80096da:	4635      	mov	r5, r6
 80096dc:	e7df      	b.n	800969e <_realloc_r+0x1e>
	...

080096e0 <_sbrk_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d06      	ldr	r5, [pc, #24]	; (80096fc <_sbrk_r+0x1c>)
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f7 fad6 	bl	8000c9c <_sbrk>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_sbrk_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_sbrk_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20001e44 	.word	0x20001e44

08009700 <__malloc_lock>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__malloc_lock+0x8>)
 8009702:	f000 b811 	b.w	8009728 <__retarget_lock_acquire_recursive>
 8009706:	bf00      	nop
 8009708:	20001e48 	.word	0x20001e48

0800970c <__malloc_unlock>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__malloc_unlock+0x8>)
 800970e:	f000 b80c 	b.w	800972a <__retarget_lock_release_recursive>
 8009712:	bf00      	nop
 8009714:	20001e48 	.word	0x20001e48

08009718 <_malloc_usable_size_r>:
 8009718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800971c:	1f18      	subs	r0, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfbc      	itt	lt
 8009722:	580b      	ldrlt	r3, [r1, r0]
 8009724:	18c0      	addlt	r0, r0, r3
 8009726:	4770      	bx	lr

08009728 <__retarget_lock_acquire_recursive>:
 8009728:	4770      	bx	lr

0800972a <__retarget_lock_release_recursive>:
 800972a:	4770      	bx	lr

0800972c <_init>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr

08009738 <_fini>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

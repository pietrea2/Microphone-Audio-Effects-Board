--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" NUMBER_OF_TAPS=1 POWER_UP_STATE="DONT_CARE" TAP_DISTANCE=8 WIDTH=6 aclr clken clock shiftin taps ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 22.1 cbx_altdpram 2023:02:14:18:07:11:SC cbx_altera_counter 2023:02:14:18:07:10:SC cbx_altera_syncram 2023:02:14:18:07:10:SC cbx_altera_syncram_nd_impl 2023:02:14:18:07:10:SC cbx_altshift_taps 2023:02:14:18:07:11:SC cbx_altsyncram 2023:02:14:18:07:10:SC cbx_cycloneii 2023:02:14:18:07:11:SC cbx_lpm_add_sub 2023:02:14:18:07:10:SC cbx_lpm_compare 2023:02:14:18:07:10:SC cbx_lpm_counter 2023:02:14:18:07:10:SC cbx_lpm_decode 2023:02:14:18:07:10:SC cbx_lpm_mux 2023:02:14:18:07:11:SC cbx_mgl 2023:02:14:18:07:18:SC cbx_nadder 2023:02:14:18:07:11:SC cbx_stratix 2023:02:14:18:07:11:SC cbx_stratixii 2023:02:14:18:07:11:SC cbx_stratixiii 2023:02:14:18:07:11:SC cbx_stratixv 2023:02:14:18:07:11:SC cbx_util_mgl 2023:02:14:18:07:11:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION altsyncram_rcc1 (aclr0, address_a[2..0], address_b[2..0], clock0, clock1, clocken0, clocken1, data_a[5..0], wren_a)
RETURNS ( q_b[5..0]);
FUNCTION cntr_uhf (clk_en, clock)
RETURNS ( q[2..0]);
FUNCTION cntr_i1h (aset, clk_en, clock, cnt_en)
RETURNS ( cout);

--synthesis_resources = lut 9 M10K 1 reg 10 
SUBDESIGN shift_taps_0tv
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	shiftin[5..0]	:	input;
	shiftout[5..0]	:	output;
	taps[5..0]	:	output;
) 
VARIABLE 
	altsyncram4 : altsyncram_rcc1;
	dffe3a[2..0] : dffe;
	dffe6 : dffe;
	add_sub2_dataa[2..0]	:	WIRE;
	add_sub2_datab[2..0]	:	WIRE;
	add_sub2_result[2..0]	:	WIRE;
	cntr1 : cntr_uhf;
	cntr5 : cntr_i1h;
	rdaddress[2..0]	: WIRE;

BEGIN 
	altsyncram4.aclr0 = dffe6.q;
	altsyncram4.address_a[] = cntr1.q[];
	altsyncram4.address_b[] = rdaddress[];
	altsyncram4.clock0 = clock;
	altsyncram4.clock1 = clock;
	altsyncram4.clocken0 = clken;
	altsyncram4.clocken1 = clken;
	altsyncram4.data_a[] = ( shiftin[]);
	altsyncram4.wren_a = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( add_sub2_result[2..2], (! add_sub2_result[1..1]), add_sub2_result[0..0]);
	dffe3a[].ena = clken;
	dffe6.clk = clock;
	dffe6.d = (! cntr5.cout);
	dffe6.ena = clken;
	dffe6.prn = (! aclr);
	add_sub2_result[] = add_sub2_dataa[] + add_sub2_datab[];
	add_sub2_dataa[] = cntr1.q[];
	add_sub2_datab[] = B"011";
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	cntr5.aset = aclr;
	cntr5.clk_en = clken;
	cntr5.clock = clock;
	cntr5.cnt_en = (! cntr5.cout);
	rdaddress[] = ( dffe3a[2..2].q, (! dffe3a[1..1].q), dffe3a[0..0].q);
	shiftout[5..0] = altsyncram4.q_b[5..0];
	taps[] = altsyncram4.q_b[];
END;
--VALID FILE
